package org.oceanops.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

/**
 * Class _PtfRefLock was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PtfRefLock extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String REF_PK_COLUMN = "REF";

    public static final DateProperty<LocalDateTime> DATE_REQUESTED = PropertyFactory.createDate("dateRequested", LocalDateTime.class);
    public static final StringProperty<String> DESCRIPTION = PropertyFactory.createString("description", String.class);
    public static final StringProperty<String> REF = PropertyFactory.createString("ref", String.class);
    public static final StringProperty<String> WMO = PropertyFactory.createString("wmo", String.class);

    protected LocalDateTime dateRequested;
    protected String description;
    protected String ref;
    protected String wmo;


    public void setDateRequested(LocalDateTime dateRequested) {
        beforePropertyWrite("dateRequested", this.dateRequested, dateRequested);
        this.dateRequested = dateRequested;
    }

    public LocalDateTime getDateRequested() {
        beforePropertyRead("dateRequested");
        return this.dateRequested;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setRef(String ref) {
        beforePropertyWrite("ref", this.ref, ref);
        this.ref = ref;
    }

    public String getRef() {
        beforePropertyRead("ref");
        return this.ref;
    }

    public void setWmo(String wmo) {
        beforePropertyWrite("wmo", this.wmo, wmo);
        this.wmo = wmo;
    }

    public String getWmo() {
        beforePropertyRead("wmo");
        return this.wmo;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "dateRequested":
                return this.dateRequested;
            case "description":
                return this.description;
            case "ref":
                return this.ref;
            case "wmo":
                return this.wmo;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "dateRequested":
                this.dateRequested = (LocalDateTime)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "ref":
                this.ref = (String)val;
                break;
            case "wmo":
                this.wmo = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.dateRequested);
        out.writeObject(this.description);
        out.writeObject(this.ref);
        out.writeObject(this.wmo);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.dateRequested = (LocalDateTime)in.readObject();
        this.description = (String)in.readObject();
        this.ref = (String)in.readObject();
        this.wmo = (String)in.readObject();
    }

}
