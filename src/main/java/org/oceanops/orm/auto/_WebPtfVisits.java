package org.oceanops.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

/**
 * Class _WebPtfVisits was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _WebPtfVisits extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String PTF_REF_PK_COLUMN = "PTF_REF";
    public static final String VISIT_COUNT_PK_COLUMN = "VISIT_COUNT";

    public static final StringProperty<String> PTF_REF = PropertyFactory.createString("ptfRef", String.class);
    public static final NumericProperty<Integer> VISIT_COUNT = PropertyFactory.createNumeric("visitCount", Integer.class);

    protected String ptfRef;
    protected Integer visitCount;


    public void setPtfRef(String ptfRef) {
        beforePropertyWrite("ptfRef", this.ptfRef, ptfRef);
        this.ptfRef = ptfRef;
    }

    public String getPtfRef() {
        beforePropertyRead("ptfRef");
        return this.ptfRef;
    }

    public void setVisitCount(Integer visitCount) {
        beforePropertyWrite("visitCount", this.visitCount, visitCount);
        this.visitCount = visitCount;
    }

    public Integer getVisitCount() {
        beforePropertyRead("visitCount");
        return this.visitCount;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "ptfRef":
                return this.ptfRef;
            case "visitCount":
                return this.visitCount;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "ptfRef":
                this.ptfRef = (String)val;
                break;
            case "visitCount":
                this.visitCount = (Integer)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.ptfRef);
        out.writeObject(this.visitCount);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.ptfRef = (String)in.readObject();
        this.visitCount = (Integer)in.readObject();
    }

}
