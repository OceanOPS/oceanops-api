package org.oceanops.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.oceanops.orm.Agency;
import org.oceanops.orm.AgencyRole;
import org.oceanops.orm.Site;

/**
 * Class _AgencySiteRole was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _AgencySiteRole extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final NumericProperty<Integer> ID = PropertyFactory.createNumeric("id", Integer.class);
    public static final NumericProperty<Integer> SITE_ID = PropertyFactory.createNumeric("siteId", Integer.class);
    public static final EntityProperty<Agency> AGENCY = PropertyFactory.createEntity("agency", Agency.class);
    public static final EntityProperty<AgencyRole> ROLE = PropertyFactory.createEntity("role", AgencyRole.class);
    public static final EntityProperty<Site> SITE = PropertyFactory.createEntity("site", Site.class);

    protected Integer id;
    protected Integer siteId;

    protected Object agency;
    protected Object role;
    protected Object site;

    public void setId(Integer id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Integer getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setSiteId(Integer siteId) {
        beforePropertyWrite("siteId", this.siteId, siteId);
        this.siteId = siteId;
    }

    public Integer getSiteId() {
        beforePropertyRead("siteId");
        return this.siteId;
    }

    public void setAgency(Agency agency) {
        setToOneTarget("agency", agency, true);
    }

    public Agency getAgency() {
        return (Agency)readProperty("agency");
    }

    public void setRole(AgencyRole role) {
        setToOneTarget("role", role, true);
    }

    public AgencyRole getRole() {
        return (AgencyRole)readProperty("role");
    }

    public void setSite(Site site) {
        setToOneTarget("site", site, true);
    }

    public Site getSite() {
        return (Site)readProperty("site");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "id":
                return this.id;
            case "siteId":
                return this.siteId;
            case "agency":
                return this.agency;
            case "role":
                return this.role;
            case "site":
                return this.site;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "id":
                this.id = (Integer)val;
                break;
            case "siteId":
                this.siteId = (Integer)val;
                break;
            case "agency":
                this.agency = val;
                break;
            case "role":
                this.role = val;
                break;
            case "site":
                this.site = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.id);
        out.writeObject(this.siteId);
        out.writeObject(this.agency);
        out.writeObject(this.role);
        out.writeObject(this.site);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.id = (Integer)in.readObject();
        this.siteId = (Integer)in.readObject();
        this.agency = in.readObject();
        this.role = in.readObject();
        this.site = in.readObject();
    }

}
