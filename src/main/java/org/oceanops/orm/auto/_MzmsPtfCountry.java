package org.oceanops.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.orm.Country;
import org.oceanops.orm.Ptf;

/**
 * Class _MzmsPtfCountry was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _MzmsPtfCountry extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String COUNTRY_ID_PK_COLUMN = "COUNTRY_ID";
    public static final String PTF_ID_PK_COLUMN = "PTF_ID";

    public static final NumericProperty<Integer> CHECKED = PropertyFactory.createNumeric("checked", Integer.class);
    public static final StringProperty<String> COMMENTS = PropertyFactory.createString("comments", String.class);
    public static final NumericProperty<Integer> COUNTRY_ID = PropertyFactory.createNumeric("countryId", Integer.class);
    public static final DateProperty<LocalDateTime> FORMAL_NOTIFICATION_DATE = PropertyFactory.createDate("formalNotificationDate", LocalDateTime.class);
    public static final DateProperty<LocalDateTime> LATEST_REPORT_DATE = PropertyFactory.createDate("latestReportDate", LocalDateTime.class);
    public static final NumericProperty<Integer> PTF_ID = PropertyFactory.createNumeric("ptfId", Integer.class);
    public static final DateProperty<LocalDateTime> WARNING_DATE = PropertyFactory.createDate("warningDate", LocalDateTime.class);
    public static final EntityProperty<Country> COUNTRY = PropertyFactory.createEntity("country", Country.class);
    public static final EntityProperty<Ptf> PTF = PropertyFactory.createEntity("ptf", Ptf.class);

    protected Integer checked;
    protected String comments;
    protected Integer countryId;
    protected LocalDateTime formalNotificationDate;
    protected LocalDateTime latestReportDate;
    protected Integer ptfId;
    protected LocalDateTime warningDate;

    protected Object country;
    protected Object ptf;

    public void setChecked(Integer checked) {
        beforePropertyWrite("checked", this.checked, checked);
        this.checked = checked;
    }

    public Integer getChecked() {
        beforePropertyRead("checked");
        return this.checked;
    }

    public void setComments(String comments) {
        beforePropertyWrite("comments", this.comments, comments);
        this.comments = comments;
    }

    public String getComments() {
        beforePropertyRead("comments");
        return this.comments;
    }

    public void setCountryId(Integer countryId) {
        beforePropertyWrite("countryId", this.countryId, countryId);
        this.countryId = countryId;
    }

    public Integer getCountryId() {
        beforePropertyRead("countryId");
        return this.countryId;
    }

    public void setFormalNotificationDate(LocalDateTime formalNotificationDate) {
        beforePropertyWrite("formalNotificationDate", this.formalNotificationDate, formalNotificationDate);
        this.formalNotificationDate = formalNotificationDate;
    }

    public LocalDateTime getFormalNotificationDate() {
        beforePropertyRead("formalNotificationDate");
        return this.formalNotificationDate;
    }

    public void setLatestReportDate(LocalDateTime latestReportDate) {
        beforePropertyWrite("latestReportDate", this.latestReportDate, latestReportDate);
        this.latestReportDate = latestReportDate;
    }

    public LocalDateTime getLatestReportDate() {
        beforePropertyRead("latestReportDate");
        return this.latestReportDate;
    }

    public void setPtfId(Integer ptfId) {
        beforePropertyWrite("ptfId", this.ptfId, ptfId);
        this.ptfId = ptfId;
    }

    public Integer getPtfId() {
        beforePropertyRead("ptfId");
        return this.ptfId;
    }

    public void setWarningDate(LocalDateTime warningDate) {
        beforePropertyWrite("warningDate", this.warningDate, warningDate);
        this.warningDate = warningDate;
    }

    public LocalDateTime getWarningDate() {
        beforePropertyRead("warningDate");
        return this.warningDate;
    }

    public void setCountry(Country country) {
        setToOneTarget("country", country, true);
    }

    public Country getCountry() {
        return (Country)readProperty("country");
    }

    public void setPtf(Ptf ptf) {
        setToOneTarget("ptf", ptf, true);
    }

    public Ptf getPtf() {
        return (Ptf)readProperty("ptf");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "checked":
                return this.checked;
            case "comments":
                return this.comments;
            case "countryId":
                return this.countryId;
            case "formalNotificationDate":
                return this.formalNotificationDate;
            case "latestReportDate":
                return this.latestReportDate;
            case "ptfId":
                return this.ptfId;
            case "warningDate":
                return this.warningDate;
            case "country":
                return this.country;
            case "ptf":
                return this.ptf;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "checked":
                this.checked = (Integer)val;
                break;
            case "comments":
                this.comments = (String)val;
                break;
            case "countryId":
                this.countryId = (Integer)val;
                break;
            case "formalNotificationDate":
                this.formalNotificationDate = (LocalDateTime)val;
                break;
            case "latestReportDate":
                this.latestReportDate = (LocalDateTime)val;
                break;
            case "ptfId":
                this.ptfId = (Integer)val;
                break;
            case "warningDate":
                this.warningDate = (LocalDateTime)val;
                break;
            case "country":
                this.country = val;
                break;
            case "ptf":
                this.ptf = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.checked);
        out.writeObject(this.comments);
        out.writeObject(this.countryId);
        out.writeObject(this.formalNotificationDate);
        out.writeObject(this.latestReportDate);
        out.writeObject(this.ptfId);
        out.writeObject(this.warningDate);
        out.writeObject(this.country);
        out.writeObject(this.ptf);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.checked = (Integer)in.readObject();
        this.comments = (String)in.readObject();
        this.countryId = (Integer)in.readObject();
        this.formalNotificationDate = (LocalDateTime)in.readObject();
        this.latestReportDate = (LocalDateTime)in.readObject();
        this.ptfId = (Integer)in.readObject();
        this.warningDate = (LocalDateTime)in.readObject();
        this.country = in.readObject();
        this.ptf = in.readObject();
    }

}
