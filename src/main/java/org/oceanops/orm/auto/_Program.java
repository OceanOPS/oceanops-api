package org.oceanops.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.orm.Country;
import org.oceanops.orm.CruiseProgram;
import org.oceanops.orm.Image;
import org.oceanops.orm.LineProgram;
import org.oceanops.orm.NcNotification;
import org.oceanops.orm.Network;
import org.oceanops.orm.ProgramAgency;
import org.oceanops.orm.ProgramContact;
import org.oceanops.orm.Ptf;
import org.oceanops.orm.PtfModel;
import org.oceanops.orm.PtfVariable;
import org.oceanops.orm.Service;
import org.oceanops.orm.Weblink;

/**
 * Class _Program was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Program extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final NumericProperty<Integer> ACTIVE = PropertyFactory.createNumeric("active", Integer.class);
    public static final StringProperty<String> DESCRIPTION = PropertyFactory.createString("description", String.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final StringProperty<String> NAME_SHORT = PropertyFactory.createString("nameShort", String.class);
    public static final StringProperty<String> WIGOS_CODE = PropertyFactory.createString("wigosCode", String.class);
    public static final EntityProperty<Country> COUNTRY = PropertyFactory.createEntity("country", Country.class);
    public static final ListProperty<CruiseProgram> CRUISE_PROGRAMS = PropertyFactory.createList("cruisePrograms", CruiseProgram.class);
    public static final EntityProperty<PtfModel> DEFAULT_PTF_MODEL = PropertyFactory.createEntity("defaultPtfModel", PtfModel.class);
    public static final ListProperty<Image> IMAGES = PropertyFactory.createList("images", Image.class);
    public static final ListProperty<LineProgram> LINE_PROGRAMS = PropertyFactory.createList("linePrograms", LineProgram.class);
    public static final ListProperty<NcNotification> NC_NOTIFICATIONS = PropertyFactory.createList("ncNotifications", NcNotification.class);
    public static final EntityProperty<Network> NETWORK = PropertyFactory.createEntity("network", Network.class);
    public static final ListProperty<ProgramAgency> PROGRAM_AGENCIES = PropertyFactory.createList("programAgencies", ProgramAgency.class);
    public static final ListProperty<ProgramContact> PROGRAM_CONTACTS = PropertyFactory.createList("programContacts", ProgramContact.class);
    public static final ListProperty<PtfVariable> PTF_VARIABLES = PropertyFactory.createList("ptfVariables", PtfVariable.class);
    public static final ListProperty<Ptf> PTFS = PropertyFactory.createList("ptfs", Ptf.class);
    public static final ListProperty<Service> SERVICES = PropertyFactory.createList("services", Service.class);
    public static final ListProperty<Weblink> WEBLINKS = PropertyFactory.createList("weblinks", Weblink.class);

    protected Integer active;
    protected String description;
    protected String name;
    protected String nameShort;
    protected String wigosCode;

    protected Object country;
    protected Object cruisePrograms;
    protected Object defaultPtfModel;
    protected Object images;
    protected Object linePrograms;
    protected Object ncNotifications;
    protected Object network;
    protected Object programAgencies;
    protected Object programContacts;
    protected Object ptfVariables;
    protected Object ptfs;
    protected Object services;
    protected Object weblinks;

    public void setActive(Integer active) {
        beforePropertyWrite("active", this.active, active);
        this.active = active;
    }

    public Integer getActive() {
        beforePropertyRead("active");
        return this.active;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setNameShort(String nameShort) {
        beforePropertyWrite("nameShort", this.nameShort, nameShort);
        this.nameShort = nameShort;
    }

    public String getNameShort() {
        beforePropertyRead("nameShort");
        return this.nameShort;
    }

    public void setWigosCode(String wigosCode) {
        beforePropertyWrite("wigosCode", this.wigosCode, wigosCode);
        this.wigosCode = wigosCode;
    }

    public String getWigosCode() {
        beforePropertyRead("wigosCode");
        return this.wigosCode;
    }

    public void setCountry(Country country) {
        setToOneTarget("country", country, true);
    }

    public Country getCountry() {
        return (Country)readProperty("country");
    }

    public void addToCruisePrograms(CruiseProgram obj) {
        addToManyTarget("cruisePrograms", obj, true);
    }

    public void removeFromCruisePrograms(CruiseProgram obj) {
        removeToManyTarget("cruisePrograms", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CruiseProgram> getCruisePrograms() {
        return (List<CruiseProgram>)readProperty("cruisePrograms");
    }

    public void setDefaultPtfModel(PtfModel defaultPtfModel) {
        setToOneTarget("defaultPtfModel", defaultPtfModel, true);
    }

    public PtfModel getDefaultPtfModel() {
        return (PtfModel)readProperty("defaultPtfModel");
    }

    public void addToImages(Image obj) {
        addToManyTarget("images", obj, true);
    }

    public void removeFromImages(Image obj) {
        removeToManyTarget("images", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Image> getImages() {
        return (List<Image>)readProperty("images");
    }

    public void addToLinePrograms(LineProgram obj) {
        addToManyTarget("linePrograms", obj, true);
    }

    public void removeFromLinePrograms(LineProgram obj) {
        removeToManyTarget("linePrograms", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<LineProgram> getLinePrograms() {
        return (List<LineProgram>)readProperty("linePrograms");
    }

    public void addToNcNotifications(NcNotification obj) {
        addToManyTarget("ncNotifications", obj, true);
    }

    public void removeFromNcNotifications(NcNotification obj) {
        removeToManyTarget("ncNotifications", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<NcNotification> getNcNotifications() {
        return (List<NcNotification>)readProperty("ncNotifications");
    }

    public void setNetwork(Network network) {
        setToOneTarget("network", network, true);
    }

    public Network getNetwork() {
        return (Network)readProperty("network");
    }

    public void addToProgramAgencies(ProgramAgency obj) {
        addToManyTarget("programAgencies", obj, true);
    }

    public void removeFromProgramAgencies(ProgramAgency obj) {
        removeToManyTarget("programAgencies", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ProgramAgency> getProgramAgencies() {
        return (List<ProgramAgency>)readProperty("programAgencies");
    }

    public void addToProgramContacts(ProgramContact obj) {
        addToManyTarget("programContacts", obj, true);
    }

    public void removeFromProgramContacts(ProgramContact obj) {
        removeToManyTarget("programContacts", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ProgramContact> getProgramContacts() {
        return (List<ProgramContact>)readProperty("programContacts");
    }

    public void addToPtfVariables(PtfVariable obj) {
        addToManyTarget("ptfVariables", obj, true);
    }

    public void removeFromPtfVariables(PtfVariable obj) {
        removeToManyTarget("ptfVariables", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfVariable> getPtfVariables() {
        return (List<PtfVariable>)readProperty("ptfVariables");
    }

    public void addToPtfs(Ptf obj) {
        addToManyTarget("ptfs", obj, true);
    }

    public void removeFromPtfs(Ptf obj) {
        removeToManyTarget("ptfs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Ptf> getPtfs() {
        return (List<Ptf>)readProperty("ptfs");
    }

    public void addToServices(Service obj) {
        addToManyTarget("services", obj, true);
    }

    public void removeFromServices(Service obj) {
        removeToManyTarget("services", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Service> getServices() {
        return (List<Service>)readProperty("services");
    }

    public void addToWeblinks(Weblink obj) {
        addToManyTarget("weblinks", obj, true);
    }

    public void removeFromWeblinks(Weblink obj) {
        removeToManyTarget("weblinks", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Weblink> getWeblinks() {
        return (List<Weblink>)readProperty("weblinks");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "active":
                return this.active;
            case "description":
                return this.description;
            case "name":
                return this.name;
            case "nameShort":
                return this.nameShort;
            case "wigosCode":
                return this.wigosCode;
            case "country":
                return this.country;
            case "cruisePrograms":
                return this.cruisePrograms;
            case "defaultPtfModel":
                return this.defaultPtfModel;
            case "images":
                return this.images;
            case "linePrograms":
                return this.linePrograms;
            case "ncNotifications":
                return this.ncNotifications;
            case "network":
                return this.network;
            case "programAgencies":
                return this.programAgencies;
            case "programContacts":
                return this.programContacts;
            case "ptfVariables":
                return this.ptfVariables;
            case "ptfs":
                return this.ptfs;
            case "services":
                return this.services;
            case "weblinks":
                return this.weblinks;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "active":
                this.active = (Integer)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "nameShort":
                this.nameShort = (String)val;
                break;
            case "wigosCode":
                this.wigosCode = (String)val;
                break;
            case "country":
                this.country = val;
                break;
            case "cruisePrograms":
                this.cruisePrograms = val;
                break;
            case "defaultPtfModel":
                this.defaultPtfModel = val;
                break;
            case "images":
                this.images = val;
                break;
            case "linePrograms":
                this.linePrograms = val;
                break;
            case "ncNotifications":
                this.ncNotifications = val;
                break;
            case "network":
                this.network = val;
                break;
            case "programAgencies":
                this.programAgencies = val;
                break;
            case "programContacts":
                this.programContacts = val;
                break;
            case "ptfVariables":
                this.ptfVariables = val;
                break;
            case "ptfs":
                this.ptfs = val;
                break;
            case "services":
                this.services = val;
                break;
            case "weblinks":
                this.weblinks = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.active);
        out.writeObject(this.description);
        out.writeObject(this.name);
        out.writeObject(this.nameShort);
        out.writeObject(this.wigosCode);
        out.writeObject(this.country);
        out.writeObject(this.cruisePrograms);
        out.writeObject(this.defaultPtfModel);
        out.writeObject(this.images);
        out.writeObject(this.linePrograms);
        out.writeObject(this.ncNotifications);
        out.writeObject(this.network);
        out.writeObject(this.programAgencies);
        out.writeObject(this.programContacts);
        out.writeObject(this.ptfVariables);
        out.writeObject(this.ptfs);
        out.writeObject(this.services);
        out.writeObject(this.weblinks);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.active = (Integer)in.readObject();
        this.description = (String)in.readObject();
        this.name = (String)in.readObject();
        this.nameShort = (String)in.readObject();
        this.wigosCode = (String)in.readObject();
        this.country = in.readObject();
        this.cruisePrograms = in.readObject();
        this.defaultPtfModel = in.readObject();
        this.images = in.readObject();
        this.linePrograms = in.readObject();
        this.ncNotifications = in.readObject();
        this.network = in.readObject();
        this.programAgencies = in.readObject();
        this.programContacts = in.readObject();
        this.ptfVariables = in.readObject();
        this.ptfs = in.readObject();
        this.services = in.readObject();
        this.weblinks = in.readObject();
    }

}
