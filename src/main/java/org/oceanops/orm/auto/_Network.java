package org.oceanops.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.orm.AgencyDacType;
import org.oceanops.orm.CountryCommitment;
import org.oceanops.orm.Doc;
import org.oceanops.orm.Image;
import org.oceanops.orm.MapTypeNetwork;
import org.oceanops.orm.NetworkContact;
import org.oceanops.orm.NetworkCountry;
import org.oceanops.orm.NetworkEndingCause;
import org.oceanops.orm.NetworkPtf;
import org.oceanops.orm.NetworkSite;
import org.oceanops.orm.NetworkType;
import org.oceanops.orm.Program;
import org.oceanops.orm.PtfModel;
import org.oceanops.orm.SensorModelNetwork;
import org.oceanops.orm.Survey;
import org.oceanops.orm.UserGroup;
import org.oceanops.orm.WebMetricNetwork;
import org.oceanops.orm.Weblink;

/**
 * Class _Network was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Network extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> DESCRIPTION = PropertyFactory.createString("description", String.class);
    public static final NumericProperty<Integer> ID = PropertyFactory.createNumeric("id", Integer.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final StringProperty<String> NAME_SHORT = PropertyFactory.createString("nameShort", String.class);
    public static final NumericProperty<Integer> PARENT_NETWORK_ID = PropertyFactory.createNumeric("parentNetworkId", Integer.class);
    public static final NumericProperty<Integer> RANK = PropertyFactory.createNumeric("rank", Integer.class);
    public static final StringProperty<String> WIGOS_CODE = PropertyFactory.createString("wigosCode", String.class);
    public static final ListProperty<AgencyDacType> AGENCY_DAC_TYPES = PropertyFactory.createList("agencyDacTypes", AgencyDacType.class);
    public static final ListProperty<CountryCommitment> COUNTRY_COMMITMENTS = PropertyFactory.createList("countryCommitments", CountryCommitment.class);
    public static final ListProperty<Doc> DOCS = PropertyFactory.createList("docs", Doc.class);
    public static final ListProperty<Image> IMAGES = PropertyFactory.createList("images", Image.class);
    public static final ListProperty<MapTypeNetwork> MAP_TYPE_NETWORKS = PropertyFactory.createList("mapTypeNetworks", MapTypeNetwork.class);
    public static final ListProperty<NetworkContact> NETWORK_CONTACTS = PropertyFactory.createList("networkContacts", NetworkContact.class);
    public static final ListProperty<NetworkCountry> NETWORK_COUNTRIES = PropertyFactory.createList("networkCountries", NetworkCountry.class);
    public static final ListProperty<NetworkEndingCause> NETWORK_ENDING_CAUSES = PropertyFactory.createList("networkEndingCauses", NetworkEndingCause.class);
    public static final ListProperty<NetworkPtf> NETWORK_PTFS = PropertyFactory.createList("networkPtfs", NetworkPtf.class);
    public static final ListProperty<NetworkSite> NETWORK_SITES = PropertyFactory.createList("networkSites", NetworkSite.class);
    public static final EntityProperty<NetworkType> NETWORK_TYPE = PropertyFactory.createEntity("networkType", NetworkType.class);
    public static final ListProperty<Program> PROGRAMS = PropertyFactory.createList("programs", Program.class);
    public static final ListProperty<PtfModel> PTF_MODELS = PropertyFactory.createList("ptfModels", PtfModel.class);
    public static final ListProperty<SensorModelNetwork> SENSOR_MODEL_NETWORKS = PropertyFactory.createList("sensorModelNetworks", SensorModelNetwork.class);
    public static final ListProperty<Survey> SURVEYS = PropertyFactory.createList("surveys", Survey.class);
    public static final ListProperty<UserGroup> USER_GROUPS = PropertyFactory.createList("userGroups", UserGroup.class);
    public static final EntityProperty<WebMetricNetwork> WEB_METRIC_NETWORK = PropertyFactory.createEntity("webMetricNetwork", WebMetricNetwork.class);
    public static final ListProperty<Weblink> WEBLINKS = PropertyFactory.createList("weblinks", Weblink.class);

    protected String description;
    protected Integer id;
    protected String name;
    protected String nameShort;
    protected Integer parentNetworkId;
    protected Integer rank;
    protected String wigosCode;

    protected Object agencyDacTypes;
    protected Object countryCommitments;
    protected Object docs;
    protected Object images;
    protected Object mapTypeNetworks;
    protected Object networkContacts;
    protected Object networkCountries;
    protected Object networkEndingCauses;
    protected Object networkPtfs;
    protected Object networkSites;
    protected Object networkType;
    protected Object programs;
    protected Object ptfModels;
    protected Object sensorModelNetworks;
    protected Object surveys;
    protected Object userGroups;
    protected Object webMetricNetwork;
    protected Object weblinks;

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setId(Integer id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Integer getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setNameShort(String nameShort) {
        beforePropertyWrite("nameShort", this.nameShort, nameShort);
        this.nameShort = nameShort;
    }

    public String getNameShort() {
        beforePropertyRead("nameShort");
        return this.nameShort;
    }

    public void setParentNetworkId(Integer parentNetworkId) {
        beforePropertyWrite("parentNetworkId", this.parentNetworkId, parentNetworkId);
        this.parentNetworkId = parentNetworkId;
    }

    public Integer getParentNetworkId() {
        beforePropertyRead("parentNetworkId");
        return this.parentNetworkId;
    }

    public void setRank(Integer rank) {
        beforePropertyWrite("rank", this.rank, rank);
        this.rank = rank;
    }

    public Integer getRank() {
        beforePropertyRead("rank");
        return this.rank;
    }

    public void setWigosCode(String wigosCode) {
        beforePropertyWrite("wigosCode", this.wigosCode, wigosCode);
        this.wigosCode = wigosCode;
    }

    public String getWigosCode() {
        beforePropertyRead("wigosCode");
        return this.wigosCode;
    }

    public void addToAgencyDacTypes(AgencyDacType obj) {
        addToManyTarget("agencyDacTypes", obj, true);
    }

    public void removeFromAgencyDacTypes(AgencyDacType obj) {
        removeToManyTarget("agencyDacTypes", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<AgencyDacType> getAgencyDacTypes() {
        return (List<AgencyDacType>)readProperty("agencyDacTypes");
    }

    public void addToCountryCommitments(CountryCommitment obj) {
        addToManyTarget("countryCommitments", obj, true);
    }

    public void removeFromCountryCommitments(CountryCommitment obj) {
        removeToManyTarget("countryCommitments", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CountryCommitment> getCountryCommitments() {
        return (List<CountryCommitment>)readProperty("countryCommitments");
    }

    public void addToDocs(Doc obj) {
        addToManyTarget("docs", obj, true);
    }

    public void removeFromDocs(Doc obj) {
        removeToManyTarget("docs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Doc> getDocs() {
        return (List<Doc>)readProperty("docs");
    }

    public void addToImages(Image obj) {
        addToManyTarget("images", obj, true);
    }

    public void removeFromImages(Image obj) {
        removeToManyTarget("images", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Image> getImages() {
        return (List<Image>)readProperty("images");
    }

    public void addToMapTypeNetworks(MapTypeNetwork obj) {
        addToManyTarget("mapTypeNetworks", obj, true);
    }

    public void removeFromMapTypeNetworks(MapTypeNetwork obj) {
        removeToManyTarget("mapTypeNetworks", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<MapTypeNetwork> getMapTypeNetworks() {
        return (List<MapTypeNetwork>)readProperty("mapTypeNetworks");
    }

    public void addToNetworkContacts(NetworkContact obj) {
        addToManyTarget("networkContacts", obj, true);
    }

    public void removeFromNetworkContacts(NetworkContact obj) {
        removeToManyTarget("networkContacts", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<NetworkContact> getNetworkContacts() {
        return (List<NetworkContact>)readProperty("networkContacts");
    }

    public void addToNetworkCountries(NetworkCountry obj) {
        addToManyTarget("networkCountries", obj, true);
    }

    public void removeFromNetworkCountries(NetworkCountry obj) {
        removeToManyTarget("networkCountries", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<NetworkCountry> getNetworkCountries() {
        return (List<NetworkCountry>)readProperty("networkCountries");
    }

    public void addToNetworkEndingCauses(NetworkEndingCause obj) {
        addToManyTarget("networkEndingCauses", obj, true);
    }

    public void removeFromNetworkEndingCauses(NetworkEndingCause obj) {
        removeToManyTarget("networkEndingCauses", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<NetworkEndingCause> getNetworkEndingCauses() {
        return (List<NetworkEndingCause>)readProperty("networkEndingCauses");
    }

    public void addToNetworkPtfs(NetworkPtf obj) {
        addToManyTarget("networkPtfs", obj, true);
    }

    public void removeFromNetworkPtfs(NetworkPtf obj) {
        removeToManyTarget("networkPtfs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<NetworkPtf> getNetworkPtfs() {
        return (List<NetworkPtf>)readProperty("networkPtfs");
    }

    public void addToNetworkSites(NetworkSite obj) {
        addToManyTarget("networkSites", obj, true);
    }

    public void removeFromNetworkSites(NetworkSite obj) {
        removeToManyTarget("networkSites", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<NetworkSite> getNetworkSites() {
        return (List<NetworkSite>)readProperty("networkSites");
    }

    public void setNetworkType(NetworkType networkType) {
        setToOneTarget("networkType", networkType, true);
    }

    public NetworkType getNetworkType() {
        return (NetworkType)readProperty("networkType");
    }

    public void addToPrograms(Program obj) {
        addToManyTarget("programs", obj, true);
    }

    public void removeFromPrograms(Program obj) {
        removeToManyTarget("programs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Program> getPrograms() {
        return (List<Program>)readProperty("programs");
    }

    public void addToPtfModels(PtfModel obj) {
        addToManyTarget("ptfModels", obj, true);
    }

    public void removeFromPtfModels(PtfModel obj) {
        removeToManyTarget("ptfModels", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfModel> getPtfModels() {
        return (List<PtfModel>)readProperty("ptfModels");
    }

    public void addToSensorModelNetworks(SensorModelNetwork obj) {
        addToManyTarget("sensorModelNetworks", obj, true);
    }

    public void removeFromSensorModelNetworks(SensorModelNetwork obj) {
        removeToManyTarget("sensorModelNetworks", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<SensorModelNetwork> getSensorModelNetworks() {
        return (List<SensorModelNetwork>)readProperty("sensorModelNetworks");
    }

    public void addToSurveys(Survey obj) {
        addToManyTarget("surveys", obj, true);
    }

    public void removeFromSurveys(Survey obj) {
        removeToManyTarget("surveys", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Survey> getSurveys() {
        return (List<Survey>)readProperty("surveys");
    }

    public void addToUserGroups(UserGroup obj) {
        addToManyTarget("userGroups", obj, true);
    }

    public void removeFromUserGroups(UserGroup obj) {
        removeToManyTarget("userGroups", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<UserGroup> getUserGroups() {
        return (List<UserGroup>)readProperty("userGroups");
    }

    public void setWebMetricNetwork(WebMetricNetwork webMetricNetwork) {
        setToOneTarget("webMetricNetwork", webMetricNetwork, true);
    }

    public WebMetricNetwork getWebMetricNetwork() {
        return (WebMetricNetwork)readProperty("webMetricNetwork");
    }

    public void addToWeblinks(Weblink obj) {
        addToManyTarget("weblinks", obj, true);
    }

    public void removeFromWeblinks(Weblink obj) {
        removeToManyTarget("weblinks", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Weblink> getWeblinks() {
        return (List<Weblink>)readProperty("weblinks");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "description":
                return this.description;
            case "id":
                return this.id;
            case "name":
                return this.name;
            case "nameShort":
                return this.nameShort;
            case "parentNetworkId":
                return this.parentNetworkId;
            case "rank":
                return this.rank;
            case "wigosCode":
                return this.wigosCode;
            case "agencyDacTypes":
                return this.agencyDacTypes;
            case "countryCommitments":
                return this.countryCommitments;
            case "docs":
                return this.docs;
            case "images":
                return this.images;
            case "mapTypeNetworks":
                return this.mapTypeNetworks;
            case "networkContacts":
                return this.networkContacts;
            case "networkCountries":
                return this.networkCountries;
            case "networkEndingCauses":
                return this.networkEndingCauses;
            case "networkPtfs":
                return this.networkPtfs;
            case "networkSites":
                return this.networkSites;
            case "networkType":
                return this.networkType;
            case "programs":
                return this.programs;
            case "ptfModels":
                return this.ptfModels;
            case "sensorModelNetworks":
                return this.sensorModelNetworks;
            case "surveys":
                return this.surveys;
            case "userGroups":
                return this.userGroups;
            case "webMetricNetwork":
                return this.webMetricNetwork;
            case "weblinks":
                return this.weblinks;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "description":
                this.description = (String)val;
                break;
            case "id":
                this.id = (Integer)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "nameShort":
                this.nameShort = (String)val;
                break;
            case "parentNetworkId":
                this.parentNetworkId = (Integer)val;
                break;
            case "rank":
                this.rank = (Integer)val;
                break;
            case "wigosCode":
                this.wigosCode = (String)val;
                break;
            case "agencyDacTypes":
                this.agencyDacTypes = val;
                break;
            case "countryCommitments":
                this.countryCommitments = val;
                break;
            case "docs":
                this.docs = val;
                break;
            case "images":
                this.images = val;
                break;
            case "mapTypeNetworks":
                this.mapTypeNetworks = val;
                break;
            case "networkContacts":
                this.networkContacts = val;
                break;
            case "networkCountries":
                this.networkCountries = val;
                break;
            case "networkEndingCauses":
                this.networkEndingCauses = val;
                break;
            case "networkPtfs":
                this.networkPtfs = val;
                break;
            case "networkSites":
                this.networkSites = val;
                break;
            case "networkType":
                this.networkType = val;
                break;
            case "programs":
                this.programs = val;
                break;
            case "ptfModels":
                this.ptfModels = val;
                break;
            case "sensorModelNetworks":
                this.sensorModelNetworks = val;
                break;
            case "surveys":
                this.surveys = val;
                break;
            case "userGroups":
                this.userGroups = val;
                break;
            case "webMetricNetwork":
                this.webMetricNetwork = val;
                break;
            case "weblinks":
                this.weblinks = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.description);
        out.writeObject(this.id);
        out.writeObject(this.name);
        out.writeObject(this.nameShort);
        out.writeObject(this.parentNetworkId);
        out.writeObject(this.rank);
        out.writeObject(this.wigosCode);
        out.writeObject(this.agencyDacTypes);
        out.writeObject(this.countryCommitments);
        out.writeObject(this.docs);
        out.writeObject(this.images);
        out.writeObject(this.mapTypeNetworks);
        out.writeObject(this.networkContacts);
        out.writeObject(this.networkCountries);
        out.writeObject(this.networkEndingCauses);
        out.writeObject(this.networkPtfs);
        out.writeObject(this.networkSites);
        out.writeObject(this.networkType);
        out.writeObject(this.programs);
        out.writeObject(this.ptfModels);
        out.writeObject(this.sensorModelNetworks);
        out.writeObject(this.surveys);
        out.writeObject(this.userGroups);
        out.writeObject(this.webMetricNetwork);
        out.writeObject(this.weblinks);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.description = (String)in.readObject();
        this.id = (Integer)in.readObject();
        this.name = (String)in.readObject();
        this.nameShort = (String)in.readObject();
        this.parentNetworkId = (Integer)in.readObject();
        this.rank = (Integer)in.readObject();
        this.wigosCode = (String)in.readObject();
        this.agencyDacTypes = in.readObject();
        this.countryCommitments = in.readObject();
        this.docs = in.readObject();
        this.images = in.readObject();
        this.mapTypeNetworks = in.readObject();
        this.networkContacts = in.readObject();
        this.networkCountries = in.readObject();
        this.networkEndingCauses = in.readObject();
        this.networkPtfs = in.readObject();
        this.networkSites = in.readObject();
        this.networkType = in.readObject();
        this.programs = in.readObject();
        this.ptfModels = in.readObject();
        this.sensorModelNetworks = in.readObject();
        this.surveys = in.readObject();
        this.userGroups = in.readObject();
        this.webMetricNetwork = in.readObject();
        this.weblinks = in.readObject();
    }

}
