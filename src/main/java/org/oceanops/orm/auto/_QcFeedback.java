package org.oceanops.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.orm.Agency;
import org.oceanops.orm.Contact;
import org.oceanops.orm.GtsCccc;
import org.oceanops.orm.GtsHeader;
import org.oceanops.orm.Ptf;
import org.oceanops.orm.QcFeedbackAction;
import org.oceanops.orm.QcFeedbackErrorType;
import org.oceanops.orm.QcFeedbackObs;
import org.oceanops.orm.QcFeedbackType;
import org.oceanops.orm.QcFeedbackVariable;
import org.oceanops.orm.Topic;
import org.oceanops.orm.Variable;
import org.oceanops.orm.Weblink;

/**
 * Class _QcFeedback was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _QcFeedback extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> ANSWER = PropertyFactory.createString("answer", String.class);
    public static final StringProperty<String> CORRECTION_TYPE = PropertyFactory.createString("correctionType", String.class);
    public static final NumericProperty<Double> CORRECTION_VALUE = PropertyFactory.createNumeric("correctionValue", Double.class);
    public static final NumericProperty<Integer> DONE = PropertyFactory.createNumeric("done", Integer.class);
    public static final StringProperty<String> EMAIL = PropertyFactory.createString("email", String.class);
    public static final DateProperty<LocalDateTime> END_DATE = PropertyFactory.createDate("endDate", LocalDateTime.class);
    public static final NumericProperty<Integer> ID = PropertyFactory.createNumeric("id", Integer.class);
    public static final StringProperty<String> MESSAGE = PropertyFactory.createString("message", String.class);
    public static final StringProperty<String> ORIGIN = PropertyFactory.createString("origin", String.class);
    public static final StringProperty<String> RECIPIENTS = PropertyFactory.createString("recipients", String.class);
    public static final NumericProperty<Integer> SENT = PropertyFactory.createNumeric("sent", Integer.class);
    public static final DateProperty<LocalDateTime> START_DATE = PropertyFactory.createDate("startDate", LocalDateTime.class);
    public static final StringProperty<String> SUBJECT = PropertyFactory.createString("subject", String.class);
    public static final StringProperty<String> WMO = PropertyFactory.createString("wmo", String.class);
    public static final EntityProperty<Agency> AGENCY = PropertyFactory.createEntity("agency", Agency.class);
    public static final EntityProperty<Contact> ANSWER_CONTACT = PropertyFactory.createEntity("answerContact", Contact.class);
    public static final EntityProperty<Contact> CONTACT = PropertyFactory.createEntity("contact", Contact.class);
    public static final EntityProperty<GtsCccc> GTS_CCCC = PropertyFactory.createEntity("gtsCccc", GtsCccc.class);
    public static final EntityProperty<GtsHeader> GTS_HEADER = PropertyFactory.createEntity("gtsHeader", GtsHeader.class);
    public static final EntityProperty<Ptf> PTF = PropertyFactory.createEntity("ptf", Ptf.class);
    public static final EntityProperty<QcFeedbackAction> QC_FEEDBACK_ACTION = PropertyFactory.createEntity("qcFeedbackAction", QcFeedbackAction.class);
    public static final EntityProperty<QcFeedbackErrorType> QC_FEEDBACK_ERROR_TYPE = PropertyFactory.createEntity("qcFeedbackErrorType", QcFeedbackErrorType.class);
    public static final ListProperty<QcFeedbackObs> QC_FEEDBACK_OBSS = PropertyFactory.createList("qcFeedbackObss", QcFeedbackObs.class);
    public static final EntityProperty<QcFeedbackType> QC_FEEDBACK_TYPE = PropertyFactory.createEntity("qcFeedbackType", QcFeedbackType.class);
    public static final ListProperty<QcFeedbackVariable> QC_FEEDBACK_VARIABLES = PropertyFactory.createList("qcFeedbackVariables", QcFeedbackVariable.class);
    public static final EntityProperty<Topic> TOPIC = PropertyFactory.createEntity("topic", Topic.class);
    public static final EntityProperty<Variable> VARIABLE = PropertyFactory.createEntity("variable", Variable.class);
    public static final EntityProperty<Weblink> WEBLINK = PropertyFactory.createEntity("weblink", Weblink.class);

    protected String answer;
    protected String correctionType;
    protected Double correctionValue;
    protected Integer done;
    protected String email;
    protected LocalDateTime endDate;
    protected Integer id;
    protected String message;
    protected String origin;
    protected String recipients;
    protected Integer sent;
    protected LocalDateTime startDate;
    protected String subject;
    protected String wmo;

    protected Object agency;
    protected Object answerContact;
    protected Object contact;
    protected Object gtsCccc;
    protected Object gtsHeader;
    protected Object ptf;
    protected Object qcFeedbackAction;
    protected Object qcFeedbackErrorType;
    protected Object qcFeedbackObss;
    protected Object qcFeedbackType;
    protected Object qcFeedbackVariables;
    protected Object topic;
    protected Object variable;
    protected Object weblink;

    public void setAnswer(String answer) {
        beforePropertyWrite("answer", this.answer, answer);
        this.answer = answer;
    }

    public String getAnswer() {
        beforePropertyRead("answer");
        return this.answer;
    }

    public void setCorrectionType(String correctionType) {
        beforePropertyWrite("correctionType", this.correctionType, correctionType);
        this.correctionType = correctionType;
    }

    public String getCorrectionType() {
        beforePropertyRead("correctionType");
        return this.correctionType;
    }

    public void setCorrectionValue(Double correctionValue) {
        beforePropertyWrite("correctionValue", this.correctionValue, correctionValue);
        this.correctionValue = correctionValue;
    }

    public Double getCorrectionValue() {
        beforePropertyRead("correctionValue");
        return this.correctionValue;
    }

    public void setDone(Integer done) {
        beforePropertyWrite("done", this.done, done);
        this.done = done;
    }

    public Integer getDone() {
        beforePropertyRead("done");
        return this.done;
    }

    public void setEmail(String email) {
        beforePropertyWrite("email", this.email, email);
        this.email = email;
    }

    public String getEmail() {
        beforePropertyRead("email");
        return this.email;
    }

    public void setEndDate(LocalDateTime endDate) {
        beforePropertyWrite("endDate", this.endDate, endDate);
        this.endDate = endDate;
    }

    public LocalDateTime getEndDate() {
        beforePropertyRead("endDate");
        return this.endDate;
    }

    public void setId(Integer id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Integer getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setMessage(String message) {
        beforePropertyWrite("message", this.message, message);
        this.message = message;
    }

    public String getMessage() {
        beforePropertyRead("message");
        return this.message;
    }

    public void setOrigin(String origin) {
        beforePropertyWrite("origin", this.origin, origin);
        this.origin = origin;
    }

    public String getOrigin() {
        beforePropertyRead("origin");
        return this.origin;
    }

    public void setRecipients(String recipients) {
        beforePropertyWrite("recipients", this.recipients, recipients);
        this.recipients = recipients;
    }

    public String getRecipients() {
        beforePropertyRead("recipients");
        return this.recipients;
    }

    public void setSent(Integer sent) {
        beforePropertyWrite("sent", this.sent, sent);
        this.sent = sent;
    }

    public Integer getSent() {
        beforePropertyRead("sent");
        return this.sent;
    }

    public void setStartDate(LocalDateTime startDate) {
        beforePropertyWrite("startDate", this.startDate, startDate);
        this.startDate = startDate;
    }

    public LocalDateTime getStartDate() {
        beforePropertyRead("startDate");
        return this.startDate;
    }

    public void setSubject(String subject) {
        beforePropertyWrite("subject", this.subject, subject);
        this.subject = subject;
    }

    public String getSubject() {
        beforePropertyRead("subject");
        return this.subject;
    }

    public void setWmo(String wmo) {
        beforePropertyWrite("wmo", this.wmo, wmo);
        this.wmo = wmo;
    }

    public String getWmo() {
        beforePropertyRead("wmo");
        return this.wmo;
    }

    public void setAgency(Agency agency) {
        setToOneTarget("agency", agency, true);
    }

    public Agency getAgency() {
        return (Agency)readProperty("agency");
    }

    public void setAnswerContact(Contact answerContact) {
        setToOneTarget("answerContact", answerContact, true);
    }

    public Contact getAnswerContact() {
        return (Contact)readProperty("answerContact");
    }

    public void setContact(Contact contact) {
        setToOneTarget("contact", contact, true);
    }

    public Contact getContact() {
        return (Contact)readProperty("contact");
    }

    public void setGtsCccc(GtsCccc gtsCccc) {
        setToOneTarget("gtsCccc", gtsCccc, true);
    }

    public GtsCccc getGtsCccc() {
        return (GtsCccc)readProperty("gtsCccc");
    }

    public void setGtsHeader(GtsHeader gtsHeader) {
        setToOneTarget("gtsHeader", gtsHeader, true);
    }

    public GtsHeader getGtsHeader() {
        return (GtsHeader)readProperty("gtsHeader");
    }

    public void setPtf(Ptf ptf) {
        setToOneTarget("ptf", ptf, true);
    }

    public Ptf getPtf() {
        return (Ptf)readProperty("ptf");
    }

    public void setQcFeedbackAction(QcFeedbackAction qcFeedbackAction) {
        setToOneTarget("qcFeedbackAction", qcFeedbackAction, true);
    }

    public QcFeedbackAction getQcFeedbackAction() {
        return (QcFeedbackAction)readProperty("qcFeedbackAction");
    }

    public void setQcFeedbackErrorType(QcFeedbackErrorType qcFeedbackErrorType) {
        setToOneTarget("qcFeedbackErrorType", qcFeedbackErrorType, true);
    }

    public QcFeedbackErrorType getQcFeedbackErrorType() {
        return (QcFeedbackErrorType)readProperty("qcFeedbackErrorType");
    }

    public void addToQcFeedbackObss(QcFeedbackObs obj) {
        addToManyTarget("qcFeedbackObss", obj, true);
    }

    public void removeFromQcFeedbackObss(QcFeedbackObs obj) {
        removeToManyTarget("qcFeedbackObss", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<QcFeedbackObs> getQcFeedbackObss() {
        return (List<QcFeedbackObs>)readProperty("qcFeedbackObss");
    }

    public void setQcFeedbackType(QcFeedbackType qcFeedbackType) {
        setToOneTarget("qcFeedbackType", qcFeedbackType, true);
    }

    public QcFeedbackType getQcFeedbackType() {
        return (QcFeedbackType)readProperty("qcFeedbackType");
    }

    public void addToQcFeedbackVariables(QcFeedbackVariable obj) {
        addToManyTarget("qcFeedbackVariables", obj, true);
    }

    public void removeFromQcFeedbackVariables(QcFeedbackVariable obj) {
        removeToManyTarget("qcFeedbackVariables", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<QcFeedbackVariable> getQcFeedbackVariables() {
        return (List<QcFeedbackVariable>)readProperty("qcFeedbackVariables");
    }

    public void setTopic(Topic topic) {
        setToOneTarget("topic", topic, true);
    }

    public Topic getTopic() {
        return (Topic)readProperty("topic");
    }

    public void setVariable(Variable variable) {
        setToOneTarget("variable", variable, true);
    }

    public Variable getVariable() {
        return (Variable)readProperty("variable");
    }

    public void setWeblink(Weblink weblink) {
        setToOneTarget("weblink", weblink, true);
    }

    public Weblink getWeblink() {
        return (Weblink)readProperty("weblink");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "answer":
                return this.answer;
            case "correctionType":
                return this.correctionType;
            case "correctionValue":
                return this.correctionValue;
            case "done":
                return this.done;
            case "email":
                return this.email;
            case "endDate":
                return this.endDate;
            case "id":
                return this.id;
            case "message":
                return this.message;
            case "origin":
                return this.origin;
            case "recipients":
                return this.recipients;
            case "sent":
                return this.sent;
            case "startDate":
                return this.startDate;
            case "subject":
                return this.subject;
            case "wmo":
                return this.wmo;
            case "agency":
                return this.agency;
            case "answerContact":
                return this.answerContact;
            case "contact":
                return this.contact;
            case "gtsCccc":
                return this.gtsCccc;
            case "gtsHeader":
                return this.gtsHeader;
            case "ptf":
                return this.ptf;
            case "qcFeedbackAction":
                return this.qcFeedbackAction;
            case "qcFeedbackErrorType":
                return this.qcFeedbackErrorType;
            case "qcFeedbackObss":
                return this.qcFeedbackObss;
            case "qcFeedbackType":
                return this.qcFeedbackType;
            case "qcFeedbackVariables":
                return this.qcFeedbackVariables;
            case "topic":
                return this.topic;
            case "variable":
                return this.variable;
            case "weblink":
                return this.weblink;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "answer":
                this.answer = (String)val;
                break;
            case "correctionType":
                this.correctionType = (String)val;
                break;
            case "correctionValue":
                this.correctionValue = (Double)val;
                break;
            case "done":
                this.done = (Integer)val;
                break;
            case "email":
                this.email = (String)val;
                break;
            case "endDate":
                this.endDate = (LocalDateTime)val;
                break;
            case "id":
                this.id = (Integer)val;
                break;
            case "message":
                this.message = (String)val;
                break;
            case "origin":
                this.origin = (String)val;
                break;
            case "recipients":
                this.recipients = (String)val;
                break;
            case "sent":
                this.sent = (Integer)val;
                break;
            case "startDate":
                this.startDate = (LocalDateTime)val;
                break;
            case "subject":
                this.subject = (String)val;
                break;
            case "wmo":
                this.wmo = (String)val;
                break;
            case "agency":
                this.agency = val;
                break;
            case "answerContact":
                this.answerContact = val;
                break;
            case "contact":
                this.contact = val;
                break;
            case "gtsCccc":
                this.gtsCccc = val;
                break;
            case "gtsHeader":
                this.gtsHeader = val;
                break;
            case "ptf":
                this.ptf = val;
                break;
            case "qcFeedbackAction":
                this.qcFeedbackAction = val;
                break;
            case "qcFeedbackErrorType":
                this.qcFeedbackErrorType = val;
                break;
            case "qcFeedbackObss":
                this.qcFeedbackObss = val;
                break;
            case "qcFeedbackType":
                this.qcFeedbackType = val;
                break;
            case "qcFeedbackVariables":
                this.qcFeedbackVariables = val;
                break;
            case "topic":
                this.topic = val;
                break;
            case "variable":
                this.variable = val;
                break;
            case "weblink":
                this.weblink = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.answer);
        out.writeObject(this.correctionType);
        out.writeObject(this.correctionValue);
        out.writeObject(this.done);
        out.writeObject(this.email);
        out.writeObject(this.endDate);
        out.writeObject(this.id);
        out.writeObject(this.message);
        out.writeObject(this.origin);
        out.writeObject(this.recipients);
        out.writeObject(this.sent);
        out.writeObject(this.startDate);
        out.writeObject(this.subject);
        out.writeObject(this.wmo);
        out.writeObject(this.agency);
        out.writeObject(this.answerContact);
        out.writeObject(this.contact);
        out.writeObject(this.gtsCccc);
        out.writeObject(this.gtsHeader);
        out.writeObject(this.ptf);
        out.writeObject(this.qcFeedbackAction);
        out.writeObject(this.qcFeedbackErrorType);
        out.writeObject(this.qcFeedbackObss);
        out.writeObject(this.qcFeedbackType);
        out.writeObject(this.qcFeedbackVariables);
        out.writeObject(this.topic);
        out.writeObject(this.variable);
        out.writeObject(this.weblink);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.answer = (String)in.readObject();
        this.correctionType = (String)in.readObject();
        this.correctionValue = (Double)in.readObject();
        this.done = (Integer)in.readObject();
        this.email = (String)in.readObject();
        this.endDate = (LocalDateTime)in.readObject();
        this.id = (Integer)in.readObject();
        this.message = (String)in.readObject();
        this.origin = (String)in.readObject();
        this.recipients = (String)in.readObject();
        this.sent = (Integer)in.readObject();
        this.startDate = (LocalDateTime)in.readObject();
        this.subject = (String)in.readObject();
        this.wmo = (String)in.readObject();
        this.agency = in.readObject();
        this.answerContact = in.readObject();
        this.contact = in.readObject();
        this.gtsCccc = in.readObject();
        this.gtsHeader = in.readObject();
        this.ptf = in.readObject();
        this.qcFeedbackAction = in.readObject();
        this.qcFeedbackErrorType = in.readObject();
        this.qcFeedbackObss = in.readObject();
        this.qcFeedbackType = in.readObject();
        this.qcFeedbackVariables = in.readObject();
        this.topic = in.readObject();
        this.variable = in.readObject();
        this.weblink = in.readObject();
    }

}
