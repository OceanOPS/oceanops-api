package org.oceanops.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.orm.AgencyDacType;
import org.oceanops.orm.AgencyPtf;
import org.oceanops.orm.AgencySiteRole;
import org.oceanops.orm.Contact;
import org.oceanops.orm.Country;
import org.oceanops.orm.Cruise;
import org.oceanops.orm.GtsCccc;
import org.oceanops.orm.Image;
import org.oceanops.orm.ProgramAgency;
import org.oceanops.orm.PtfFirmware;
import org.oceanops.orm.PtfHullType;
import org.oceanops.orm.PtfModel;
import org.oceanops.orm.QcFeedback;
import org.oceanops.orm.SensorModel;
import org.oceanops.orm.Service;
import org.oceanops.orm.UserGroupAgency;
import org.oceanops.orm.Weblink;

/**
 * Class _Agency was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Agency extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> ADDRESS = PropertyFactory.createString("address", String.class);
    public static final NumericProperty<Integer> DEPLOYER = PropertyFactory.createNumeric("deployer", Integer.class);
    public static final StringProperty<String> DESCRIPTION = PropertyFactory.createString("description", String.class);
    public static final StringProperty<String> EMAIL = PropertyFactory.createString("email", String.class);
    public static final StringProperty<String> FAX = PropertyFactory.createString("fax", String.class);
    public static final NumericProperty<Integer> ID = PropertyFactory.createNumeric("id", Integer.class);
    public static final NumericProperty<Double> LAT = PropertyFactory.createNumeric("lat", Double.class);
    public static final NumericProperty<Double> LON = PropertyFactory.createNumeric("lon", Double.class);
    public static final NumericProperty<Integer> MANUF = PropertyFactory.createNumeric("manuf", Integer.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final StringProperty<String> NAME_SHORT = PropertyFactory.createString("nameShort", String.class);
    public static final NumericProperty<Integer> POGO_MEMBER = PropertyFactory.createNumeric("pogoMember", Integer.class);
    public static final NumericProperty<Integer> PURCHASER = PropertyFactory.createNumeric("purchaser", Integer.class);
    public static final StringProperty<String> REF = PropertyFactory.createString("ref", String.class);
    public static final StringProperty<String> TEL = PropertyFactory.createString("tel", String.class);
    public static final ListProperty<AgencyDacType> AGENCY_DAC_TYPES = PropertyFactory.createList("agencyDacTypes", AgencyDacType.class);
    public static final ListProperty<AgencyPtf> AGENCY_PTFS = PropertyFactory.createList("agencyPtfs", AgencyPtf.class);
    public static final ListProperty<AgencySiteRole> AGENCY_SITE_ROLES = PropertyFactory.createList("agencySiteRoles", AgencySiteRole.class);
    public static final ListProperty<Contact> CONTACTS = PropertyFactory.createList("contacts", Contact.class);
    public static final EntityProperty<Country> COUNTRY = PropertyFactory.createEntity("country", Country.class);
    public static final ListProperty<Cruise> CRUISES = PropertyFactory.createList("cruises", Cruise.class);
    public static final ListProperty<GtsCccc> GTS_CCCCS = PropertyFactory.createList("gtsCcccs", GtsCccc.class);
    public static final EntityProperty<Image> IMAGE = PropertyFactory.createEntity("image", Image.class);
    public static final ListProperty<Image> IMAGES = PropertyFactory.createList("images", Image.class);
    public static final ListProperty<ProgramAgency> PROGRAM_AGENCIES = PropertyFactory.createList("programAgencies", ProgramAgency.class);
    public static final ListProperty<PtfFirmware> PTF_FIRMWARES = PropertyFactory.createList("ptfFirmwares", PtfFirmware.class);
    public static final ListProperty<PtfHullType> PTF_HULL_TYPES = PropertyFactory.createList("ptfHullTypes", PtfHullType.class);
    public static final ListProperty<PtfModel> PTF_MODELS = PropertyFactory.createList("ptfModels", PtfModel.class);
    public static final ListProperty<QcFeedback> QC_FEEDBACKS = PropertyFactory.createList("qcFeedbacks", QcFeedback.class);
    public static final ListProperty<SensorModel> SENSOR_MODELS = PropertyFactory.createList("sensorModels", SensorModel.class);
    public static final ListProperty<Service> SERVICES = PropertyFactory.createList("services", Service.class);
    public static final ListProperty<UserGroupAgency> USER_GROUP_AGENCIES = PropertyFactory.createList("userGroupAgencies", UserGroupAgency.class);
    public static final EntityProperty<Weblink> WEBLINK = PropertyFactory.createEntity("weblink", Weblink.class);

    protected String address;
    protected Integer deployer;
    protected String description;
    protected String email;
    protected String fax;
    protected Integer id;
    protected Double lat;
    protected Double lon;
    protected Integer manuf;
    protected String name;
    protected String nameShort;
    protected Integer pogoMember;
    protected Integer purchaser;
    protected String ref;
    protected String tel;

    protected Object agencyDacTypes;
    protected Object agencyPtfs;
    protected Object agencySiteRoles;
    protected Object contacts;
    protected Object country;
    protected Object cruises;
    protected Object gtsCcccs;
    protected Object image;
    protected Object images;
    protected Object programAgencies;
    protected Object ptfFirmwares;
    protected Object ptfHullTypes;
    protected Object ptfModels;
    protected Object qcFeedbacks;
    protected Object sensorModels;
    protected Object services;
    protected Object userGroupAgencies;
    protected Object weblink;

    public void setAddress(String address) {
        beforePropertyWrite("address", this.address, address);
        this.address = address;
    }

    public String getAddress() {
        beforePropertyRead("address");
        return this.address;
    }

    public void setDeployer(Integer deployer) {
        beforePropertyWrite("deployer", this.deployer, deployer);
        this.deployer = deployer;
    }

    public Integer getDeployer() {
        beforePropertyRead("deployer");
        return this.deployer;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setEmail(String email) {
        beforePropertyWrite("email", this.email, email);
        this.email = email;
    }

    public String getEmail() {
        beforePropertyRead("email");
        return this.email;
    }

    public void setFax(String fax) {
        beforePropertyWrite("fax", this.fax, fax);
        this.fax = fax;
    }

    public String getFax() {
        beforePropertyRead("fax");
        return this.fax;
    }

    public void setId(Integer id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Integer getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setLat(Double lat) {
        beforePropertyWrite("lat", this.lat, lat);
        this.lat = lat;
    }

    public Double getLat() {
        beforePropertyRead("lat");
        return this.lat;
    }

    public void setLon(Double lon) {
        beforePropertyWrite("lon", this.lon, lon);
        this.lon = lon;
    }

    public Double getLon() {
        beforePropertyRead("lon");
        return this.lon;
    }

    public void setManuf(Integer manuf) {
        beforePropertyWrite("manuf", this.manuf, manuf);
        this.manuf = manuf;
    }

    public Integer getManuf() {
        beforePropertyRead("manuf");
        return this.manuf;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setNameShort(String nameShort) {
        beforePropertyWrite("nameShort", this.nameShort, nameShort);
        this.nameShort = nameShort;
    }

    public String getNameShort() {
        beforePropertyRead("nameShort");
        return this.nameShort;
    }

    public void setPogoMember(Integer pogoMember) {
        beforePropertyWrite("pogoMember", this.pogoMember, pogoMember);
        this.pogoMember = pogoMember;
    }

    public Integer getPogoMember() {
        beforePropertyRead("pogoMember");
        return this.pogoMember;
    }

    public void setPurchaser(Integer purchaser) {
        beforePropertyWrite("purchaser", this.purchaser, purchaser);
        this.purchaser = purchaser;
    }

    public Integer getPurchaser() {
        beforePropertyRead("purchaser");
        return this.purchaser;
    }

    public void setRef(String ref) {
        beforePropertyWrite("ref", this.ref, ref);
        this.ref = ref;
    }

    public String getRef() {
        beforePropertyRead("ref");
        return this.ref;
    }

    public void setTel(String tel) {
        beforePropertyWrite("tel", this.tel, tel);
        this.tel = tel;
    }

    public String getTel() {
        beforePropertyRead("tel");
        return this.tel;
    }

    public void addToAgencyDacTypes(AgencyDacType obj) {
        addToManyTarget("agencyDacTypes", obj, true);
    }

    public void removeFromAgencyDacTypes(AgencyDacType obj) {
        removeToManyTarget("agencyDacTypes", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<AgencyDacType> getAgencyDacTypes() {
        return (List<AgencyDacType>)readProperty("agencyDacTypes");
    }

    public void addToAgencyPtfs(AgencyPtf obj) {
        addToManyTarget("agencyPtfs", obj, true);
    }

    public void removeFromAgencyPtfs(AgencyPtf obj) {
        removeToManyTarget("agencyPtfs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<AgencyPtf> getAgencyPtfs() {
        return (List<AgencyPtf>)readProperty("agencyPtfs");
    }

    public void addToAgencySiteRoles(AgencySiteRole obj) {
        addToManyTarget("agencySiteRoles", obj, true);
    }

    public void removeFromAgencySiteRoles(AgencySiteRole obj) {
        removeToManyTarget("agencySiteRoles", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<AgencySiteRole> getAgencySiteRoles() {
        return (List<AgencySiteRole>)readProperty("agencySiteRoles");
    }

    public void addToContacts(Contact obj) {
        addToManyTarget("contacts", obj, true);
    }

    public void removeFromContacts(Contact obj) {
        removeToManyTarget("contacts", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Contact> getContacts() {
        return (List<Contact>)readProperty("contacts");
    }

    public void setCountry(Country country) {
        setToOneTarget("country", country, true);
    }

    public Country getCountry() {
        return (Country)readProperty("country");
    }

    public void addToCruises(Cruise obj) {
        addToManyTarget("cruises", obj, true);
    }

    public void removeFromCruises(Cruise obj) {
        removeToManyTarget("cruises", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Cruise> getCruises() {
        return (List<Cruise>)readProperty("cruises");
    }

    public void addToGtsCcccs(GtsCccc obj) {
        addToManyTarget("gtsCcccs", obj, true);
    }

    public void removeFromGtsCcccs(GtsCccc obj) {
        removeToManyTarget("gtsCcccs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<GtsCccc> getGtsCcccs() {
        return (List<GtsCccc>)readProperty("gtsCcccs");
    }

    public void setImage(Image image) {
        setToOneTarget("image", image, true);
    }

    public Image getImage() {
        return (Image)readProperty("image");
    }

    public void addToImages(Image obj) {
        addToManyTarget("images", obj, true);
    }

    public void removeFromImages(Image obj) {
        removeToManyTarget("images", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Image> getImages() {
        return (List<Image>)readProperty("images");
    }

    public void addToProgramAgencies(ProgramAgency obj) {
        addToManyTarget("programAgencies", obj, true);
    }

    public void removeFromProgramAgencies(ProgramAgency obj) {
        removeToManyTarget("programAgencies", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ProgramAgency> getProgramAgencies() {
        return (List<ProgramAgency>)readProperty("programAgencies");
    }

    public void addToPtfFirmwares(PtfFirmware obj) {
        addToManyTarget("ptfFirmwares", obj, true);
    }

    public void removeFromPtfFirmwares(PtfFirmware obj) {
        removeToManyTarget("ptfFirmwares", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfFirmware> getPtfFirmwares() {
        return (List<PtfFirmware>)readProperty("ptfFirmwares");
    }

    public void addToPtfHullTypes(PtfHullType obj) {
        addToManyTarget("ptfHullTypes", obj, true);
    }

    public void removeFromPtfHullTypes(PtfHullType obj) {
        removeToManyTarget("ptfHullTypes", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfHullType> getPtfHullTypes() {
        return (List<PtfHullType>)readProperty("ptfHullTypes");
    }

    public void addToPtfModels(PtfModel obj) {
        addToManyTarget("ptfModels", obj, true);
    }

    public void removeFromPtfModels(PtfModel obj) {
        removeToManyTarget("ptfModels", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfModel> getPtfModels() {
        return (List<PtfModel>)readProperty("ptfModels");
    }

    public void addToQcFeedbacks(QcFeedback obj) {
        addToManyTarget("qcFeedbacks", obj, true);
    }

    public void removeFromQcFeedbacks(QcFeedback obj) {
        removeToManyTarget("qcFeedbacks", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<QcFeedback> getQcFeedbacks() {
        return (List<QcFeedback>)readProperty("qcFeedbacks");
    }

    public void addToSensorModels(SensorModel obj) {
        addToManyTarget("sensorModels", obj, true);
    }

    public void removeFromSensorModels(SensorModel obj) {
        removeToManyTarget("sensorModels", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<SensorModel> getSensorModels() {
        return (List<SensorModel>)readProperty("sensorModels");
    }

    public void addToServices(Service obj) {
        addToManyTarget("services", obj, true);
    }

    public void removeFromServices(Service obj) {
        removeToManyTarget("services", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Service> getServices() {
        return (List<Service>)readProperty("services");
    }

    public void addToUserGroupAgencies(UserGroupAgency obj) {
        addToManyTarget("userGroupAgencies", obj, true);
    }

    public void removeFromUserGroupAgencies(UserGroupAgency obj) {
        removeToManyTarget("userGroupAgencies", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<UserGroupAgency> getUserGroupAgencies() {
        return (List<UserGroupAgency>)readProperty("userGroupAgencies");
    }

    public void setWeblink(Weblink weblink) {
        setToOneTarget("weblink", weblink, true);
    }

    public Weblink getWeblink() {
        return (Weblink)readProperty("weblink");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "address":
                return this.address;
            case "deployer":
                return this.deployer;
            case "description":
                return this.description;
            case "email":
                return this.email;
            case "fax":
                return this.fax;
            case "id":
                return this.id;
            case "lat":
                return this.lat;
            case "lon":
                return this.lon;
            case "manuf":
                return this.manuf;
            case "name":
                return this.name;
            case "nameShort":
                return this.nameShort;
            case "pogoMember":
                return this.pogoMember;
            case "purchaser":
                return this.purchaser;
            case "ref":
                return this.ref;
            case "tel":
                return this.tel;
            case "agencyDacTypes":
                return this.agencyDacTypes;
            case "agencyPtfs":
                return this.agencyPtfs;
            case "agencySiteRoles":
                return this.agencySiteRoles;
            case "contacts":
                return this.contacts;
            case "country":
                return this.country;
            case "cruises":
                return this.cruises;
            case "gtsCcccs":
                return this.gtsCcccs;
            case "image":
                return this.image;
            case "images":
                return this.images;
            case "programAgencies":
                return this.programAgencies;
            case "ptfFirmwares":
                return this.ptfFirmwares;
            case "ptfHullTypes":
                return this.ptfHullTypes;
            case "ptfModels":
                return this.ptfModels;
            case "qcFeedbacks":
                return this.qcFeedbacks;
            case "sensorModels":
                return this.sensorModels;
            case "services":
                return this.services;
            case "userGroupAgencies":
                return this.userGroupAgencies;
            case "weblink":
                return this.weblink;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "address":
                this.address = (String)val;
                break;
            case "deployer":
                this.deployer = (Integer)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "email":
                this.email = (String)val;
                break;
            case "fax":
                this.fax = (String)val;
                break;
            case "id":
                this.id = (Integer)val;
                break;
            case "lat":
                this.lat = (Double)val;
                break;
            case "lon":
                this.lon = (Double)val;
                break;
            case "manuf":
                this.manuf = (Integer)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "nameShort":
                this.nameShort = (String)val;
                break;
            case "pogoMember":
                this.pogoMember = (Integer)val;
                break;
            case "purchaser":
                this.purchaser = (Integer)val;
                break;
            case "ref":
                this.ref = (String)val;
                break;
            case "tel":
                this.tel = (String)val;
                break;
            case "agencyDacTypes":
                this.agencyDacTypes = val;
                break;
            case "agencyPtfs":
                this.agencyPtfs = val;
                break;
            case "agencySiteRoles":
                this.agencySiteRoles = val;
                break;
            case "contacts":
                this.contacts = val;
                break;
            case "country":
                this.country = val;
                break;
            case "cruises":
                this.cruises = val;
                break;
            case "gtsCcccs":
                this.gtsCcccs = val;
                break;
            case "image":
                this.image = val;
                break;
            case "images":
                this.images = val;
                break;
            case "programAgencies":
                this.programAgencies = val;
                break;
            case "ptfFirmwares":
                this.ptfFirmwares = val;
                break;
            case "ptfHullTypes":
                this.ptfHullTypes = val;
                break;
            case "ptfModels":
                this.ptfModels = val;
                break;
            case "qcFeedbacks":
                this.qcFeedbacks = val;
                break;
            case "sensorModels":
                this.sensorModels = val;
                break;
            case "services":
                this.services = val;
                break;
            case "userGroupAgencies":
                this.userGroupAgencies = val;
                break;
            case "weblink":
                this.weblink = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.address);
        out.writeObject(this.deployer);
        out.writeObject(this.description);
        out.writeObject(this.email);
        out.writeObject(this.fax);
        out.writeObject(this.id);
        out.writeObject(this.lat);
        out.writeObject(this.lon);
        out.writeObject(this.manuf);
        out.writeObject(this.name);
        out.writeObject(this.nameShort);
        out.writeObject(this.pogoMember);
        out.writeObject(this.purchaser);
        out.writeObject(this.ref);
        out.writeObject(this.tel);
        out.writeObject(this.agencyDacTypes);
        out.writeObject(this.agencyPtfs);
        out.writeObject(this.agencySiteRoles);
        out.writeObject(this.contacts);
        out.writeObject(this.country);
        out.writeObject(this.cruises);
        out.writeObject(this.gtsCcccs);
        out.writeObject(this.image);
        out.writeObject(this.images);
        out.writeObject(this.programAgencies);
        out.writeObject(this.ptfFirmwares);
        out.writeObject(this.ptfHullTypes);
        out.writeObject(this.ptfModels);
        out.writeObject(this.qcFeedbacks);
        out.writeObject(this.sensorModels);
        out.writeObject(this.services);
        out.writeObject(this.userGroupAgencies);
        out.writeObject(this.weblink);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.address = (String)in.readObject();
        this.deployer = (Integer)in.readObject();
        this.description = (String)in.readObject();
        this.email = (String)in.readObject();
        this.fax = (String)in.readObject();
        this.id = (Integer)in.readObject();
        this.lat = (Double)in.readObject();
        this.lon = (Double)in.readObject();
        this.manuf = (Integer)in.readObject();
        this.name = (String)in.readObject();
        this.nameShort = (String)in.readObject();
        this.pogoMember = (Integer)in.readObject();
        this.purchaser = (Integer)in.readObject();
        this.ref = (String)in.readObject();
        this.tel = (String)in.readObject();
        this.agencyDacTypes = in.readObject();
        this.agencyPtfs = in.readObject();
        this.agencySiteRoles = in.readObject();
        this.contacts = in.readObject();
        this.country = in.readObject();
        this.cruises = in.readObject();
        this.gtsCcccs = in.readObject();
        this.image = in.readObject();
        this.images = in.readObject();
        this.programAgencies = in.readObject();
        this.ptfFirmwares = in.readObject();
        this.ptfHullTypes = in.readObject();
        this.ptfModels = in.readObject();
        this.qcFeedbacks = in.readObject();
        this.sensorModels = in.readObject();
        this.services = in.readObject();
        this.userGroupAgencies = in.readObject();
        this.weblink = in.readObject();
    }

}
