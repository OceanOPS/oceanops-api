package org.oceanops.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.orm.Basin;
import org.oceanops.orm.Country;
import org.oceanops.orm.Network;

/**
 * Class _CountryCommitment was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _CountryCommitment extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> DESCRIPTION = PropertyFactory.createString("description", String.class);
    public static final NumericProperty<Integer> ID = PropertyFactory.createNumeric("id", Integer.class);
    public static final NumericProperty<Integer> NB_FUNDED = PropertyFactory.createNumeric("nbFunded", Integer.class);
    public static final NumericProperty<Integer> YEAR = PropertyFactory.createNumeric("year", Integer.class);
    public static final EntityProperty<Basin> BASIN = PropertyFactory.createEntity("basin", Basin.class);
    public static final EntityProperty<Country> COUNTRY = PropertyFactory.createEntity("country", Country.class);
    public static final EntityProperty<Network> NETWORK = PropertyFactory.createEntity("network", Network.class);

    protected String description;
    protected Integer id;
    protected Integer nbFunded;
    protected Integer year;

    protected Object basin;
    protected Object country;
    protected Object network;

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setId(Integer id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Integer getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setNbFunded(Integer nbFunded) {
        beforePropertyWrite("nbFunded", this.nbFunded, nbFunded);
        this.nbFunded = nbFunded;
    }

    public Integer getNbFunded() {
        beforePropertyRead("nbFunded");
        return this.nbFunded;
    }

    public void setYear(Integer year) {
        beforePropertyWrite("year", this.year, year);
        this.year = year;
    }

    public Integer getYear() {
        beforePropertyRead("year");
        return this.year;
    }

    public void setBasin(Basin basin) {
        setToOneTarget("basin", basin, true);
    }

    public Basin getBasin() {
        return (Basin)readProperty("basin");
    }

    public void setCountry(Country country) {
        setToOneTarget("country", country, true);
    }

    public Country getCountry() {
        return (Country)readProperty("country");
    }

    public void setNetwork(Network network) {
        setToOneTarget("network", network, true);
    }

    public Network getNetwork() {
        return (Network)readProperty("network");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "description":
                return this.description;
            case "id":
                return this.id;
            case "nbFunded":
                return this.nbFunded;
            case "year":
                return this.year;
            case "basin":
                return this.basin;
            case "country":
                return this.country;
            case "network":
                return this.network;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "description":
                this.description = (String)val;
                break;
            case "id":
                this.id = (Integer)val;
                break;
            case "nbFunded":
                this.nbFunded = (Integer)val;
                break;
            case "year":
                this.year = (Integer)val;
                break;
            case "basin":
                this.basin = val;
                break;
            case "country":
                this.country = val;
                break;
            case "network":
                this.network = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.description);
        out.writeObject(this.id);
        out.writeObject(this.nbFunded);
        out.writeObject(this.year);
        out.writeObject(this.basin);
        out.writeObject(this.country);
        out.writeObject(this.network);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.description = (String)in.readObject();
        this.id = (Integer)in.readObject();
        this.nbFunded = (Integer)in.readObject();
        this.year = (Integer)in.readObject();
        this.basin = in.readObject();
        this.country = in.readObject();
        this.network = in.readObject();
    }

}
