package org.oceanops.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.oceanops.orm.Line;
import org.oceanops.orm.LinePerformance;
import org.oceanops.orm.LineStatus;
import org.oceanops.orm.LineType;
import org.oceanops.orm.Survey;

/**
 * Class _LineSurvey was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _LineSurvey extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String LINE_ID_PK_COLUMN = "LINE_ID";
    public static final String SURVEY_ID_PK_COLUMN = "SURVEY_ID";

    public static final NumericProperty<Integer> LINE_ID = PropertyFactory.createNumeric("lineId", Integer.class);
    public static final NumericProperty<Integer> SURVEY_ID = PropertyFactory.createNumeric("surveyId", Integer.class);
    public static final EntityProperty<Line> LINE = PropertyFactory.createEntity("line", Line.class);
    public static final EntityProperty<LinePerformance> LINE_PERFORMANCE = PropertyFactory.createEntity("linePerformance", LinePerformance.class);
    public static final EntityProperty<LineStatus> LINE_STATUS = PropertyFactory.createEntity("lineStatus", LineStatus.class);
    public static final EntityProperty<LineType> LINE_TYPE = PropertyFactory.createEntity("lineType", LineType.class);
    public static final EntityProperty<Survey> SURVEY = PropertyFactory.createEntity("survey", Survey.class);

    protected Integer lineId;
    protected Integer surveyId;

    protected Object line;
    protected Object linePerformance;
    protected Object lineStatus;
    protected Object lineType;
    protected Object survey;

    public void setLineId(Integer lineId) {
        beforePropertyWrite("lineId", this.lineId, lineId);
        this.lineId = lineId;
    }

    public Integer getLineId() {
        beforePropertyRead("lineId");
        return this.lineId;
    }

    public void setSurveyId(Integer surveyId) {
        beforePropertyWrite("surveyId", this.surveyId, surveyId);
        this.surveyId = surveyId;
    }

    public Integer getSurveyId() {
        beforePropertyRead("surveyId");
        return this.surveyId;
    }

    public void setLine(Line line) {
        setToOneTarget("line", line, true);
    }

    public Line getLine() {
        return (Line)readProperty("line");
    }

    public void setLinePerformance(LinePerformance linePerformance) {
        setToOneTarget("linePerformance", linePerformance, true);
    }

    public LinePerformance getLinePerformance() {
        return (LinePerformance)readProperty("linePerformance");
    }

    public void setLineStatus(LineStatus lineStatus) {
        setToOneTarget("lineStatus", lineStatus, true);
    }

    public LineStatus getLineStatus() {
        return (LineStatus)readProperty("lineStatus");
    }

    public void setLineType(LineType lineType) {
        setToOneTarget("lineType", lineType, true);
    }

    public LineType getLineType() {
        return (LineType)readProperty("lineType");
    }

    public void setSurvey(Survey survey) {
        setToOneTarget("survey", survey, true);
    }

    public Survey getSurvey() {
        return (Survey)readProperty("survey");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "lineId":
                return this.lineId;
            case "surveyId":
                return this.surveyId;
            case "line":
                return this.line;
            case "linePerformance":
                return this.linePerformance;
            case "lineStatus":
                return this.lineStatus;
            case "lineType":
                return this.lineType;
            case "survey":
                return this.survey;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "lineId":
                this.lineId = (Integer)val;
                break;
            case "surveyId":
                this.surveyId = (Integer)val;
                break;
            case "line":
                this.line = val;
                break;
            case "linePerformance":
                this.linePerformance = val;
                break;
            case "lineStatus":
                this.lineStatus = val;
                break;
            case "lineType":
                this.lineType = val;
                break;
            case "survey":
                this.survey = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.lineId);
        out.writeObject(this.surveyId);
        out.writeObject(this.line);
        out.writeObject(this.linePerformance);
        out.writeObject(this.lineStatus);
        out.writeObject(this.lineType);
        out.writeObject(this.survey);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.lineId = (Integer)in.readObject();
        this.surveyId = (Integer)in.readObject();
        this.line = in.readObject();
        this.linePerformance = in.readObject();
        this.lineStatus = in.readObject();
        this.lineType = in.readObject();
        this.survey = in.readObject();
    }

}
