package org.oceanops.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.oceanops.orm.Contact;
import org.oceanops.orm.Doc;

/**
 * Class _DocContact was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _DocContact extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String CONTACT_ID_PK_COLUMN = "CONTACT_ID";
    public static final String DOC_ID_PK_COLUMN = "DOC_ID";

    public static final NumericProperty<Integer> CONTACT_ID = PropertyFactory.createNumeric("contactId", Integer.class);
    public static final NumericProperty<Integer> DOC_ID = PropertyFactory.createNumeric("docId", Integer.class);
    public static final EntityProperty<Doc> CONTACT = PropertyFactory.createEntity("contact", Doc.class);
    public static final EntityProperty<Contact> DOC = PropertyFactory.createEntity("doc", Contact.class);

    protected Integer contactId;
    protected Integer docId;

    protected Object contact;
    protected Object doc;

    public void setContactId(Integer contactId) {
        beforePropertyWrite("contactId", this.contactId, contactId);
        this.contactId = contactId;
    }

    public Integer getContactId() {
        beforePropertyRead("contactId");
        return this.contactId;
    }

    public void setDocId(Integer docId) {
        beforePropertyWrite("docId", this.docId, docId);
        this.docId = docId;
    }

    public Integer getDocId() {
        beforePropertyRead("docId");
        return this.docId;
    }

    public void setContact(Doc contact) {
        setToOneTarget("contact", contact, true);
    }

    public Doc getContact() {
        return (Doc)readProperty("contact");
    }

    public void setDoc(Contact doc) {
        setToOneTarget("doc", doc, true);
    }

    public Contact getDoc() {
        return (Contact)readProperty("doc");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "contactId":
                return this.contactId;
            case "docId":
                return this.docId;
            case "contact":
                return this.contact;
            case "doc":
                return this.doc;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "contactId":
                this.contactId = (Integer)val;
                break;
            case "docId":
                this.docId = (Integer)val;
                break;
            case "contact":
                this.contact = val;
                break;
            case "doc":
                this.doc = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.contactId);
        out.writeObject(this.docId);
        out.writeObject(this.contact);
        out.writeObject(this.doc);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.contactId = (Integer)in.readObject();
        this.docId = (Integer)in.readObject();
        this.contact = in.readObject();
        this.doc = in.readObject();
    }

}
