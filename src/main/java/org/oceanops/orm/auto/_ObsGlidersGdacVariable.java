package org.oceanops.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.oceanops.orm.ObsGlidersGdac;
import org.oceanops.orm.Variable;

/**
 * Class _ObsGlidersGdacVariable was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ObsGlidersGdacVariable extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String OBS_ID_PK_COLUMN = "OBS_ID";
    public static final String VARIABLE_ID_PK_COLUMN = "VARIABLE_ID";

    public static final NumericProperty<Integer> OBS_ID = PropertyFactory.createNumeric("obsId", Integer.class);
    public static final NumericProperty<Integer> VARIABLE_ID = PropertyFactory.createNumeric("variableId", Integer.class);
    public static final EntityProperty<ObsGlidersGdac> OBS = PropertyFactory.createEntity("obs", ObsGlidersGdac.class);
    public static final EntityProperty<Variable> VARIABLE = PropertyFactory.createEntity("variable", Variable.class);

    protected Integer obsId;
    protected Integer variableId;

    protected Object obs;
    protected Object variable;

    public void setObsId(Integer obsId) {
        beforePropertyWrite("obsId", this.obsId, obsId);
        this.obsId = obsId;
    }

    public Integer getObsId() {
        beforePropertyRead("obsId");
        return this.obsId;
    }

    public void setVariableId(Integer variableId) {
        beforePropertyWrite("variableId", this.variableId, variableId);
        this.variableId = variableId;
    }

    public Integer getVariableId() {
        beforePropertyRead("variableId");
        return this.variableId;
    }

    public void setObs(ObsGlidersGdac obs) {
        setToOneTarget("obs", obs, true);
    }

    public ObsGlidersGdac getObs() {
        return (ObsGlidersGdac)readProperty("obs");
    }

    public void setVariable(Variable variable) {
        setToOneTarget("variable", variable, true);
    }

    public Variable getVariable() {
        return (Variable)readProperty("variable");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "obsId":
                return this.obsId;
            case "variableId":
                return this.variableId;
            case "obs":
                return this.obs;
            case "variable":
                return this.variable;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "obsId":
                this.obsId = (Integer)val;
                break;
            case "variableId":
                this.variableId = (Integer)val;
                break;
            case "obs":
                this.obs = val;
                break;
            case "variable":
                this.variable = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.obsId);
        out.writeObject(this.variableId);
        out.writeObject(this.obs);
        out.writeObject(this.variable);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.obsId = (Integer)in.readObject();
        this.variableId = (Integer)in.readObject();
        this.obs = in.readObject();
        this.variable = in.readObject();
    }

}
