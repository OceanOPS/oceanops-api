package org.oceanops.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.orm.Contact;

/**
 * Class _WebConnection was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _WebConnection extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String IDENTIFIER_PK_COLUMN = "IDENTIFIER";

    public static final StringProperty<String> IDENTIFIER = PropertyFactory.createString("identifier", String.class);
    public static final DateProperty<LocalDateTime> LAST_LOG_DATE = PropertyFactory.createDate("lastLogDate", LocalDateTime.class);
    public static final StringProperty<String> TOKEN = PropertyFactory.createString("token", String.class);
    public static final EntityProperty<Contact> CONTACT = PropertyFactory.createEntity("contact", Contact.class);

    protected String identifier;
    protected LocalDateTime lastLogDate;
    protected String token;

    protected Object contact;

    public void setIdentifier(String identifier) {
        beforePropertyWrite("identifier", this.identifier, identifier);
        this.identifier = identifier;
    }

    public String getIdentifier() {
        beforePropertyRead("identifier");
        return this.identifier;
    }

    public void setLastLogDate(LocalDateTime lastLogDate) {
        beforePropertyWrite("lastLogDate", this.lastLogDate, lastLogDate);
        this.lastLogDate = lastLogDate;
    }

    public LocalDateTime getLastLogDate() {
        beforePropertyRead("lastLogDate");
        return this.lastLogDate;
    }

    public void setToken(String token) {
        beforePropertyWrite("token", this.token, token);
        this.token = token;
    }

    public String getToken() {
        beforePropertyRead("token");
        return this.token;
    }

    public void setContact(Contact contact) {
        setToOneTarget("contact", contact, true);
    }

    public Contact getContact() {
        return (Contact)readProperty("contact");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "identifier":
                return this.identifier;
            case "lastLogDate":
                return this.lastLogDate;
            case "token":
                return this.token;
            case "contact":
                return this.contact;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "identifier":
                this.identifier = (String)val;
                break;
            case "lastLogDate":
                this.lastLogDate = (LocalDateTime)val;
                break;
            case "token":
                this.token = (String)val;
                break;
            case "contact":
                this.contact = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.identifier);
        out.writeObject(this.lastLogDate);
        out.writeObject(this.token);
        out.writeObject(this.contact);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.identifier = (String)in.readObject();
        this.lastLogDate = (LocalDateTime)in.readObject();
        this.token = (String)in.readObject();
        this.contact = in.readObject();
    }

}
