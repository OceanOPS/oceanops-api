package org.oceanops.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.orm.Contact;

/**
 * Class _QrCode was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _QrCode extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String CODE_PK_COLUMN = "CODE";

    public static final StringProperty<String> CODE = PropertyFactory.createString("code", String.class);
    public static final DateProperty<LocalDateTime> CREATION_DATE = PropertyFactory.createDate("creationDate", LocalDateTime.class);
    public static final StringProperty<String> REQUEST_ID = PropertyFactory.createString("requestId", String.class);
    public static final EntityProperty<Contact> CONTACT = PropertyFactory.createEntity("contact", Contact.class);

    protected String code;
    protected LocalDateTime creationDate;
    protected String requestId;

    protected Object contact;

    public void setCode(String code) {
        beforePropertyWrite("code", this.code, code);
        this.code = code;
    }

    public String getCode() {
        beforePropertyRead("code");
        return this.code;
    }

    public void setCreationDate(LocalDateTime creationDate) {
        beforePropertyWrite("creationDate", this.creationDate, creationDate);
        this.creationDate = creationDate;
    }

    public LocalDateTime getCreationDate() {
        beforePropertyRead("creationDate");
        return this.creationDate;
    }

    public void setRequestId(String requestId) {
        beforePropertyWrite("requestId", this.requestId, requestId);
        this.requestId = requestId;
    }

    public String getRequestId() {
        beforePropertyRead("requestId");
        return this.requestId;
    }

    public void setContact(Contact contact) {
        setToOneTarget("contact", contact, true);
    }

    public Contact getContact() {
        return (Contact)readProperty("contact");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "code":
                return this.code;
            case "creationDate":
                return this.creationDate;
            case "requestId":
                return this.requestId;
            case "contact":
                return this.contact;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "code":
                this.code = (String)val;
                break;
            case "creationDate":
                this.creationDate = (LocalDateTime)val;
                break;
            case "requestId":
                this.requestId = (String)val;
                break;
            case "contact":
                this.contact = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.code);
        out.writeObject(this.creationDate);
        out.writeObject(this.requestId);
        out.writeObject(this.contact);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.code = (String)in.readObject();
        this.creationDate = (LocalDateTime)in.readObject();
        this.requestId = (String)in.readObject();
        this.contact = in.readObject();
    }

}
