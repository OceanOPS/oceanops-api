package org.oceanops.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.orm.WebContactModule;
import org.oceanops.orm.WebFrequentation;

/**
 * Class _WebModule was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _WebModule extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final NumericProperty<Integer> ADMIN = PropertyFactory.createNumeric("admin", Integer.class);
    public static final NumericProperty<Integer> DASHBOARD = PropertyFactory.createNumeric("dashboard", Integer.class);
    public static final StringProperty<String> DESCRIPTION = PropertyFactory.createString("description", String.class);
    public static final StringProperty<String> HELP = PropertyFactory.createString("help", String.class);
    public static final StringProperty<String> ICON = PropertyFactory.createString("icon", String.class);
    public static final NumericProperty<Integer> ID = PropertyFactory.createNumeric("id", Integer.class);
    public static final NumericProperty<Integer> LOGGED = PropertyFactory.createNumeric("logged", Integer.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final StringProperty<String> NAME_SHORT = PropertyFactory.createString("nameShort", String.class);
    public static final StringProperty<String> TOPIC = PropertyFactory.createString("topic", String.class);
    public static final StringProperty<String> TYPE = PropertyFactory.createString("type", String.class);
    public static final ListProperty<WebContactModule> WEB_CONTACT_MODULES = PropertyFactory.createList("webContactModules", WebContactModule.class);
    public static final ListProperty<WebFrequentation> WEB_FREQUENTATIONS = PropertyFactory.createList("webFrequentations", WebFrequentation.class);

    protected Integer admin;
    protected Integer dashboard;
    protected String description;
    protected String help;
    protected String icon;
    protected Integer id;
    protected Integer logged;
    protected String name;
    protected String nameShort;
    protected String topic;
    protected String type;

    protected Object webContactModules;
    protected Object webFrequentations;

    public void setAdmin(Integer admin) {
        beforePropertyWrite("admin", this.admin, admin);
        this.admin = admin;
    }

    public Integer getAdmin() {
        beforePropertyRead("admin");
        return this.admin;
    }

    public void setDashboard(Integer dashboard) {
        beforePropertyWrite("dashboard", this.dashboard, dashboard);
        this.dashboard = dashboard;
    }

    public Integer getDashboard() {
        beforePropertyRead("dashboard");
        return this.dashboard;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setHelp(String help) {
        beforePropertyWrite("help", this.help, help);
        this.help = help;
    }

    public String getHelp() {
        beforePropertyRead("help");
        return this.help;
    }

    public void setIcon(String icon) {
        beforePropertyWrite("icon", this.icon, icon);
        this.icon = icon;
    }

    public String getIcon() {
        beforePropertyRead("icon");
        return this.icon;
    }

    public void setId(Integer id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Integer getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setLogged(Integer logged) {
        beforePropertyWrite("logged", this.logged, logged);
        this.logged = logged;
    }

    public Integer getLogged() {
        beforePropertyRead("logged");
        return this.logged;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setNameShort(String nameShort) {
        beforePropertyWrite("nameShort", this.nameShort, nameShort);
        this.nameShort = nameShort;
    }

    public String getNameShort() {
        beforePropertyRead("nameShort");
        return this.nameShort;
    }

    public void setTopic(String topic) {
        beforePropertyWrite("topic", this.topic, topic);
        this.topic = topic;
    }

    public String getTopic() {
        beforePropertyRead("topic");
        return this.topic;
    }

    public void setType(String type) {
        beforePropertyWrite("type", this.type, type);
        this.type = type;
    }

    public String getType() {
        beforePropertyRead("type");
        return this.type;
    }

    public void addToWebContactModules(WebContactModule obj) {
        addToManyTarget("webContactModules", obj, true);
    }

    public void removeFromWebContactModules(WebContactModule obj) {
        removeToManyTarget("webContactModules", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<WebContactModule> getWebContactModules() {
        return (List<WebContactModule>)readProperty("webContactModules");
    }

    public void addToWebFrequentations(WebFrequentation obj) {
        addToManyTarget("webFrequentations", obj, true);
    }

    public void removeFromWebFrequentations(WebFrequentation obj) {
        removeToManyTarget("webFrequentations", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<WebFrequentation> getWebFrequentations() {
        return (List<WebFrequentation>)readProperty("webFrequentations");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "admin":
                return this.admin;
            case "dashboard":
                return this.dashboard;
            case "description":
                return this.description;
            case "help":
                return this.help;
            case "icon":
                return this.icon;
            case "id":
                return this.id;
            case "logged":
                return this.logged;
            case "name":
                return this.name;
            case "nameShort":
                return this.nameShort;
            case "topic":
                return this.topic;
            case "type":
                return this.type;
            case "webContactModules":
                return this.webContactModules;
            case "webFrequentations":
                return this.webFrequentations;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "admin":
                this.admin = (Integer)val;
                break;
            case "dashboard":
                this.dashboard = (Integer)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "help":
                this.help = (String)val;
                break;
            case "icon":
                this.icon = (String)val;
                break;
            case "id":
                this.id = (Integer)val;
                break;
            case "logged":
                this.logged = (Integer)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "nameShort":
                this.nameShort = (String)val;
                break;
            case "topic":
                this.topic = (String)val;
                break;
            case "type":
                this.type = (String)val;
                break;
            case "webContactModules":
                this.webContactModules = val;
                break;
            case "webFrequentations":
                this.webFrequentations = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.admin);
        out.writeObject(this.dashboard);
        out.writeObject(this.description);
        out.writeObject(this.help);
        out.writeObject(this.icon);
        out.writeObject(this.id);
        out.writeObject(this.logged);
        out.writeObject(this.name);
        out.writeObject(this.nameShort);
        out.writeObject(this.topic);
        out.writeObject(this.type);
        out.writeObject(this.webContactModules);
        out.writeObject(this.webFrequentations);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.admin = (Integer)in.readObject();
        this.dashboard = (Integer)in.readObject();
        this.description = (String)in.readObject();
        this.help = (String)in.readObject();
        this.icon = (String)in.readObject();
        this.id = (Integer)in.readObject();
        this.logged = (Integer)in.readObject();
        this.name = (String)in.readObject();
        this.nameShort = (String)in.readObject();
        this.topic = (String)in.readObject();
        this.type = (String)in.readObject();
        this.webContactModules = in.readObject();
        this.webFrequentations = in.readObject();
    }

}
