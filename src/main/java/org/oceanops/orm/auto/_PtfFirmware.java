package org.oceanops.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.orm.Agency;
import org.oceanops.orm.PtfHardware;
import org.oceanops.orm.PtfModelFirmware;

/**
 * Class _PtfFirmware was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PtfFirmware extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> BLUETOOTH_ID = PropertyFactory.createString("bluetoothId", String.class);
    public static final StringProperty<String> FORMAT_REF = PropertyFactory.createString("formatRef", String.class);
    public static final NumericProperty<Integer> ID = PropertyFactory.createNumeric("id", Integer.class);
    public static final DateProperty<LocalDateTime> MANUF_DATE = PropertyFactory.createDate("manufDate", LocalDateTime.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final StringProperty<String> SERIAL_REF = PropertyFactory.createString("serialRef", String.class);
    public static final StringProperty<String> SOFTWARE_NAME = PropertyFactory.createString("softwareName", String.class);
    public static final StringProperty<String> SOFTWARE_VERSION = PropertyFactory.createString("softwareVersion", String.class);
    public static final EntityProperty<Agency> AGENCY = PropertyFactory.createEntity("agency", Agency.class);
    public static final ListProperty<PtfHardware> PTF_HARDWARES = PropertyFactory.createList("ptfHardwares", PtfHardware.class);
    public static final ListProperty<PtfHardware> PTF_HARDWARES1 = PropertyFactory.createList("ptfHardwares1", PtfHardware.class);
    public static final ListProperty<PtfModelFirmware> PTF_MODEL_FIRMWARES = PropertyFactory.createList("ptfModelFirmwares", PtfModelFirmware.class);

    protected String bluetoothId;
    protected String formatRef;
    protected Integer id;
    protected LocalDateTime manufDate;
    protected String name;
    protected String serialRef;
    protected String softwareName;
    protected String softwareVersion;

    protected Object agency;
    protected Object ptfHardwares;
    protected Object ptfHardwares1;
    protected Object ptfModelFirmwares;

    public void setBluetoothId(String bluetoothId) {
        beforePropertyWrite("bluetoothId", this.bluetoothId, bluetoothId);
        this.bluetoothId = bluetoothId;
    }

    public String getBluetoothId() {
        beforePropertyRead("bluetoothId");
        return this.bluetoothId;
    }

    public void setFormatRef(String formatRef) {
        beforePropertyWrite("formatRef", this.formatRef, formatRef);
        this.formatRef = formatRef;
    }

    public String getFormatRef() {
        beforePropertyRead("formatRef");
        return this.formatRef;
    }

    public void setId(Integer id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Integer getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setManufDate(LocalDateTime manufDate) {
        beforePropertyWrite("manufDate", this.manufDate, manufDate);
        this.manufDate = manufDate;
    }

    public LocalDateTime getManufDate() {
        beforePropertyRead("manufDate");
        return this.manufDate;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setSerialRef(String serialRef) {
        beforePropertyWrite("serialRef", this.serialRef, serialRef);
        this.serialRef = serialRef;
    }

    public String getSerialRef() {
        beforePropertyRead("serialRef");
        return this.serialRef;
    }

    public void setSoftwareName(String softwareName) {
        beforePropertyWrite("softwareName", this.softwareName, softwareName);
        this.softwareName = softwareName;
    }

    public String getSoftwareName() {
        beforePropertyRead("softwareName");
        return this.softwareName;
    }

    public void setSoftwareVersion(String softwareVersion) {
        beforePropertyWrite("softwareVersion", this.softwareVersion, softwareVersion);
        this.softwareVersion = softwareVersion;
    }

    public String getSoftwareVersion() {
        beforePropertyRead("softwareVersion");
        return this.softwareVersion;
    }

    public void setAgency(Agency agency) {
        setToOneTarget("agency", agency, true);
    }

    public Agency getAgency() {
        return (Agency)readProperty("agency");
    }

    public void addToPtfHardwares(PtfHardware obj) {
        addToManyTarget("ptfHardwares", obj, true);
    }

    public void removeFromPtfHardwares(PtfHardware obj) {
        removeToManyTarget("ptfHardwares", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfHardware> getPtfHardwares() {
        return (List<PtfHardware>)readProperty("ptfHardwares");
    }

    public void addToPtfHardwares1(PtfHardware obj) {
        addToManyTarget("ptfHardwares1", obj, true);
    }

    public void removeFromPtfHardwares1(PtfHardware obj) {
        removeToManyTarget("ptfHardwares1", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfHardware> getPtfHardwares1() {
        return (List<PtfHardware>)readProperty("ptfHardwares1");
    }

    public void addToPtfModelFirmwares(PtfModelFirmware obj) {
        addToManyTarget("ptfModelFirmwares", obj, true);
    }

    public void removeFromPtfModelFirmwares(PtfModelFirmware obj) {
        removeToManyTarget("ptfModelFirmwares", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfModelFirmware> getPtfModelFirmwares() {
        return (List<PtfModelFirmware>)readProperty("ptfModelFirmwares");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "bluetoothId":
                return this.bluetoothId;
            case "formatRef":
                return this.formatRef;
            case "id":
                return this.id;
            case "manufDate":
                return this.manufDate;
            case "name":
                return this.name;
            case "serialRef":
                return this.serialRef;
            case "softwareName":
                return this.softwareName;
            case "softwareVersion":
                return this.softwareVersion;
            case "agency":
                return this.agency;
            case "ptfHardwares":
                return this.ptfHardwares;
            case "ptfHardwares1":
                return this.ptfHardwares1;
            case "ptfModelFirmwares":
                return this.ptfModelFirmwares;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "bluetoothId":
                this.bluetoothId = (String)val;
                break;
            case "formatRef":
                this.formatRef = (String)val;
                break;
            case "id":
                this.id = (Integer)val;
                break;
            case "manufDate":
                this.manufDate = (LocalDateTime)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "serialRef":
                this.serialRef = (String)val;
                break;
            case "softwareName":
                this.softwareName = (String)val;
                break;
            case "softwareVersion":
                this.softwareVersion = (String)val;
                break;
            case "agency":
                this.agency = val;
                break;
            case "ptfHardwares":
                this.ptfHardwares = val;
                break;
            case "ptfHardwares1":
                this.ptfHardwares1 = val;
                break;
            case "ptfModelFirmwares":
                this.ptfModelFirmwares = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.bluetoothId);
        out.writeObject(this.formatRef);
        out.writeObject(this.id);
        out.writeObject(this.manufDate);
        out.writeObject(this.name);
        out.writeObject(this.serialRef);
        out.writeObject(this.softwareName);
        out.writeObject(this.softwareVersion);
        out.writeObject(this.agency);
        out.writeObject(this.ptfHardwares);
        out.writeObject(this.ptfHardwares1);
        out.writeObject(this.ptfModelFirmwares);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.bluetoothId = (String)in.readObject();
        this.formatRef = (String)in.readObject();
        this.id = (Integer)in.readObject();
        this.manufDate = (LocalDateTime)in.readObject();
        this.name = (String)in.readObject();
        this.serialRef = (String)in.readObject();
        this.softwareName = (String)in.readObject();
        this.softwareVersion = (String)in.readObject();
        this.agency = in.readObject();
        this.ptfHardwares = in.readObject();
        this.ptfHardwares1 = in.readObject();
        this.ptfModelFirmwares = in.readObject();
    }

}
