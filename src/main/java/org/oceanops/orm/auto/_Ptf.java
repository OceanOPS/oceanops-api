package org.oceanops.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.orm.Adoption;
import org.oceanops.orm.AgencyPtf;
import org.oceanops.orm.ContactPtfRole;
import org.oceanops.orm.DataStatus;
import org.oceanops.orm.Doc;
import org.oceanops.orm.EndingCause;
import org.oceanops.orm.Line;
import org.oceanops.orm.LocSystem;
import org.oceanops.orm.MzmsPtfCountry;
import org.oceanops.orm.NcNotification;
import org.oceanops.orm.NcSubscription;
import org.oceanops.orm.NetworkPtf;
import org.oceanops.orm.Obs;
import org.oceanops.orm.ObsArgoGdac;
import org.oceanops.orm.ObsFishingvesselFishydata;
import org.oceanops.orm.ObsGlidersGtsOsmc;
import org.oceanops.orm.ObsLatest;
import org.oceanops.orm.ObsTsunaGtsOsmc;
import org.oceanops.orm.ParameterPtf;
import org.oceanops.orm.Program;
import org.oceanops.orm.PtfAncillaryDevice;
import org.oceanops.orm.PtfAutomation;
import org.oceanops.orm.PtfBatchStatus;
import org.oceanops.orm.PtfConfig;
import org.oceanops.orm.PtfDeployment;
import org.oceanops.orm.PtfHardware;
import org.oceanops.orm.PtfIdentifiers;
import org.oceanops.orm.PtfLocStatus;
import org.oceanops.orm.PtfModel;
import org.oceanops.orm.PtfPtfStatus;
import org.oceanops.orm.PtfSoftware;
import org.oceanops.orm.PtfStatistics;
import org.oceanops.orm.PtfStatus;
import org.oceanops.orm.PtfUpdateHistory;
import org.oceanops.orm.PtfVariable;
import org.oceanops.orm.QcFeedback;
import org.oceanops.orm.Retrieval;
import org.oceanops.orm.Service;
import org.oceanops.orm.SitePtf;
import org.oceanops.orm.Story;
import org.oceanops.orm.Tag;
import org.oceanops.orm.Telecom;
import org.oceanops.orm.TimePeriod;
import org.oceanops.orm.WebFrequentation;
import org.oceanops.orm.Weblink;
import org.oceanops.orm.Wmo;

/**
 * Class _Ptf was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Ptf extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final NumericProperty<Integer> ACTIVITY_CRITERION = PropertyFactory.createNumeric("activityCriterion", Integer.class);
    public static final StringProperty<String> BATCH_REQUEST_REF = PropertyFactory.createString("batchRequestRef", String.class);
    public static final NumericProperty<Integer> CLOSURE_CRITERION = PropertyFactory.createNumeric("closureCriterion", Integer.class);
    public static final StringProperty<String> DATA_URL = PropertyFactory.createString("dataUrl", String.class);
    public static final NumericProperty<Integer> DELETE_TAG = PropertyFactory.createNumeric("deleteTag", Integer.class);
    public static final StringProperty<String> DESCRIPTION = PropertyFactory.createString("description", String.class);
    public static final DateProperty<LocalDateTime> E_NOTIFICATION_DATE = PropertyFactory.createDate("eNotificationDate", LocalDateTime.class);
    public static final DateProperty<LocalDateTime> ENDING_DATE = PropertyFactory.createDate("endingDate", LocalDateTime.class);
    public static final NumericProperty<Integer> ID = PropertyFactory.createNumeric("id", Integer.class);
    public static final DateProperty<LocalDateTime> INSERT_DATE = PropertyFactory.createDate("insertDate", LocalDateTime.class);
    public static final NumericProperty<Integer> LAST_LOC_ID = PropertyFactory.createNumeric("lastLocId", Integer.class);
    public static final DateProperty<LocalDateTime> LAST_UPDATE = PropertyFactory.createDate("lastUpdate", LocalDateTime.class);
    public static final NumericProperty<Integer> METADATA_AVAILABLE = PropertyFactory.createNumeric("metadataAvailable", Integer.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final StringProperty<String> NOK_REASON = PropertyFactory.createString("nokReason", String.class);
    public static final StringProperty<String> REF = PropertyFactory.createString("ref", String.class);
    public static final StringProperty<String> REF_PARENT = PropertyFactory.createString("refParent", String.class);
    public static final DateProperty<LocalDateTime> UPDATE_DATE = PropertyFactory.createDate("updateDate", LocalDateTime.class);
    public static final NumericProperty<Integer> VALIDATED = PropertyFactory.createNumeric("validated", Integer.class);
    public static final NumericProperty<Integer> WIGOS_SYNCHRONISED = PropertyFactory.createNumeric("wigosSynchronised", Integer.class);
    public static final ListProperty<Adoption> ADOPTIONS = PropertyFactory.createList("adoptions", Adoption.class);
    public static final ListProperty<AgencyPtf> AGENCY_PTFS = PropertyFactory.createList("agencyPtfs", AgencyPtf.class);
    public static final EntityProperty<Telecom> BACKUP_TELECOM = PropertyFactory.createEntity("backupTelecom", Telecom.class);
    public static final EntityProperty<LocSystem> BACKUP_TRACKING_SYSTEM = PropertyFactory.createEntity("backupTrackingSystem", LocSystem.class);
    public static final ListProperty<ContactPtfRole> CONTACT_PTF_ROLES = PropertyFactory.createList("contactPtfRoles", ContactPtfRole.class);
    public static final EntityProperty<DataStatus> DATA_STATUS = PropertyFactory.createEntity("dataStatus", DataStatus.class);
    public static final EntityProperty<Doc> DOC = PropertyFactory.createEntity("doc", Doc.class);
    public static final ListProperty<Doc> DOCS = PropertyFactory.createList("docs", Doc.class);
    public static final EntityProperty<EndingCause> ENDING_CAUSE = PropertyFactory.createEntity("endingCause", EndingCause.class);
    public static final EntityProperty<ObsLatest> LATEST_OBS = PropertyFactory.createEntity("latestObs", ObsLatest.class);
    public static final ListProperty<Line> LINES = PropertyFactory.createList("lines", Line.class);
    public static final EntityProperty<LocSystem> LOC_SYSTEM = PropertyFactory.createEntity("locSystem", LocSystem.class);
    public static final ListProperty<MzmsPtfCountry> MZMS_PTF_COUNTRIES = PropertyFactory.createList("mzmsPtfCountries", MzmsPtfCountry.class);
    public static final ListProperty<NcNotification> NC_NOTIFICATIONS = PropertyFactory.createList("ncNotifications", NcNotification.class);
    public static final ListProperty<NcSubscription> NC_SUBSCRIPTIONS = PropertyFactory.createList("ncSubscriptions", NcSubscription.class);
    public static final ListProperty<NetworkPtf> NETWORK_PTFS = PropertyFactory.createList("networkPtfs", NetworkPtf.class);
    public static final ListProperty<ObsArgoGdac> OBS_ARGO_GDACS = PropertyFactory.createList("obsArgoGdacs", ObsArgoGdac.class);
    public static final ListProperty<ObsFishingvesselFishydata> OBS_FISHINGVESSEL_FISHYDATAS = PropertyFactory.createList("obsFishingvesselFishydatas", ObsFishingvesselFishydata.class);
    public static final ListProperty<ObsGlidersGtsOsmc> OBS_GLIDERS_GTS_OSMCS = PropertyFactory.createList("obsGlidersGtsOsmcs", ObsGlidersGtsOsmc.class);
    public static final ListProperty<ObsTsunaGtsOsmc> OBS_TSUNA_GTS_OSMCS = PropertyFactory.createList("obsTsunaGtsOsmcs", ObsTsunaGtsOsmc.class);
    public static final ListProperty<Obs> OBSS = PropertyFactory.createList("obss", Obs.class);
    public static final ListProperty<ParameterPtf> PARAMETER_PTFS = PropertyFactory.createList("parameterPtfs", ParameterPtf.class);
    public static final EntityProperty<Program> PROGRAM = PropertyFactory.createEntity("program", Program.class);
    public static final ListProperty<PtfAncillaryDevice> PTF_ANCILLARY_DEVICES = PropertyFactory.createList("ptfAncillaryDevices", PtfAncillaryDevice.class);
    public static final EntityProperty<PtfAutomation> PTF_AUTOMATION = PropertyFactory.createEntity("ptfAutomation", PtfAutomation.class);
    public static final EntityProperty<PtfBatchStatus> PTF_BATCH_STATUS = PropertyFactory.createEntity("ptfBatchStatus", PtfBatchStatus.class);
    public static final ListProperty<PtfConfig> PTF_CONFIGS = PropertyFactory.createList("ptfConfigs", PtfConfig.class);
    public static final EntityProperty<PtfDeployment> PTF_DEPL = PropertyFactory.createEntity("ptfDepl", PtfDeployment.class);
    public static final EntityProperty<PtfHardware> PTF_HARDWARE = PropertyFactory.createEntity("ptfHardware", PtfHardware.class);
    public static final EntityProperty<PtfIdentifiers> PTF_IDENTIFIERS = PropertyFactory.createEntity("ptfIdentifiers", PtfIdentifiers.class);
    public static final ListProperty<PtfLocStatus> PTF_LOC_STATUSES = PropertyFactory.createList("ptfLocStatuses", PtfLocStatus.class);
    public static final EntityProperty<PtfModel> PTF_MODEL = PropertyFactory.createEntity("ptfModel", PtfModel.class);
    public static final ListProperty<PtfPtfStatus> PTF_PTF_STATUSES = PropertyFactory.createList("ptfPtfStatuses", PtfPtfStatus.class);
    public static final EntityProperty<PtfSoftware> PTF_SOFTWARE = PropertyFactory.createEntity("ptfSoftware", PtfSoftware.class);
    public static final EntityProperty<PtfStatistics> PTF_STATISTICS = PropertyFactory.createEntity("ptfStatistics", PtfStatistics.class);
    public static final EntityProperty<PtfStatus> PTF_STATUS = PropertyFactory.createEntity("ptfStatus", PtfStatus.class);
    public static final ListProperty<PtfUpdateHistory> PTF_UPDATE_HISTORIES = PropertyFactory.createList("ptfUpdateHistories", PtfUpdateHistory.class);
    public static final ListProperty<PtfVariable> PTF_VARIABLES = PropertyFactory.createList("ptfVariables", PtfVariable.class);
    public static final ListProperty<QcFeedback> QC_FEEDBACKS = PropertyFactory.createList("qcFeedbacks", QcFeedback.class);
    public static final EntityProperty<Retrieval> RETRIEVAL = PropertyFactory.createEntity("retrieval", Retrieval.class);
    public static final EntityProperty<TimePeriod> SERVICE_SCHEDULE = PropertyFactory.createEntity("serviceSchedule", TimePeriod.class);
    public static final ListProperty<Service> SERVICES = PropertyFactory.createList("services", Service.class);
    public static final ListProperty<SitePtf> SITE_PTFS = PropertyFactory.createList("sitePtfs", SitePtf.class);
    public static final ListProperty<Story> STORIES = PropertyFactory.createList("stories", Story.class);
    public static final ListProperty<Tag> TAGS = PropertyFactory.createList("tags", Tag.class);
    public static final EntityProperty<Telecom> TELECOM = PropertyFactory.createEntity("telecom", Telecom.class);
    public static final ListProperty<WebFrequentation> WEB_FREQUENTATIONS = PropertyFactory.createList("webFrequentations", WebFrequentation.class);
    public static final ListProperty<Weblink> WEBLINKS = PropertyFactory.createList("weblinks", Weblink.class);
    public static final ListProperty<Wmo> WMOS = PropertyFactory.createList("wmos", Wmo.class);

    protected Integer activityCriterion;
    protected String batchRequestRef;
    protected Integer closureCriterion;
    protected String dataUrl;
    protected Integer deleteTag;
    protected String description;
    protected LocalDateTime eNotificationDate;
    protected LocalDateTime endingDate;
    protected Integer id;
    protected LocalDateTime insertDate;
    protected Integer lastLocId;
    protected LocalDateTime lastUpdate;
    protected Integer metadataAvailable;
    protected String name;
    protected String nokReason;
    protected String ref;
    protected String refParent;
    protected LocalDateTime updateDate;
    protected Integer validated;
    protected Integer wigosSynchronised;

    protected Object adoptions;
    protected Object agencyPtfs;
    protected Object backupTelecom;
    protected Object backupTrackingSystem;
    protected Object contactPtfRoles;
    protected Object dataStatus;
    protected Object doc;
    protected Object docs;
    protected Object endingCause;
    protected Object latestObs;
    protected Object lines;
    protected Object locSystem;
    protected Object mzmsPtfCountries;
    protected Object ncNotifications;
    protected Object ncSubscriptions;
    protected Object networkPtfs;
    protected Object obsArgoGdacs;
    protected Object obsFishingvesselFishydatas;
    protected Object obsGlidersGtsOsmcs;
    protected Object obsTsunaGtsOsmcs;
    protected Object obss;
    protected Object parameterPtfs;
    protected Object program;
    protected Object ptfAncillaryDevices;
    protected Object ptfAutomation;
    protected Object ptfBatchStatus;
    protected Object ptfConfigs;
    protected Object ptfDepl;
    protected Object ptfHardware;
    protected Object ptfIdentifiers;
    protected Object ptfLocStatuses;
    protected Object ptfModel;
    protected Object ptfPtfStatuses;
    protected Object ptfSoftware;
    protected Object ptfStatistics;
    protected Object ptfStatus;
    protected Object ptfUpdateHistories;
    protected Object ptfVariables;
    protected Object qcFeedbacks;
    protected Object retrieval;
    protected Object serviceSchedule;
    protected Object services;
    protected Object sitePtfs;
    protected Object stories;
    protected Object tags;
    protected Object telecom;
    protected Object webFrequentations;
    protected Object weblinks;
    protected Object wmos;

    public void setActivityCriterion(Integer activityCriterion) {
        beforePropertyWrite("activityCriterion", this.activityCriterion, activityCriterion);
        this.activityCriterion = activityCriterion;
    }

    public Integer getActivityCriterion() {
        beforePropertyRead("activityCriterion");
        return this.activityCriterion;
    }

    public void setBatchRequestRef(String batchRequestRef) {
        beforePropertyWrite("batchRequestRef", this.batchRequestRef, batchRequestRef);
        this.batchRequestRef = batchRequestRef;
    }

    public String getBatchRequestRef() {
        beforePropertyRead("batchRequestRef");
        return this.batchRequestRef;
    }

    public void setClosureCriterion(Integer closureCriterion) {
        beforePropertyWrite("closureCriterion", this.closureCriterion, closureCriterion);
        this.closureCriterion = closureCriterion;
    }

    public Integer getClosureCriterion() {
        beforePropertyRead("closureCriterion");
        return this.closureCriterion;
    }

    public void setDataUrl(String dataUrl) {
        beforePropertyWrite("dataUrl", this.dataUrl, dataUrl);
        this.dataUrl = dataUrl;
    }

    public String getDataUrl() {
        beforePropertyRead("dataUrl");
        return this.dataUrl;
    }

    public void setDeleteTag(Integer deleteTag) {
        beforePropertyWrite("deleteTag", this.deleteTag, deleteTag);
        this.deleteTag = deleteTag;
    }

    public Integer getDeleteTag() {
        beforePropertyRead("deleteTag");
        return this.deleteTag;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setENotificationDate(LocalDateTime eNotificationDate) {
        beforePropertyWrite("eNotificationDate", this.eNotificationDate, eNotificationDate);
        this.eNotificationDate = eNotificationDate;
    }

    public LocalDateTime getENotificationDate() {
        beforePropertyRead("eNotificationDate");
        return this.eNotificationDate;
    }

    public void setEndingDate(LocalDateTime endingDate) {
        beforePropertyWrite("endingDate", this.endingDate, endingDate);
        this.endingDate = endingDate;
    }

    public LocalDateTime getEndingDate() {
        beforePropertyRead("endingDate");
        return this.endingDate;
    }

    public void setId(Integer id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Integer getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setInsertDate(LocalDateTime insertDate) {
        beforePropertyWrite("insertDate", this.insertDate, insertDate);
        this.insertDate = insertDate;
    }

    public LocalDateTime getInsertDate() {
        beforePropertyRead("insertDate");
        return this.insertDate;
    }

    public void setLastLocId(int lastLocId) {
        beforePropertyWrite("lastLocId", this.lastLocId, lastLocId);
        this.lastLocId = lastLocId;
    }

    public int getLastLocId() {
        beforePropertyRead("lastLocId");
        if(this.lastLocId == null) {
            return 0;
        }
        return this.lastLocId;
    }

    public void setLastUpdate(LocalDateTime lastUpdate) {
        beforePropertyWrite("lastUpdate", this.lastUpdate, lastUpdate);
        this.lastUpdate = lastUpdate;
    }

    public LocalDateTime getLastUpdate() {
        beforePropertyRead("lastUpdate");
        return this.lastUpdate;
    }

    public void setMetadataAvailable(Integer metadataAvailable) {
        beforePropertyWrite("metadataAvailable", this.metadataAvailable, metadataAvailable);
        this.metadataAvailable = metadataAvailable;
    }

    public Integer getMetadataAvailable() {
        beforePropertyRead("metadataAvailable");
        return this.metadataAvailable;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setNokReason(String nokReason) {
        beforePropertyWrite("nokReason", this.nokReason, nokReason);
        this.nokReason = nokReason;
    }

    public String getNokReason() {
        beforePropertyRead("nokReason");
        return this.nokReason;
    }

    public void setRef(String ref) {
        beforePropertyWrite("ref", this.ref, ref);
        this.ref = ref;
    }

    public String getRef() {
        beforePropertyRead("ref");
        return this.ref;
    }

    public void setRefParent(String refParent) {
        beforePropertyWrite("refParent", this.refParent, refParent);
        this.refParent = refParent;
    }

    public String getRefParent() {
        beforePropertyRead("refParent");
        return this.refParent;
    }

    public void setUpdateDate(LocalDateTime updateDate) {
        beforePropertyWrite("updateDate", this.updateDate, updateDate);
        this.updateDate = updateDate;
    }

    public LocalDateTime getUpdateDate() {
        beforePropertyRead("updateDate");
        return this.updateDate;
    }

    public void setValidated(Integer validated) {
        beforePropertyWrite("validated", this.validated, validated);
        this.validated = validated;
    }

    public Integer getValidated() {
        beforePropertyRead("validated");
        return this.validated;
    }

    public void setWigosSynchronised(Integer wigosSynchronised) {
        beforePropertyWrite("wigosSynchronised", this.wigosSynchronised, wigosSynchronised);
        this.wigosSynchronised = wigosSynchronised;
    }

    public Integer getWigosSynchronised() {
        beforePropertyRead("wigosSynchronised");
        return this.wigosSynchronised;
    }

    public void addToAdoptions(Adoption obj) {
        addToManyTarget("adoptions", obj, true);
    }

    public void removeFromAdoptions(Adoption obj) {
        removeToManyTarget("adoptions", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Adoption> getAdoptions() {
        return (List<Adoption>)readProperty("adoptions");
    }

    public void addToAgencyPtfs(AgencyPtf obj) {
        addToManyTarget("agencyPtfs", obj, true);
    }

    public void removeFromAgencyPtfs(AgencyPtf obj) {
        removeToManyTarget("agencyPtfs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<AgencyPtf> getAgencyPtfs() {
        return (List<AgencyPtf>)readProperty("agencyPtfs");
    }

    public void setBackupTelecom(Telecom backupTelecom) {
        setToOneTarget("backupTelecom", backupTelecom, true);
    }

    public Telecom getBackupTelecom() {
        return (Telecom)readProperty("backupTelecom");
    }

    public void setBackupTrackingSystem(LocSystem backupTrackingSystem) {
        setToOneTarget("backupTrackingSystem", backupTrackingSystem, true);
    }

    public LocSystem getBackupTrackingSystem() {
        return (LocSystem)readProperty("backupTrackingSystem");
    }

    public void addToContactPtfRoles(ContactPtfRole obj) {
        addToManyTarget("contactPtfRoles", obj, true);
    }

    public void removeFromContactPtfRoles(ContactPtfRole obj) {
        removeToManyTarget("contactPtfRoles", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ContactPtfRole> getContactPtfRoles() {
        return (List<ContactPtfRole>)readProperty("contactPtfRoles");
    }

    public void setDataStatus(DataStatus dataStatus) {
        setToOneTarget("dataStatus", dataStatus, true);
    }

    public DataStatus getDataStatus() {
        return (DataStatus)readProperty("dataStatus");
    }

    public void setDoc(Doc doc) {
        setToOneTarget("doc", doc, true);
    }

    public Doc getDoc() {
        return (Doc)readProperty("doc");
    }

    public void addToDocs(Doc obj) {
        addToManyTarget("docs", obj, true);
    }

    public void removeFromDocs(Doc obj) {
        removeToManyTarget("docs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Doc> getDocs() {
        return (List<Doc>)readProperty("docs");
    }

    public void setEndingCause(EndingCause endingCause) {
        setToOneTarget("endingCause", endingCause, true);
    }

    public EndingCause getEndingCause() {
        return (EndingCause)readProperty("endingCause");
    }

    public void setLatestObs(ObsLatest latestObs) {
        setToOneTarget("latestObs", latestObs, true);
    }

    public ObsLatest getLatestObs() {
        return (ObsLatest)readProperty("latestObs");
    }

    public void addToLines(Line obj) {
        addToManyTarget("lines", obj, true);
    }

    public void removeFromLines(Line obj) {
        removeToManyTarget("lines", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Line> getLines() {
        return (List<Line>)readProperty("lines");
    }

    public void setLocSystem(LocSystem locSystem) {
        setToOneTarget("locSystem", locSystem, true);
    }

    public LocSystem getLocSystem() {
        return (LocSystem)readProperty("locSystem");
    }

    public void addToMzmsPtfCountries(MzmsPtfCountry obj) {
        addToManyTarget("mzmsPtfCountries", obj, true);
    }

    public void removeFromMzmsPtfCountries(MzmsPtfCountry obj) {
        removeToManyTarget("mzmsPtfCountries", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<MzmsPtfCountry> getMzmsPtfCountries() {
        return (List<MzmsPtfCountry>)readProperty("mzmsPtfCountries");
    }

    public void addToNcNotifications(NcNotification obj) {
        addToManyTarget("ncNotifications", obj, true);
    }

    public void removeFromNcNotifications(NcNotification obj) {
        removeToManyTarget("ncNotifications", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<NcNotification> getNcNotifications() {
        return (List<NcNotification>)readProperty("ncNotifications");
    }

    public void addToNcSubscriptions(NcSubscription obj) {
        addToManyTarget("ncSubscriptions", obj, true);
    }

    public void removeFromNcSubscriptions(NcSubscription obj) {
        removeToManyTarget("ncSubscriptions", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<NcSubscription> getNcSubscriptions() {
        return (List<NcSubscription>)readProperty("ncSubscriptions");
    }

    public void addToNetworkPtfs(NetworkPtf obj) {
        addToManyTarget("networkPtfs", obj, true);
    }

    public void removeFromNetworkPtfs(NetworkPtf obj) {
        removeToManyTarget("networkPtfs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<NetworkPtf> getNetworkPtfs() {
        return (List<NetworkPtf>)readProperty("networkPtfs");
    }

    public void addToObsArgoGdacs(ObsArgoGdac obj) {
        addToManyTarget("obsArgoGdacs", obj, true);
    }

    public void removeFromObsArgoGdacs(ObsArgoGdac obj) {
        removeToManyTarget("obsArgoGdacs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ObsArgoGdac> getObsArgoGdacs() {
        return (List<ObsArgoGdac>)readProperty("obsArgoGdacs");
    }

    public void addToObsFishingvesselFishydatas(ObsFishingvesselFishydata obj) {
        addToManyTarget("obsFishingvesselFishydatas", obj, true);
    }

    public void removeFromObsFishingvesselFishydatas(ObsFishingvesselFishydata obj) {
        removeToManyTarget("obsFishingvesselFishydatas", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ObsFishingvesselFishydata> getObsFishingvesselFishydatas() {
        return (List<ObsFishingvesselFishydata>)readProperty("obsFishingvesselFishydatas");
    }

    public void addToObsGlidersGtsOsmcs(ObsGlidersGtsOsmc obj) {
        addToManyTarget("obsGlidersGtsOsmcs", obj, true);
    }

    public void removeFromObsGlidersGtsOsmcs(ObsGlidersGtsOsmc obj) {
        removeToManyTarget("obsGlidersGtsOsmcs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ObsGlidersGtsOsmc> getObsGlidersGtsOsmcs() {
        return (List<ObsGlidersGtsOsmc>)readProperty("obsGlidersGtsOsmcs");
    }

    public void addToObsTsunaGtsOsmcs(ObsTsunaGtsOsmc obj) {
        addToManyTarget("obsTsunaGtsOsmcs", obj, true);
    }

    public void removeFromObsTsunaGtsOsmcs(ObsTsunaGtsOsmc obj) {
        removeToManyTarget("obsTsunaGtsOsmcs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ObsTsunaGtsOsmc> getObsTsunaGtsOsmcs() {
        return (List<ObsTsunaGtsOsmc>)readProperty("obsTsunaGtsOsmcs");
    }

    public void addToObss(Obs obj) {
        addToManyTarget("obss", obj, true);
    }

    public void removeFromObss(Obs obj) {
        removeToManyTarget("obss", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Obs> getObss() {
        return (List<Obs>)readProperty("obss");
    }

    public void addToParameterPtfs(ParameterPtf obj) {
        addToManyTarget("parameterPtfs", obj, true);
    }

    public void removeFromParameterPtfs(ParameterPtf obj) {
        removeToManyTarget("parameterPtfs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ParameterPtf> getParameterPtfs() {
        return (List<ParameterPtf>)readProperty("parameterPtfs");
    }

    public void setProgram(Program program) {
        setToOneTarget("program", program, true);
    }

    public Program getProgram() {
        return (Program)readProperty("program");
    }

    public void addToPtfAncillaryDevices(PtfAncillaryDevice obj) {
        addToManyTarget("ptfAncillaryDevices", obj, true);
    }

    public void removeFromPtfAncillaryDevices(PtfAncillaryDevice obj) {
        removeToManyTarget("ptfAncillaryDevices", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfAncillaryDevice> getPtfAncillaryDevices() {
        return (List<PtfAncillaryDevice>)readProperty("ptfAncillaryDevices");
    }

    public void setPtfAutomation(PtfAutomation ptfAutomation) {
        setToOneTarget("ptfAutomation", ptfAutomation, true);
    }

    public PtfAutomation getPtfAutomation() {
        return (PtfAutomation)readProperty("ptfAutomation");
    }

    public void setPtfBatchStatus(PtfBatchStatus ptfBatchStatus) {
        setToOneTarget("ptfBatchStatus", ptfBatchStatus, true);
    }

    public PtfBatchStatus getPtfBatchStatus() {
        return (PtfBatchStatus)readProperty("ptfBatchStatus");
    }

    public void addToPtfConfigs(PtfConfig obj) {
        addToManyTarget("ptfConfigs", obj, true);
    }

    public void removeFromPtfConfigs(PtfConfig obj) {
        removeToManyTarget("ptfConfigs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfConfig> getPtfConfigs() {
        return (List<PtfConfig>)readProperty("ptfConfigs");
    }

    public void setPtfDepl(PtfDeployment ptfDepl) {
        setToOneTarget("ptfDepl", ptfDepl, true);
    }

    public PtfDeployment getPtfDepl() {
        return (PtfDeployment)readProperty("ptfDepl");
    }

    public void setPtfHardware(PtfHardware ptfHardware) {
        setToOneTarget("ptfHardware", ptfHardware, true);
    }

    public PtfHardware getPtfHardware() {
        return (PtfHardware)readProperty("ptfHardware");
    }

    public void setPtfIdentifiers(PtfIdentifiers ptfIdentifiers) {
        setToOneTarget("ptfIdentifiers", ptfIdentifiers, true);
    }

    public PtfIdentifiers getPtfIdentifiers() {
        return (PtfIdentifiers)readProperty("ptfIdentifiers");
    }

    public void addToPtfLocStatuses(PtfLocStatus obj) {
        addToManyTarget("ptfLocStatuses", obj, true);
    }

    public void removeFromPtfLocStatuses(PtfLocStatus obj) {
        removeToManyTarget("ptfLocStatuses", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfLocStatus> getPtfLocStatuses() {
        return (List<PtfLocStatus>)readProperty("ptfLocStatuses");
    }

    public void setPtfModel(PtfModel ptfModel) {
        setToOneTarget("ptfModel", ptfModel, true);
    }

    public PtfModel getPtfModel() {
        return (PtfModel)readProperty("ptfModel");
    }

    public void addToPtfPtfStatuses(PtfPtfStatus obj) {
        addToManyTarget("ptfPtfStatuses", obj, true);
    }

    public void removeFromPtfPtfStatuses(PtfPtfStatus obj) {
        removeToManyTarget("ptfPtfStatuses", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfPtfStatus> getPtfPtfStatuses() {
        return (List<PtfPtfStatus>)readProperty("ptfPtfStatuses");
    }

    public void setPtfSoftware(PtfSoftware ptfSoftware) {
        setToOneTarget("ptfSoftware", ptfSoftware, true);
    }

    public PtfSoftware getPtfSoftware() {
        return (PtfSoftware)readProperty("ptfSoftware");
    }

    public void setPtfStatistics(PtfStatistics ptfStatistics) {
        setToOneTarget("ptfStatistics", ptfStatistics, true);
    }

    public PtfStatistics getPtfStatistics() {
        return (PtfStatistics)readProperty("ptfStatistics");
    }

    public void setPtfStatus(PtfStatus ptfStatus) {
        setToOneTarget("ptfStatus", ptfStatus, true);
    }

    public PtfStatus getPtfStatus() {
        return (PtfStatus)readProperty("ptfStatus");
    }

    public void addToPtfUpdateHistories(PtfUpdateHistory obj) {
        addToManyTarget("ptfUpdateHistories", obj, true);
    }

    public void removeFromPtfUpdateHistories(PtfUpdateHistory obj) {
        removeToManyTarget("ptfUpdateHistories", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfUpdateHistory> getPtfUpdateHistories() {
        return (List<PtfUpdateHistory>)readProperty("ptfUpdateHistories");
    }

    public void addToPtfVariables(PtfVariable obj) {
        addToManyTarget("ptfVariables", obj, true);
    }

    public void removeFromPtfVariables(PtfVariable obj) {
        removeToManyTarget("ptfVariables", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfVariable> getPtfVariables() {
        return (List<PtfVariable>)readProperty("ptfVariables");
    }

    public void addToQcFeedbacks(QcFeedback obj) {
        addToManyTarget("qcFeedbacks", obj, true);
    }

    public void removeFromQcFeedbacks(QcFeedback obj) {
        removeToManyTarget("qcFeedbacks", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<QcFeedback> getQcFeedbacks() {
        return (List<QcFeedback>)readProperty("qcFeedbacks");
    }

    public void setRetrieval(Retrieval retrieval) {
        setToOneTarget("retrieval", retrieval, true);
    }

    public Retrieval getRetrieval() {
        return (Retrieval)readProperty("retrieval");
    }

    public void setServiceSchedule(TimePeriod serviceSchedule) {
        setToOneTarget("serviceSchedule", serviceSchedule, true);
    }

    public TimePeriod getServiceSchedule() {
        return (TimePeriod)readProperty("serviceSchedule");
    }

    public void addToServices(Service obj) {
        addToManyTarget("services", obj, true);
    }

    public void removeFromServices(Service obj) {
        removeToManyTarget("services", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Service> getServices() {
        return (List<Service>)readProperty("services");
    }

    public void addToSitePtfs(SitePtf obj) {
        addToManyTarget("sitePtfs", obj, true);
    }

    public void removeFromSitePtfs(SitePtf obj) {
        removeToManyTarget("sitePtfs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<SitePtf> getSitePtfs() {
        return (List<SitePtf>)readProperty("sitePtfs");
    }

    public void addToStories(Story obj) {
        addToManyTarget("stories", obj, true);
    }

    public void removeFromStories(Story obj) {
        removeToManyTarget("stories", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Story> getStories() {
        return (List<Story>)readProperty("stories");
    }

    public void addToTags(Tag obj) {
        addToManyTarget("tags", obj, true);
    }

    public void removeFromTags(Tag obj) {
        removeToManyTarget("tags", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Tag> getTags() {
        return (List<Tag>)readProperty("tags");
    }

    public void setTelecom(Telecom telecom) {
        setToOneTarget("telecom", telecom, true);
    }

    public Telecom getTelecom() {
        return (Telecom)readProperty("telecom");
    }

    public void addToWebFrequentations(WebFrequentation obj) {
        addToManyTarget("webFrequentations", obj, true);
    }

    public void removeFromWebFrequentations(WebFrequentation obj) {
        removeToManyTarget("webFrequentations", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<WebFrequentation> getWebFrequentations() {
        return (List<WebFrequentation>)readProperty("webFrequentations");
    }

    public void addToWeblinks(Weblink obj) {
        addToManyTarget("weblinks", obj, true);
    }

    public void removeFromWeblinks(Weblink obj) {
        removeToManyTarget("weblinks", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Weblink> getWeblinks() {
        return (List<Weblink>)readProperty("weblinks");
    }

    public void addToWmos(Wmo obj) {
        addToManyTarget("wmos", obj, true);
    }

    public void removeFromWmos(Wmo obj) {
        removeToManyTarget("wmos", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Wmo> getWmos() {
        return (List<Wmo>)readProperty("wmos");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "activityCriterion":
                return this.activityCriterion;
            case "batchRequestRef":
                return this.batchRequestRef;
            case "closureCriterion":
                return this.closureCriterion;
            case "dataUrl":
                return this.dataUrl;
            case "deleteTag":
                return this.deleteTag;
            case "description":
                return this.description;
            case "eNotificationDate":
                return this.eNotificationDate;
            case "endingDate":
                return this.endingDate;
            case "id":
                return this.id;
            case "insertDate":
                return this.insertDate;
            case "lastLocId":
                return this.lastLocId;
            case "lastUpdate":
                return this.lastUpdate;
            case "metadataAvailable":
                return this.metadataAvailable;
            case "name":
                return this.name;
            case "nokReason":
                return this.nokReason;
            case "ref":
                return this.ref;
            case "refParent":
                return this.refParent;
            case "updateDate":
                return this.updateDate;
            case "validated":
                return this.validated;
            case "wigosSynchronised":
                return this.wigosSynchronised;
            case "adoptions":
                return this.adoptions;
            case "agencyPtfs":
                return this.agencyPtfs;
            case "backupTelecom":
                return this.backupTelecom;
            case "backupTrackingSystem":
                return this.backupTrackingSystem;
            case "contactPtfRoles":
                return this.contactPtfRoles;
            case "dataStatus":
                return this.dataStatus;
            case "doc":
                return this.doc;
            case "docs":
                return this.docs;
            case "endingCause":
                return this.endingCause;
            case "latestObs":
                return this.latestObs;
            case "lines":
                return this.lines;
            case "locSystem":
                return this.locSystem;
            case "mzmsPtfCountries":
                return this.mzmsPtfCountries;
            case "ncNotifications":
                return this.ncNotifications;
            case "ncSubscriptions":
                return this.ncSubscriptions;
            case "networkPtfs":
                return this.networkPtfs;
            case "obsArgoGdacs":
                return this.obsArgoGdacs;
            case "obsFishingvesselFishydatas":
                return this.obsFishingvesselFishydatas;
            case "obsGlidersGtsOsmcs":
                return this.obsGlidersGtsOsmcs;
            case "obsTsunaGtsOsmcs":
                return this.obsTsunaGtsOsmcs;
            case "obss":
                return this.obss;
            case "parameterPtfs":
                return this.parameterPtfs;
            case "program":
                return this.program;
            case "ptfAncillaryDevices":
                return this.ptfAncillaryDevices;
            case "ptfAutomation":
                return this.ptfAutomation;
            case "ptfBatchStatus":
                return this.ptfBatchStatus;
            case "ptfConfigs":
                return this.ptfConfigs;
            case "ptfDepl":
                return this.ptfDepl;
            case "ptfHardware":
                return this.ptfHardware;
            case "ptfIdentifiers":
                return this.ptfIdentifiers;
            case "ptfLocStatuses":
                return this.ptfLocStatuses;
            case "ptfModel":
                return this.ptfModel;
            case "ptfPtfStatuses":
                return this.ptfPtfStatuses;
            case "ptfSoftware":
                return this.ptfSoftware;
            case "ptfStatistics":
                return this.ptfStatistics;
            case "ptfStatus":
                return this.ptfStatus;
            case "ptfUpdateHistories":
                return this.ptfUpdateHistories;
            case "ptfVariables":
                return this.ptfVariables;
            case "qcFeedbacks":
                return this.qcFeedbacks;
            case "retrieval":
                return this.retrieval;
            case "serviceSchedule":
                return this.serviceSchedule;
            case "services":
                return this.services;
            case "sitePtfs":
                return this.sitePtfs;
            case "stories":
                return this.stories;
            case "tags":
                return this.tags;
            case "telecom":
                return this.telecom;
            case "webFrequentations":
                return this.webFrequentations;
            case "weblinks":
                return this.weblinks;
            case "wmos":
                return this.wmos;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "activityCriterion":
                this.activityCriterion = (Integer)val;
                break;
            case "batchRequestRef":
                this.batchRequestRef = (String)val;
                break;
            case "closureCriterion":
                this.closureCriterion = (Integer)val;
                break;
            case "dataUrl":
                this.dataUrl = (String)val;
                break;
            case "deleteTag":
                this.deleteTag = (Integer)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "eNotificationDate":
                this.eNotificationDate = (LocalDateTime)val;
                break;
            case "endingDate":
                this.endingDate = (LocalDateTime)val;
                break;
            case "id":
                this.id = (Integer)val;
                break;
            case "insertDate":
                this.insertDate = (LocalDateTime)val;
                break;
            case "lastLocId":
                this.lastLocId = (Integer)val;
                break;
            case "lastUpdate":
                this.lastUpdate = (LocalDateTime)val;
                break;
            case "metadataAvailable":
                this.metadataAvailable = (Integer)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "nokReason":
                this.nokReason = (String)val;
                break;
            case "ref":
                this.ref = (String)val;
                break;
            case "refParent":
                this.refParent = (String)val;
                break;
            case "updateDate":
                this.updateDate = (LocalDateTime)val;
                break;
            case "validated":
                this.validated = (Integer)val;
                break;
            case "wigosSynchronised":
                this.wigosSynchronised = (Integer)val;
                break;
            case "adoptions":
                this.adoptions = val;
                break;
            case "agencyPtfs":
                this.agencyPtfs = val;
                break;
            case "backupTelecom":
                this.backupTelecom = val;
                break;
            case "backupTrackingSystem":
                this.backupTrackingSystem = val;
                break;
            case "contactPtfRoles":
                this.contactPtfRoles = val;
                break;
            case "dataStatus":
                this.dataStatus = val;
                break;
            case "doc":
                this.doc = val;
                break;
            case "docs":
                this.docs = val;
                break;
            case "endingCause":
                this.endingCause = val;
                break;
            case "latestObs":
                this.latestObs = val;
                break;
            case "lines":
                this.lines = val;
                break;
            case "locSystem":
                this.locSystem = val;
                break;
            case "mzmsPtfCountries":
                this.mzmsPtfCountries = val;
                break;
            case "ncNotifications":
                this.ncNotifications = val;
                break;
            case "ncSubscriptions":
                this.ncSubscriptions = val;
                break;
            case "networkPtfs":
                this.networkPtfs = val;
                break;
            case "obsArgoGdacs":
                this.obsArgoGdacs = val;
                break;
            case "obsFishingvesselFishydatas":
                this.obsFishingvesselFishydatas = val;
                break;
            case "obsGlidersGtsOsmcs":
                this.obsGlidersGtsOsmcs = val;
                break;
            case "obsTsunaGtsOsmcs":
                this.obsTsunaGtsOsmcs = val;
                break;
            case "obss":
                this.obss = val;
                break;
            case "parameterPtfs":
                this.parameterPtfs = val;
                break;
            case "program":
                this.program = val;
                break;
            case "ptfAncillaryDevices":
                this.ptfAncillaryDevices = val;
                break;
            case "ptfAutomation":
                this.ptfAutomation = val;
                break;
            case "ptfBatchStatus":
                this.ptfBatchStatus = val;
                break;
            case "ptfConfigs":
                this.ptfConfigs = val;
                break;
            case "ptfDepl":
                this.ptfDepl = val;
                break;
            case "ptfHardware":
                this.ptfHardware = val;
                break;
            case "ptfIdentifiers":
                this.ptfIdentifiers = val;
                break;
            case "ptfLocStatuses":
                this.ptfLocStatuses = val;
                break;
            case "ptfModel":
                this.ptfModel = val;
                break;
            case "ptfPtfStatuses":
                this.ptfPtfStatuses = val;
                break;
            case "ptfSoftware":
                this.ptfSoftware = val;
                break;
            case "ptfStatistics":
                this.ptfStatistics = val;
                break;
            case "ptfStatus":
                this.ptfStatus = val;
                break;
            case "ptfUpdateHistories":
                this.ptfUpdateHistories = val;
                break;
            case "ptfVariables":
                this.ptfVariables = val;
                break;
            case "qcFeedbacks":
                this.qcFeedbacks = val;
                break;
            case "retrieval":
                this.retrieval = val;
                break;
            case "serviceSchedule":
                this.serviceSchedule = val;
                break;
            case "services":
                this.services = val;
                break;
            case "sitePtfs":
                this.sitePtfs = val;
                break;
            case "stories":
                this.stories = val;
                break;
            case "tags":
                this.tags = val;
                break;
            case "telecom":
                this.telecom = val;
                break;
            case "webFrequentations":
                this.webFrequentations = val;
                break;
            case "weblinks":
                this.weblinks = val;
                break;
            case "wmos":
                this.wmos = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.activityCriterion);
        out.writeObject(this.batchRequestRef);
        out.writeObject(this.closureCriterion);
        out.writeObject(this.dataUrl);
        out.writeObject(this.deleteTag);
        out.writeObject(this.description);
        out.writeObject(this.eNotificationDate);
        out.writeObject(this.endingDate);
        out.writeObject(this.id);
        out.writeObject(this.insertDate);
        out.writeObject(this.lastLocId);
        out.writeObject(this.lastUpdate);
        out.writeObject(this.metadataAvailable);
        out.writeObject(this.name);
        out.writeObject(this.nokReason);
        out.writeObject(this.ref);
        out.writeObject(this.refParent);
        out.writeObject(this.updateDate);
        out.writeObject(this.validated);
        out.writeObject(this.wigosSynchronised);
        out.writeObject(this.adoptions);
        out.writeObject(this.agencyPtfs);
        out.writeObject(this.backupTelecom);
        out.writeObject(this.backupTrackingSystem);
        out.writeObject(this.contactPtfRoles);
        out.writeObject(this.dataStatus);
        out.writeObject(this.doc);
        out.writeObject(this.docs);
        out.writeObject(this.endingCause);
        out.writeObject(this.latestObs);
        out.writeObject(this.lines);
        out.writeObject(this.locSystem);
        out.writeObject(this.mzmsPtfCountries);
        out.writeObject(this.ncNotifications);
        out.writeObject(this.ncSubscriptions);
        out.writeObject(this.networkPtfs);
        out.writeObject(this.obsArgoGdacs);
        out.writeObject(this.obsFishingvesselFishydatas);
        out.writeObject(this.obsGlidersGtsOsmcs);
        out.writeObject(this.obsTsunaGtsOsmcs);
        out.writeObject(this.obss);
        out.writeObject(this.parameterPtfs);
        out.writeObject(this.program);
        out.writeObject(this.ptfAncillaryDevices);
        out.writeObject(this.ptfAutomation);
        out.writeObject(this.ptfBatchStatus);
        out.writeObject(this.ptfConfigs);
        out.writeObject(this.ptfDepl);
        out.writeObject(this.ptfHardware);
        out.writeObject(this.ptfIdentifiers);
        out.writeObject(this.ptfLocStatuses);
        out.writeObject(this.ptfModel);
        out.writeObject(this.ptfPtfStatuses);
        out.writeObject(this.ptfSoftware);
        out.writeObject(this.ptfStatistics);
        out.writeObject(this.ptfStatus);
        out.writeObject(this.ptfUpdateHistories);
        out.writeObject(this.ptfVariables);
        out.writeObject(this.qcFeedbacks);
        out.writeObject(this.retrieval);
        out.writeObject(this.serviceSchedule);
        out.writeObject(this.services);
        out.writeObject(this.sitePtfs);
        out.writeObject(this.stories);
        out.writeObject(this.tags);
        out.writeObject(this.telecom);
        out.writeObject(this.webFrequentations);
        out.writeObject(this.weblinks);
        out.writeObject(this.wmos);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.activityCriterion = (Integer)in.readObject();
        this.batchRequestRef = (String)in.readObject();
        this.closureCriterion = (Integer)in.readObject();
        this.dataUrl = (String)in.readObject();
        this.deleteTag = (Integer)in.readObject();
        this.description = (String)in.readObject();
        this.eNotificationDate = (LocalDateTime)in.readObject();
        this.endingDate = (LocalDateTime)in.readObject();
        this.id = (Integer)in.readObject();
        this.insertDate = (LocalDateTime)in.readObject();
        this.lastLocId = (Integer)in.readObject();
        this.lastUpdate = (LocalDateTime)in.readObject();
        this.metadataAvailable = (Integer)in.readObject();
        this.name = (String)in.readObject();
        this.nokReason = (String)in.readObject();
        this.ref = (String)in.readObject();
        this.refParent = (String)in.readObject();
        this.updateDate = (LocalDateTime)in.readObject();
        this.validated = (Integer)in.readObject();
        this.wigosSynchronised = (Integer)in.readObject();
        this.adoptions = in.readObject();
        this.agencyPtfs = in.readObject();
        this.backupTelecom = in.readObject();
        this.backupTrackingSystem = in.readObject();
        this.contactPtfRoles = in.readObject();
        this.dataStatus = in.readObject();
        this.doc = in.readObject();
        this.docs = in.readObject();
        this.endingCause = in.readObject();
        this.latestObs = in.readObject();
        this.lines = in.readObject();
        this.locSystem = in.readObject();
        this.mzmsPtfCountries = in.readObject();
        this.ncNotifications = in.readObject();
        this.ncSubscriptions = in.readObject();
        this.networkPtfs = in.readObject();
        this.obsArgoGdacs = in.readObject();
        this.obsFishingvesselFishydatas = in.readObject();
        this.obsGlidersGtsOsmcs = in.readObject();
        this.obsTsunaGtsOsmcs = in.readObject();
        this.obss = in.readObject();
        this.parameterPtfs = in.readObject();
        this.program = in.readObject();
        this.ptfAncillaryDevices = in.readObject();
        this.ptfAutomation = in.readObject();
        this.ptfBatchStatus = in.readObject();
        this.ptfConfigs = in.readObject();
        this.ptfDepl = in.readObject();
        this.ptfHardware = in.readObject();
        this.ptfIdentifiers = in.readObject();
        this.ptfLocStatuses = in.readObject();
        this.ptfModel = in.readObject();
        this.ptfPtfStatuses = in.readObject();
        this.ptfSoftware = in.readObject();
        this.ptfStatistics = in.readObject();
        this.ptfStatus = in.readObject();
        this.ptfUpdateHistories = in.readObject();
        this.ptfVariables = in.readObject();
        this.qcFeedbacks = in.readObject();
        this.retrieval = in.readObject();
        this.serviceSchedule = in.readObject();
        this.services = in.readObject();
        this.sitePtfs = in.readObject();
        this.stories = in.readObject();
        this.tags = in.readObject();
        this.telecom = in.readObject();
        this.webFrequentations = in.readObject();
        this.weblinks = in.readObject();
        this.wmos = in.readObject();
    }

}
