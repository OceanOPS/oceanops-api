package org.oceanops.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.orm.Contact;
import org.oceanops.orm.Country;
import org.oceanops.orm.Doc;
import org.oceanops.orm.Weblink;

/**
 * Class _Meeting was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Meeting extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> DESCRIPTION = PropertyFactory.createString("description", String.class);
    public static final DateProperty<LocalDateTime> END_DATE = PropertyFactory.createDate("endDate", LocalDateTime.class);
    public static final StringProperty<String> GEO_LOCATION = PropertyFactory.createString("geoLocation", String.class);
    public static final NumericProperty<Integer> ID = PropertyFactory.createNumeric("id", Integer.class);
    public static final StringProperty<String> LOCATION = PropertyFactory.createString("location", String.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final StringProperty<String> NAME_SHORT = PropertyFactory.createString("nameShort", String.class);
    public static final StringProperty<String> PLACE = PropertyFactory.createString("place", String.class);
    public static final DateProperty<LocalDateTime> START_DATE = PropertyFactory.createDate("startDate", LocalDateTime.class);
    public static final EntityProperty<Contact> CONTACT = PropertyFactory.createEntity("contact", Contact.class);
    public static final EntityProperty<Country> COUNTRY = PropertyFactory.createEntity("country", Country.class);
    public static final ListProperty<Doc> DOCS = PropertyFactory.createList("docs", Doc.class);
    public static final EntityProperty<Weblink> WEBLINK = PropertyFactory.createEntity("weblink", Weblink.class);

    protected String description;
    protected LocalDateTime endDate;
    protected String geoLocation;
    protected Integer id;
    protected String location;
    protected String name;
    protected String nameShort;
    protected String place;
    protected LocalDateTime startDate;

    protected Object contact;
    protected Object country;
    protected Object docs;
    protected Object weblink;

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setEndDate(LocalDateTime endDate) {
        beforePropertyWrite("endDate", this.endDate, endDate);
        this.endDate = endDate;
    }

    public LocalDateTime getEndDate() {
        beforePropertyRead("endDate");
        return this.endDate;
    }

    public void setGeoLocation(String geoLocation) {
        beforePropertyWrite("geoLocation", this.geoLocation, geoLocation);
        this.geoLocation = geoLocation;
    }

    public String getGeoLocation() {
        beforePropertyRead("geoLocation");
        return this.geoLocation;
    }

    public void setId(Integer id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Integer getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setLocation(String location) {
        beforePropertyWrite("location", this.location, location);
        this.location = location;
    }

    public String getLocation() {
        beforePropertyRead("location");
        return this.location;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setNameShort(String nameShort) {
        beforePropertyWrite("nameShort", this.nameShort, nameShort);
        this.nameShort = nameShort;
    }

    public String getNameShort() {
        beforePropertyRead("nameShort");
        return this.nameShort;
    }

    public void setPlace(String place) {
        beforePropertyWrite("place", this.place, place);
        this.place = place;
    }

    public String getPlace() {
        beforePropertyRead("place");
        return this.place;
    }

    public void setStartDate(LocalDateTime startDate) {
        beforePropertyWrite("startDate", this.startDate, startDate);
        this.startDate = startDate;
    }

    public LocalDateTime getStartDate() {
        beforePropertyRead("startDate");
        return this.startDate;
    }

    public void setContact(Contact contact) {
        setToOneTarget("contact", contact, true);
    }

    public Contact getContact() {
        return (Contact)readProperty("contact");
    }

    public void setCountry(Country country) {
        setToOneTarget("country", country, true);
    }

    public Country getCountry() {
        return (Country)readProperty("country");
    }

    public void addToDocs(Doc obj) {
        addToManyTarget("docs", obj, true);
    }

    public void removeFromDocs(Doc obj) {
        removeToManyTarget("docs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Doc> getDocs() {
        return (List<Doc>)readProperty("docs");
    }

    public void setWeblink(Weblink weblink) {
        setToOneTarget("weblink", weblink, true);
    }

    public Weblink getWeblink() {
        return (Weblink)readProperty("weblink");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "description":
                return this.description;
            case "endDate":
                return this.endDate;
            case "geoLocation":
                return this.geoLocation;
            case "id":
                return this.id;
            case "location":
                return this.location;
            case "name":
                return this.name;
            case "nameShort":
                return this.nameShort;
            case "place":
                return this.place;
            case "startDate":
                return this.startDate;
            case "contact":
                return this.contact;
            case "country":
                return this.country;
            case "docs":
                return this.docs;
            case "weblink":
                return this.weblink;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "description":
                this.description = (String)val;
                break;
            case "endDate":
                this.endDate = (LocalDateTime)val;
                break;
            case "geoLocation":
                this.geoLocation = (String)val;
                break;
            case "id":
                this.id = (Integer)val;
                break;
            case "location":
                this.location = (String)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "nameShort":
                this.nameShort = (String)val;
                break;
            case "place":
                this.place = (String)val;
                break;
            case "startDate":
                this.startDate = (LocalDateTime)val;
                break;
            case "contact":
                this.contact = val;
                break;
            case "country":
                this.country = val;
                break;
            case "docs":
                this.docs = val;
                break;
            case "weblink":
                this.weblink = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.description);
        out.writeObject(this.endDate);
        out.writeObject(this.geoLocation);
        out.writeObject(this.id);
        out.writeObject(this.location);
        out.writeObject(this.name);
        out.writeObject(this.nameShort);
        out.writeObject(this.place);
        out.writeObject(this.startDate);
        out.writeObject(this.contact);
        out.writeObject(this.country);
        out.writeObject(this.docs);
        out.writeObject(this.weblink);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.description = (String)in.readObject();
        this.endDate = (LocalDateTime)in.readObject();
        this.geoLocation = (String)in.readObject();
        this.id = (Integer)in.readObject();
        this.location = (String)in.readObject();
        this.name = (String)in.readObject();
        this.nameShort = (String)in.readObject();
        this.place = (String)in.readObject();
        this.startDate = (LocalDateTime)in.readObject();
        this.contact = in.readObject();
        this.country = in.readObject();
        this.docs = in.readObject();
        this.weblink = in.readObject();
    }

}
