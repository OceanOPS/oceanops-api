package org.oceanops.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.orm.Contact;
import org.oceanops.orm.PtfModel;
import org.oceanops.orm.Telecom;
import org.oceanops.orm.TelecomFormatDoc;

/**
 * Class _TelecomFormat was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _TelecomFormat extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> DESCRIPTION = PropertyFactory.createString("description", String.class);
    public static final DateProperty<LocalDateTime> END_DATE = PropertyFactory.createDate("endDate", LocalDateTime.class);
    public static final NumericProperty<Integer> ID = PropertyFactory.createNumeric("id", Integer.class);
    public static final StringProperty<String> KEY = PropertyFactory.createString("key", String.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final StringProperty<String> NAME_LONG = PropertyFactory.createString("nameLong", String.class);
    public static final StringProperty<String> NAME_SHORT = PropertyFactory.createString("nameShort", String.class);
    public static final NumericProperty<Integer> NB_BITS = PropertyFactory.createNumeric("nbBits", Integer.class);
    public static final DateProperty<LocalDateTime> START_DATE = PropertyFactory.createDate("startDate", LocalDateTime.class);
    public static final StringProperty<String> VERSION = PropertyFactory.createString("version", String.class);
    public static final EntityProperty<Contact> CONTACT = PropertyFactory.createEntity("contact", Contact.class);
    public static final EntityProperty<PtfModel> PTF_MODEL = PropertyFactory.createEntity("ptfModel", PtfModel.class);
    public static final ListProperty<TelecomFormatDoc> TELECOM_FORMAT_DOCS = PropertyFactory.createList("telecomFormatDocs", TelecomFormatDoc.class);
    public static final ListProperty<Telecom> TELECOMS = PropertyFactory.createList("telecoms", Telecom.class);

    protected String description;
    protected LocalDateTime endDate;
    protected Integer id;
    protected String key;
    protected String name;
    protected String nameLong;
    protected String nameShort;
    protected Integer nbBits;
    protected LocalDateTime startDate;
    protected String version;

    protected Object contact;
    protected Object ptfModel;
    protected Object telecomFormatDocs;
    protected Object telecoms;

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setEndDate(LocalDateTime endDate) {
        beforePropertyWrite("endDate", this.endDate, endDate);
        this.endDate = endDate;
    }

    public LocalDateTime getEndDate() {
        beforePropertyRead("endDate");
        return this.endDate;
    }

    public void setId(Integer id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Integer getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setKey(String key) {
        beforePropertyWrite("key", this.key, key);
        this.key = key;
    }

    public String getKey() {
        beforePropertyRead("key");
        return this.key;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setNameLong(String nameLong) {
        beforePropertyWrite("nameLong", this.nameLong, nameLong);
        this.nameLong = nameLong;
    }

    public String getNameLong() {
        beforePropertyRead("nameLong");
        return this.nameLong;
    }

    public void setNameShort(String nameShort) {
        beforePropertyWrite("nameShort", this.nameShort, nameShort);
        this.nameShort = nameShort;
    }

    public String getNameShort() {
        beforePropertyRead("nameShort");
        return this.nameShort;
    }

    public void setNbBits(Integer nbBits) {
        beforePropertyWrite("nbBits", this.nbBits, nbBits);
        this.nbBits = nbBits;
    }

    public Integer getNbBits() {
        beforePropertyRead("nbBits");
        return this.nbBits;
    }

    public void setStartDate(LocalDateTime startDate) {
        beforePropertyWrite("startDate", this.startDate, startDate);
        this.startDate = startDate;
    }

    public LocalDateTime getStartDate() {
        beforePropertyRead("startDate");
        return this.startDate;
    }

    public void setVersion(String version) {
        beforePropertyWrite("version", this.version, version);
        this.version = version;
    }

    public String getVersion() {
        beforePropertyRead("version");
        return this.version;
    }

    public void setContact(Contact contact) {
        setToOneTarget("contact", contact, true);
    }

    public Contact getContact() {
        return (Contact)readProperty("contact");
    }

    public void setPtfModel(PtfModel ptfModel) {
        setToOneTarget("ptfModel", ptfModel, true);
    }

    public PtfModel getPtfModel() {
        return (PtfModel)readProperty("ptfModel");
    }

    public void addToTelecomFormatDocs(TelecomFormatDoc obj) {
        addToManyTarget("telecomFormatDocs", obj, true);
    }

    public void removeFromTelecomFormatDocs(TelecomFormatDoc obj) {
        removeToManyTarget("telecomFormatDocs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<TelecomFormatDoc> getTelecomFormatDocs() {
        return (List<TelecomFormatDoc>)readProperty("telecomFormatDocs");
    }

    public void addToTelecoms(Telecom obj) {
        addToManyTarget("telecoms", obj, true);
    }

    public void removeFromTelecoms(Telecom obj) {
        removeToManyTarget("telecoms", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Telecom> getTelecoms() {
        return (List<Telecom>)readProperty("telecoms");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "description":
                return this.description;
            case "endDate":
                return this.endDate;
            case "id":
                return this.id;
            case "key":
                return this.key;
            case "name":
                return this.name;
            case "nameLong":
                return this.nameLong;
            case "nameShort":
                return this.nameShort;
            case "nbBits":
                return this.nbBits;
            case "startDate":
                return this.startDate;
            case "version":
                return this.version;
            case "contact":
                return this.contact;
            case "ptfModel":
                return this.ptfModel;
            case "telecomFormatDocs":
                return this.telecomFormatDocs;
            case "telecoms":
                return this.telecoms;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "description":
                this.description = (String)val;
                break;
            case "endDate":
                this.endDate = (LocalDateTime)val;
                break;
            case "id":
                this.id = (Integer)val;
                break;
            case "key":
                this.key = (String)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "nameLong":
                this.nameLong = (String)val;
                break;
            case "nameShort":
                this.nameShort = (String)val;
                break;
            case "nbBits":
                this.nbBits = (Integer)val;
                break;
            case "startDate":
                this.startDate = (LocalDateTime)val;
                break;
            case "version":
                this.version = (String)val;
                break;
            case "contact":
                this.contact = val;
                break;
            case "ptfModel":
                this.ptfModel = val;
                break;
            case "telecomFormatDocs":
                this.telecomFormatDocs = val;
                break;
            case "telecoms":
                this.telecoms = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.description);
        out.writeObject(this.endDate);
        out.writeObject(this.id);
        out.writeObject(this.key);
        out.writeObject(this.name);
        out.writeObject(this.nameLong);
        out.writeObject(this.nameShort);
        out.writeObject(this.nbBits);
        out.writeObject(this.startDate);
        out.writeObject(this.version);
        out.writeObject(this.contact);
        out.writeObject(this.ptfModel);
        out.writeObject(this.telecomFormatDocs);
        out.writeObject(this.telecoms);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.description = (String)in.readObject();
        this.endDate = (LocalDateTime)in.readObject();
        this.id = (Integer)in.readObject();
        this.key = (String)in.readObject();
        this.name = (String)in.readObject();
        this.nameLong = (String)in.readObject();
        this.nameShort = (String)in.readObject();
        this.nbBits = (Integer)in.readObject();
        this.startDate = (LocalDateTime)in.readObject();
        this.version = (String)in.readObject();
        this.contact = in.readObject();
        this.ptfModel = in.readObject();
        this.telecomFormatDocs = in.readObject();
        this.telecoms = in.readObject();
    }

}
