package org.oceanops.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.orm.PtfConfig;

/**
 * Class _Config was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Config extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final NumericProperty<Double> CYCLE_TIME = PropertyFactory.createNumeric("cycleTime", Double.class);
    public static final NumericProperty<Double> DRIFT_PRESS = PropertyFactory.createNumeric("driftPress", Double.class);
    public static final NumericProperty<Integer> ICE_DETECTION = PropertyFactory.createNumeric("iceDetection", Integer.class);
    public static final NumericProperty<Integer> ID = PropertyFactory.createNumeric("id", Integer.class);
    public static final NumericProperty<Integer> N_LEVELS = PropertyFactory.createNumeric("nLevels", Integer.class);
    public static final StringProperty<String> OBS_SCHEDULE = PropertyFactory.createString("obsSchedule", String.class);
    public static final NumericProperty<Integer> PNP = PropertyFactory.createNumeric("pnp", Integer.class);
    public static final NumericProperty<Double> PROFILE_PRESS = PropertyFactory.createNumeric("profilePress", Double.class);
    public static final NumericProperty<Double> SURFACE_TIME = PropertyFactory.createNumeric("surfaceTime", Double.class);
    public static final NumericProperty<Double> WATCH_CIRCLE = PropertyFactory.createNumeric("watchCircle", Double.class);
    public static final ListProperty<PtfConfig> PTF_CONFIGS = PropertyFactory.createList("ptfConfigs", PtfConfig.class);

    protected Double cycleTime;
    protected Double driftPress;
    protected Integer iceDetection;
    protected Integer id;
    protected Integer nLevels;
    protected String obsSchedule;
    protected Integer pnp;
    protected Double profilePress;
    protected Double surfaceTime;
    protected Double watchCircle;

    protected Object ptfConfigs;

    public void setCycleTime(Double cycleTime) {
        beforePropertyWrite("cycleTime", this.cycleTime, cycleTime);
        this.cycleTime = cycleTime;
    }

    public Double getCycleTime() {
        beforePropertyRead("cycleTime");
        return this.cycleTime;
    }

    public void setDriftPress(Double driftPress) {
        beforePropertyWrite("driftPress", this.driftPress, driftPress);
        this.driftPress = driftPress;
    }

    public Double getDriftPress() {
        beforePropertyRead("driftPress");
        return this.driftPress;
    }

    public void setIceDetection(Integer iceDetection) {
        beforePropertyWrite("iceDetection", this.iceDetection, iceDetection);
        this.iceDetection = iceDetection;
    }

    public Integer getIceDetection() {
        beforePropertyRead("iceDetection");
        return this.iceDetection;
    }

    public void setId(Integer id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Integer getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setNLevels(Integer nLevels) {
        beforePropertyWrite("nLevels", this.nLevels, nLevels);
        this.nLevels = nLevels;
    }

    public Integer getNLevels() {
        beforePropertyRead("nLevels");
        return this.nLevels;
    }

    public void setObsSchedule(String obsSchedule) {
        beforePropertyWrite("obsSchedule", this.obsSchedule, obsSchedule);
        this.obsSchedule = obsSchedule;
    }

    public String getObsSchedule() {
        beforePropertyRead("obsSchedule");
        return this.obsSchedule;
    }

    public void setPnp(Integer pnp) {
        beforePropertyWrite("pnp", this.pnp, pnp);
        this.pnp = pnp;
    }

    public Integer getPnp() {
        beforePropertyRead("pnp");
        return this.pnp;
    }

    public void setProfilePress(Double profilePress) {
        beforePropertyWrite("profilePress", this.profilePress, profilePress);
        this.profilePress = profilePress;
    }

    public Double getProfilePress() {
        beforePropertyRead("profilePress");
        return this.profilePress;
    }

    public void setSurfaceTime(Double surfaceTime) {
        beforePropertyWrite("surfaceTime", this.surfaceTime, surfaceTime);
        this.surfaceTime = surfaceTime;
    }

    public Double getSurfaceTime() {
        beforePropertyRead("surfaceTime");
        return this.surfaceTime;
    }

    public void setWatchCircle(Double watchCircle) {
        beforePropertyWrite("watchCircle", this.watchCircle, watchCircle);
        this.watchCircle = watchCircle;
    }

    public Double getWatchCircle() {
        beforePropertyRead("watchCircle");
        return this.watchCircle;
    }

    public void addToPtfConfigs(PtfConfig obj) {
        addToManyTarget("ptfConfigs", obj, true);
    }

    public void removeFromPtfConfigs(PtfConfig obj) {
        removeToManyTarget("ptfConfigs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfConfig> getPtfConfigs() {
        return (List<PtfConfig>)readProperty("ptfConfigs");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "cycleTime":
                return this.cycleTime;
            case "driftPress":
                return this.driftPress;
            case "iceDetection":
                return this.iceDetection;
            case "id":
                return this.id;
            case "nLevels":
                return this.nLevels;
            case "obsSchedule":
                return this.obsSchedule;
            case "pnp":
                return this.pnp;
            case "profilePress":
                return this.profilePress;
            case "surfaceTime":
                return this.surfaceTime;
            case "watchCircle":
                return this.watchCircle;
            case "ptfConfigs":
                return this.ptfConfigs;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "cycleTime":
                this.cycleTime = (Double)val;
                break;
            case "driftPress":
                this.driftPress = (Double)val;
                break;
            case "iceDetection":
                this.iceDetection = (Integer)val;
                break;
            case "id":
                this.id = (Integer)val;
                break;
            case "nLevels":
                this.nLevels = (Integer)val;
                break;
            case "obsSchedule":
                this.obsSchedule = (String)val;
                break;
            case "pnp":
                this.pnp = (Integer)val;
                break;
            case "profilePress":
                this.profilePress = (Double)val;
                break;
            case "surfaceTime":
                this.surfaceTime = (Double)val;
                break;
            case "watchCircle":
                this.watchCircle = (Double)val;
                break;
            case "ptfConfigs":
                this.ptfConfigs = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.cycleTime);
        out.writeObject(this.driftPress);
        out.writeObject(this.iceDetection);
        out.writeObject(this.id);
        out.writeObject(this.nLevels);
        out.writeObject(this.obsSchedule);
        out.writeObject(this.pnp);
        out.writeObject(this.profilePress);
        out.writeObject(this.surfaceTime);
        out.writeObject(this.watchCircle);
        out.writeObject(this.ptfConfigs);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.cycleTime = (Double)in.readObject();
        this.driftPress = (Double)in.readObject();
        this.iceDetection = (Integer)in.readObject();
        this.id = (Integer)in.readObject();
        this.nLevels = (Integer)in.readObject();
        this.obsSchedule = (String)in.readObject();
        this.pnp = (Integer)in.readObject();
        this.profilePress = (Double)in.readObject();
        this.surfaceTime = (Double)in.readObject();
        this.watchCircle = (Double)in.readObject();
        this.ptfConfigs = in.readObject();
    }

}
