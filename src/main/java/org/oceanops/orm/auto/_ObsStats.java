package org.oceanops.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

/**
 * Class _ObsStats was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ObsStats extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final NumericProperty<Integer> ID = PropertyFactory.createNumeric("id", Integer.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final DateProperty<LocalDateTime> OBS_DAY = PropertyFactory.createDate("obsDay", LocalDateTime.class);
    public static final StringProperty<String> SOURCE = PropertyFactory.createString("source", String.class);
    public static final StringProperty<String> TYPE = PropertyFactory.createString("type", String.class);
    public static final NumericProperty<Double> VALUE = PropertyFactory.createNumeric("value", Double.class);

    protected Integer id;
    protected String name;
    protected LocalDateTime obsDay;
    protected String source;
    protected String type;
    protected Double value;


    public void setId(Integer id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Integer getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setObsDay(LocalDateTime obsDay) {
        beforePropertyWrite("obsDay", this.obsDay, obsDay);
        this.obsDay = obsDay;
    }

    public LocalDateTime getObsDay() {
        beforePropertyRead("obsDay");
        return this.obsDay;
    }

    public void setSource(String source) {
        beforePropertyWrite("source", this.source, source);
        this.source = source;
    }

    public String getSource() {
        beforePropertyRead("source");
        return this.source;
    }

    public void setType(String type) {
        beforePropertyWrite("type", this.type, type);
        this.type = type;
    }

    public String getType() {
        beforePropertyRead("type");
        return this.type;
    }

    public void setValue(Double value) {
        beforePropertyWrite("value", this.value, value);
        this.value = value;
    }

    public Double getValue() {
        beforePropertyRead("value");
        return this.value;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "id":
                return this.id;
            case "name":
                return this.name;
            case "obsDay":
                return this.obsDay;
            case "source":
                return this.source;
            case "type":
                return this.type;
            case "value":
                return this.value;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "id":
                this.id = (Integer)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "obsDay":
                this.obsDay = (LocalDateTime)val;
                break;
            case "source":
                this.source = (String)val;
                break;
            case "type":
                this.type = (String)val;
                break;
            case "value":
                this.value = (Double)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.id);
        out.writeObject(this.name);
        out.writeObject(this.obsDay);
        out.writeObject(this.source);
        out.writeObject(this.type);
        out.writeObject(this.value);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.id = (Integer)in.readObject();
        this.name = (String)in.readObject();
        this.obsDay = (LocalDateTime)in.readObject();
        this.source = (String)in.readObject();
        this.type = (String)in.readObject();
        this.value = (Double)in.readObject();
    }

}
