package org.oceanops.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.orm.LocStatus;
import org.oceanops.orm.Ptf;

/**
 * Class _PtfLocStatus was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PtfLocStatus extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String LOC_STATUS_ID_PK_COLUMN = "LOC_STATUS_ID";
    public static final String PTF_ID_PK_COLUMN = "PTF_ID";
    public static final String START_DATE_PK_COLUMN = "START_DATE";

    public static final DateProperty<LocalDateTime> END_DATE = PropertyFactory.createDate("endDate", LocalDateTime.class);
    public static final NumericProperty<Integer> LOC_STATUS_ID = PropertyFactory.createNumeric("locStatusId", Integer.class);
    public static final NumericProperty<Integer> PTF_ID = PropertyFactory.createNumeric("ptfId", Integer.class);
    public static final StringProperty<String> SOURCE = PropertyFactory.createString("source", String.class);
    public static final DateProperty<LocalDateTime> START_DATE = PropertyFactory.createDate("startDate", LocalDateTime.class);
    public static final EntityProperty<LocStatus> LOC_STATUS = PropertyFactory.createEntity("locStatus", LocStatus.class);
    public static final EntityProperty<Ptf> PTF = PropertyFactory.createEntity("ptf", Ptf.class);

    protected LocalDateTime endDate;
    protected Integer locStatusId;
    protected Integer ptfId;
    protected String source;
    protected LocalDateTime startDate;

    protected Object locStatus;
    protected Object ptf;

    public void setEndDate(LocalDateTime endDate) {
        beforePropertyWrite("endDate", this.endDate, endDate);
        this.endDate = endDate;
    }

    public LocalDateTime getEndDate() {
        beforePropertyRead("endDate");
        return this.endDate;
    }

    public void setLocStatusId(Integer locStatusId) {
        beforePropertyWrite("locStatusId", this.locStatusId, locStatusId);
        this.locStatusId = locStatusId;
    }

    public Integer getLocStatusId() {
        beforePropertyRead("locStatusId");
        return this.locStatusId;
    }

    public void setPtfId(Integer ptfId) {
        beforePropertyWrite("ptfId", this.ptfId, ptfId);
        this.ptfId = ptfId;
    }

    public Integer getPtfId() {
        beforePropertyRead("ptfId");
        return this.ptfId;
    }

    public void setSource(String source) {
        beforePropertyWrite("source", this.source, source);
        this.source = source;
    }

    public String getSource() {
        beforePropertyRead("source");
        return this.source;
    }

    public void setStartDate(LocalDateTime startDate) {
        beforePropertyWrite("startDate", this.startDate, startDate);
        this.startDate = startDate;
    }

    public LocalDateTime getStartDate() {
        beforePropertyRead("startDate");
        return this.startDate;
    }

    public void setLocStatus(LocStatus locStatus) {
        setToOneTarget("locStatus", locStatus, true);
    }

    public LocStatus getLocStatus() {
        return (LocStatus)readProperty("locStatus");
    }

    public void setPtf(Ptf ptf) {
        setToOneTarget("ptf", ptf, true);
    }

    public Ptf getPtf() {
        return (Ptf)readProperty("ptf");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "endDate":
                return this.endDate;
            case "locStatusId":
                return this.locStatusId;
            case "ptfId":
                return this.ptfId;
            case "source":
                return this.source;
            case "startDate":
                return this.startDate;
            case "locStatus":
                return this.locStatus;
            case "ptf":
                return this.ptf;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "endDate":
                this.endDate = (LocalDateTime)val;
                break;
            case "locStatusId":
                this.locStatusId = (Integer)val;
                break;
            case "ptfId":
                this.ptfId = (Integer)val;
                break;
            case "source":
                this.source = (String)val;
                break;
            case "startDate":
                this.startDate = (LocalDateTime)val;
                break;
            case "locStatus":
                this.locStatus = val;
                break;
            case "ptf":
                this.ptf = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.endDate);
        out.writeObject(this.locStatusId);
        out.writeObject(this.ptfId);
        out.writeObject(this.source);
        out.writeObject(this.startDate);
        out.writeObject(this.locStatus);
        out.writeObject(this.ptf);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.endDate = (LocalDateTime)in.readObject();
        this.locStatusId = (Integer)in.readObject();
        this.ptfId = (Integer)in.readObject();
        this.source = (String)in.readObject();
        this.startDate = (LocalDateTime)in.readObject();
        this.locStatus = in.readObject();
        this.ptf = in.readObject();
    }

}
