package org.oceanops.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.oceanops.orm.Agency;
import org.oceanops.orm.AgencyRole;
import org.oceanops.orm.Program;

/**
 * Class _ProgramAgency was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ProgramAgency extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final NumericProperty<Integer> LEAD = PropertyFactory.createNumeric("lead", Integer.class);
    public static final EntityProperty<Agency> AGENCY = PropertyFactory.createEntity("agency", Agency.class);
    public static final EntityProperty<Program> PROGRAM = PropertyFactory.createEntity("program", Program.class);
    public static final EntityProperty<AgencyRole> ROLE = PropertyFactory.createEntity("role", AgencyRole.class);

    protected Integer lead;

    protected Object agency;
    protected Object program;
    protected Object role;

    public void setLead(Integer lead) {
        beforePropertyWrite("lead", this.lead, lead);
        this.lead = lead;
    }

    public Integer getLead() {
        beforePropertyRead("lead");
        return this.lead;
    }

    public void setAgency(Agency agency) {
        setToOneTarget("agency", agency, true);
    }

    public Agency getAgency() {
        return (Agency)readProperty("agency");
    }

    public void setProgram(Program program) {
        setToOneTarget("program", program, true);
    }

    public Program getProgram() {
        return (Program)readProperty("program");
    }

    public void setRole(AgencyRole role) {
        setToOneTarget("role", role, true);
    }

    public AgencyRole getRole() {
        return (AgencyRole)readProperty("role");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "lead":
                return this.lead;
            case "agency":
                return this.agency;
            case "program":
                return this.program;
            case "role":
                return this.role;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "lead":
                this.lead = (Integer)val;
                break;
            case "agency":
                this.agency = val;
                break;
            case "program":
                this.program = val;
                break;
            case "role":
                this.role = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.lead);
        out.writeObject(this.agency);
        out.writeObject(this.program);
        out.writeObject(this.role);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.lead = (Integer)in.readObject();
        this.agency = in.readObject();
        this.program = in.readObject();
        this.role = in.readObject();
    }

}
