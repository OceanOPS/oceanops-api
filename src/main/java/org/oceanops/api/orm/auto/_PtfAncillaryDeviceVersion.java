package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.api.orm.PtfAncillaryDevice;
import org.oceanops.api.orm.PtfModel;

/**
 * Class _PtfAncillaryDeviceVersion was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PtfAncillaryDeviceVersion extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> DEVICE_NAME = PropertyFactory.createString("deviceName", String.class);
    public static final StringProperty<String> VERSION = PropertyFactory.createString("version", String.class);
    public static final ListProperty<PtfAncillaryDevice> PTF_ANCILLARY_DEVICE = PropertyFactory.createList("ptfAncillaryDevice", PtfAncillaryDevice.class);
    public static final EntityProperty<PtfModel> PTF_MODEL = PropertyFactory.createEntity("ptfModel", PtfModel.class);

    protected String deviceName;
    protected String version;

    protected Object ptfAncillaryDevice;
    protected Object ptfModel;

    public void setDeviceName(String deviceName) {
        beforePropertyWrite("deviceName", this.deviceName, deviceName);
        this.deviceName = deviceName;
    }

    public String getDeviceName() {
        beforePropertyRead("deviceName");
        return this.deviceName;
    }

    public void setVersion(String version) {
        beforePropertyWrite("version", this.version, version);
        this.version = version;
    }

    public String getVersion() {
        beforePropertyRead("version");
        return this.version;
    }

    public void addToPtfAncillaryDevice(PtfAncillaryDevice obj) {
        addToManyTarget("ptfAncillaryDevice", obj, true);
    }

    public void removeFromPtfAncillaryDevice(PtfAncillaryDevice obj) {
        removeToManyTarget("ptfAncillaryDevice", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfAncillaryDevice> getPtfAncillaryDevice() {
        return (List<PtfAncillaryDevice>)readProperty("ptfAncillaryDevice");
    }

    public void setPtfModel(PtfModel ptfModel) {
        setToOneTarget("ptfModel", ptfModel, true);
    }

    public PtfModel getPtfModel() {
        return (PtfModel)readProperty("ptfModel");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "deviceName":
                return this.deviceName;
            case "version":
                return this.version;
            case "ptfAncillaryDevice":
                return this.ptfAncillaryDevice;
            case "ptfModel":
                return this.ptfModel;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "deviceName":
                this.deviceName = (String)val;
                break;
            case "version":
                this.version = (String)val;
                break;
            case "ptfAncillaryDevice":
                this.ptfAncillaryDevice = val;
                break;
            case "ptfModel":
                this.ptfModel = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.deviceName);
        out.writeObject(this.version);
        out.writeObject(this.ptfAncillaryDevice);
        out.writeObject(this.ptfModel);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.deviceName = (String)in.readObject();
        this.version = (String)in.readObject();
        this.ptfAncillaryDevice = in.readObject();
        this.ptfModel = in.readObject();
    }

}
