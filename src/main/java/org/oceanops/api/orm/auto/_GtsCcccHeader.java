package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.oceanops.api.orm.GtsCccc;
import org.oceanops.api.orm.GtsHeader;

/**
 * Class _GtsCcccHeader was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _GtsCcccHeader extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String GTS_CCCC_ID_PK_COLUMN = "GTS_CCCC_ID";
    public static final String GTS_HEADER_ID_PK_COLUMN = "GTS_HEADER_ID";

    public static final NumericProperty<Integer> GTS_CCCC_ID = PropertyFactory.createNumeric("gtsCcccId", Integer.class);
    public static final NumericProperty<Integer> GTS_HEADER_ID = PropertyFactory.createNumeric("gtsHeaderId", Integer.class);
    public static final EntityProperty<GtsCccc> GTS_CCCC = PropertyFactory.createEntity("gtsCccc", GtsCccc.class);
    public static final EntityProperty<GtsHeader> GTS_HEADER = PropertyFactory.createEntity("gtsHeader", GtsHeader.class);

    protected Integer gtsCcccId;
    protected Integer gtsHeaderId;

    protected Object gtsCccc;
    protected Object gtsHeader;

    public void setGtsCcccId(Integer gtsCcccId) {
        beforePropertyWrite("gtsCcccId", this.gtsCcccId, gtsCcccId);
        this.gtsCcccId = gtsCcccId;
    }

    public Integer getGtsCcccId() {
        beforePropertyRead("gtsCcccId");
        return this.gtsCcccId;
    }

    public void setGtsHeaderId(Integer gtsHeaderId) {
        beforePropertyWrite("gtsHeaderId", this.gtsHeaderId, gtsHeaderId);
        this.gtsHeaderId = gtsHeaderId;
    }

    public Integer getGtsHeaderId() {
        beforePropertyRead("gtsHeaderId");
        return this.gtsHeaderId;
    }

    public void setGtsCccc(GtsCccc gtsCccc) {
        setToOneTarget("gtsCccc", gtsCccc, true);
    }

    public GtsCccc getGtsCccc() {
        return (GtsCccc)readProperty("gtsCccc");
    }

    public void setGtsHeader(GtsHeader gtsHeader) {
        setToOneTarget("gtsHeader", gtsHeader, true);
    }

    public GtsHeader getGtsHeader() {
        return (GtsHeader)readProperty("gtsHeader");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "gtsCcccId":
                return this.gtsCcccId;
            case "gtsHeaderId":
                return this.gtsHeaderId;
            case "gtsCccc":
                return this.gtsCccc;
            case "gtsHeader":
                return this.gtsHeader;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "gtsCcccId":
                this.gtsCcccId = (Integer)val;
                break;
            case "gtsHeaderId":
                this.gtsHeaderId = (Integer)val;
                break;
            case "gtsCccc":
                this.gtsCccc = val;
                break;
            case "gtsHeader":
                this.gtsHeader = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.gtsCcccId);
        out.writeObject(this.gtsHeaderId);
        out.writeObject(this.gtsCccc);
        out.writeObject(this.gtsHeader);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.gtsCcccId = (Integer)in.readObject();
        this.gtsHeaderId = (Integer)in.readObject();
        this.gtsCccc = in.readObject();
        this.gtsHeader = in.readObject();
    }

}
