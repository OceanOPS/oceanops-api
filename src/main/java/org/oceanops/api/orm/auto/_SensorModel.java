package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.BaseProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.api.orm.Agency;
import org.oceanops.api.orm.CruiseSensorModel;
import org.oceanops.api.orm.Image;
import org.oceanops.api.orm.PtfVariable;
import org.oceanops.api.orm.SensorModelNetwork;
import org.oceanops.api.orm.SensorModelSensorType;
import org.oceanops.api.orm.Service;
import org.oceanops.api.orm.Weblink;

/**
 * Class _SensorModel was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _SensorModel extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> ACCURACY = PropertyFactory.createString("accuracy", String.class);
    public static final NumericProperty<Integer> AXES_NO = PropertyFactory.createNumeric("axesNo", Integer.class);
    public static final StringProperty<String> BODC_ID = PropertyFactory.createString("bodcId", String.class);
    public static final NumericProperty<Integer> CALIB_FREQUENCY = PropertyFactory.createNumeric("calibFrequency", Integer.class);
    public static final StringProperty<String> DESCRIPTION = PropertyFactory.createString("description", String.class);
    public static final NumericProperty<Integer> ID = PropertyFactory.createNumeric("id", Integer.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final StringProperty<String> NAME_LONG = PropertyFactory.createString("nameLong", String.class);
    public static final StringProperty<String> NAME_SHORT = PropertyFactory.createString("nameShort", String.class);
    public static final StringProperty<String> ORIGINAL_DATASET = PropertyFactory.createString("originalDataset", String.class);
    public static final StringProperty<String> PRECISION = PropertyFactory.createString("precision", String.class);
    public static final StringProperty<String> RANGE = PropertyFactory.createString("range", String.class);
    public static final NumericProperty<Integer> RESOLUTION = PropertyFactory.createNumeric("resolution", Integer.class);
    public static final BaseProperty<byte[]> SPEC = PropertyFactory.createBase("spec", byte[].class);
    public static final NumericProperty<Integer> YEARLY_DRIFT = PropertyFactory.createNumeric("yearlyDrift", Integer.class);
    public static final EntityProperty<Agency> AGENCY = PropertyFactory.createEntity("agency", Agency.class);
    public static final ListProperty<CruiseSensorModel> CRUISE_SENSOR_MODELS = PropertyFactory.createList("cruiseSensorModels", CruiseSensorModel.class);
    public static final EntityProperty<Image> IMAGE = PropertyFactory.createEntity("image", Image.class);
    public static final ListProperty<PtfVariable> PTF_VARIABLES = PropertyFactory.createList("ptfVariables", PtfVariable.class);
    public static final ListProperty<SensorModelNetwork> SENSOR_MODEL_NETWORKS = PropertyFactory.createList("sensorModelNetworks", SensorModelNetwork.class);
    public static final ListProperty<SensorModelSensorType> SENSOR_MODEL_SENSOR_TYPES = PropertyFactory.createList("sensorModelSensorTypes", SensorModelSensorType.class);
    public static final ListProperty<Service> SERVICES = PropertyFactory.createList("services", Service.class);
    public static final EntityProperty<Weblink> WEBLINK = PropertyFactory.createEntity("weblink", Weblink.class);

    protected String accuracy;
    protected Integer axesNo;
    protected String bodcId;
    protected Integer calibFrequency;
    protected String description;
    protected Integer id;
    protected String name;
    protected String nameLong;
    protected String nameShort;
    protected String originalDataset;
    protected String precision;
    protected String range;
    protected Integer resolution;
    protected byte[] spec;
    protected Integer yearlyDrift;

    protected Object agency;
    protected Object cruiseSensorModels;
    protected Object image;
    protected Object ptfVariables;
    protected Object sensorModelNetworks;
    protected Object sensorModelSensorTypes;
    protected Object services;
    protected Object weblink;

    public void setAccuracy(String accuracy) {
        beforePropertyWrite("accuracy", this.accuracy, accuracy);
        this.accuracy = accuracy;
    }

    public String getAccuracy() {
        beforePropertyRead("accuracy");
        return this.accuracy;
    }

    public void setAxesNo(Integer axesNo) {
        beforePropertyWrite("axesNo", this.axesNo, axesNo);
        this.axesNo = axesNo;
    }

    public Integer getAxesNo() {
        beforePropertyRead("axesNo");
        return this.axesNo;
    }

    public void setBodcId(String bodcId) {
        beforePropertyWrite("bodcId", this.bodcId, bodcId);
        this.bodcId = bodcId;
    }

    public String getBodcId() {
        beforePropertyRead("bodcId");
        return this.bodcId;
    }

    public void setCalibFrequency(Integer calibFrequency) {
        beforePropertyWrite("calibFrequency", this.calibFrequency, calibFrequency);
        this.calibFrequency = calibFrequency;
    }

    public Integer getCalibFrequency() {
        beforePropertyRead("calibFrequency");
        return this.calibFrequency;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setId(Integer id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Integer getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setNameLong(String nameLong) {
        beforePropertyWrite("nameLong", this.nameLong, nameLong);
        this.nameLong = nameLong;
    }

    public String getNameLong() {
        beforePropertyRead("nameLong");
        return this.nameLong;
    }

    public void setNameShort(String nameShort) {
        beforePropertyWrite("nameShort", this.nameShort, nameShort);
        this.nameShort = nameShort;
    }

    public String getNameShort() {
        beforePropertyRead("nameShort");
        return this.nameShort;
    }

    public void setOriginalDataset(String originalDataset) {
        beforePropertyWrite("originalDataset", this.originalDataset, originalDataset);
        this.originalDataset = originalDataset;
    }

    public String getOriginalDataset() {
        beforePropertyRead("originalDataset");
        return this.originalDataset;
    }

    public void setPrecision(String precision) {
        beforePropertyWrite("precision", this.precision, precision);
        this.precision = precision;
    }

    public String getPrecision() {
        beforePropertyRead("precision");
        return this.precision;
    }

    public void setRange(String range) {
        beforePropertyWrite("range", this.range, range);
        this.range = range;
    }

    public String getRange() {
        beforePropertyRead("range");
        return this.range;
    }

    public void setResolution(Integer resolution) {
        beforePropertyWrite("resolution", this.resolution, resolution);
        this.resolution = resolution;
    }

    public Integer getResolution() {
        beforePropertyRead("resolution");
        return this.resolution;
    }

    public void setSpec(byte[] spec) {
        beforePropertyWrite("spec", this.spec, spec);
        this.spec = spec;
    }

    public byte[] getSpec() {
        beforePropertyRead("spec");
        return this.spec;
    }

    public void setYearlyDrift(Integer yearlyDrift) {
        beforePropertyWrite("yearlyDrift", this.yearlyDrift, yearlyDrift);
        this.yearlyDrift = yearlyDrift;
    }

    public Integer getYearlyDrift() {
        beforePropertyRead("yearlyDrift");
        return this.yearlyDrift;
    }

    public void setAgency(Agency agency) {
        setToOneTarget("agency", agency, true);
    }

    public Agency getAgency() {
        return (Agency)readProperty("agency");
    }

    public void addToCruiseSensorModels(CruiseSensorModel obj) {
        addToManyTarget("cruiseSensorModels", obj, true);
    }

    public void removeFromCruiseSensorModels(CruiseSensorModel obj) {
        removeToManyTarget("cruiseSensorModels", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CruiseSensorModel> getCruiseSensorModels() {
        return (List<CruiseSensorModel>)readProperty("cruiseSensorModels");
    }

    public void setImage(Image image) {
        setToOneTarget("image", image, true);
    }

    public Image getImage() {
        return (Image)readProperty("image");
    }

    public void addToPtfVariables(PtfVariable obj) {
        addToManyTarget("ptfVariables", obj, true);
    }

    public void removeFromPtfVariables(PtfVariable obj) {
        removeToManyTarget("ptfVariables", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfVariable> getPtfVariables() {
        return (List<PtfVariable>)readProperty("ptfVariables");
    }

    public void addToSensorModelNetworks(SensorModelNetwork obj) {
        addToManyTarget("sensorModelNetworks", obj, true);
    }

    public void removeFromSensorModelNetworks(SensorModelNetwork obj) {
        removeToManyTarget("sensorModelNetworks", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<SensorModelNetwork> getSensorModelNetworks() {
        return (List<SensorModelNetwork>)readProperty("sensorModelNetworks");
    }

    public void addToSensorModelSensorTypes(SensorModelSensorType obj) {
        addToManyTarget("sensorModelSensorTypes", obj, true);
    }

    public void removeFromSensorModelSensorTypes(SensorModelSensorType obj) {
        removeToManyTarget("sensorModelSensorTypes", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<SensorModelSensorType> getSensorModelSensorTypes() {
        return (List<SensorModelSensorType>)readProperty("sensorModelSensorTypes");
    }

    public void addToServices(Service obj) {
        addToManyTarget("services", obj, true);
    }

    public void removeFromServices(Service obj) {
        removeToManyTarget("services", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Service> getServices() {
        return (List<Service>)readProperty("services");
    }

    public void setWeblink(Weblink weblink) {
        setToOneTarget("weblink", weblink, true);
    }

    public Weblink getWeblink() {
        return (Weblink)readProperty("weblink");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "accuracy":
                return this.accuracy;
            case "axesNo":
                return this.axesNo;
            case "bodcId":
                return this.bodcId;
            case "calibFrequency":
                return this.calibFrequency;
            case "description":
                return this.description;
            case "id":
                return this.id;
            case "name":
                return this.name;
            case "nameLong":
                return this.nameLong;
            case "nameShort":
                return this.nameShort;
            case "originalDataset":
                return this.originalDataset;
            case "precision":
                return this.precision;
            case "range":
                return this.range;
            case "resolution":
                return this.resolution;
            case "spec":
                return this.spec;
            case "yearlyDrift":
                return this.yearlyDrift;
            case "agency":
                return this.agency;
            case "cruiseSensorModels":
                return this.cruiseSensorModels;
            case "image":
                return this.image;
            case "ptfVariables":
                return this.ptfVariables;
            case "sensorModelNetworks":
                return this.sensorModelNetworks;
            case "sensorModelSensorTypes":
                return this.sensorModelSensorTypes;
            case "services":
                return this.services;
            case "weblink":
                return this.weblink;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "accuracy":
                this.accuracy = (String)val;
                break;
            case "axesNo":
                this.axesNo = (Integer)val;
                break;
            case "bodcId":
                this.bodcId = (String)val;
                break;
            case "calibFrequency":
                this.calibFrequency = (Integer)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "id":
                this.id = (Integer)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "nameLong":
                this.nameLong = (String)val;
                break;
            case "nameShort":
                this.nameShort = (String)val;
                break;
            case "originalDataset":
                this.originalDataset = (String)val;
                break;
            case "precision":
                this.precision = (String)val;
                break;
            case "range":
                this.range = (String)val;
                break;
            case "resolution":
                this.resolution = (Integer)val;
                break;
            case "spec":
                this.spec = (byte[])val;
                break;
            case "yearlyDrift":
                this.yearlyDrift = (Integer)val;
                break;
            case "agency":
                this.agency = val;
                break;
            case "cruiseSensorModels":
                this.cruiseSensorModels = val;
                break;
            case "image":
                this.image = val;
                break;
            case "ptfVariables":
                this.ptfVariables = val;
                break;
            case "sensorModelNetworks":
                this.sensorModelNetworks = val;
                break;
            case "sensorModelSensorTypes":
                this.sensorModelSensorTypes = val;
                break;
            case "services":
                this.services = val;
                break;
            case "weblink":
                this.weblink = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.accuracy);
        out.writeObject(this.axesNo);
        out.writeObject(this.bodcId);
        out.writeObject(this.calibFrequency);
        out.writeObject(this.description);
        out.writeObject(this.id);
        out.writeObject(this.name);
        out.writeObject(this.nameLong);
        out.writeObject(this.nameShort);
        out.writeObject(this.originalDataset);
        out.writeObject(this.precision);
        out.writeObject(this.range);
        out.writeObject(this.resolution);
        out.writeObject(this.spec);
        out.writeObject(this.yearlyDrift);
        out.writeObject(this.agency);
        out.writeObject(this.cruiseSensorModels);
        out.writeObject(this.image);
        out.writeObject(this.ptfVariables);
        out.writeObject(this.sensorModelNetworks);
        out.writeObject(this.sensorModelSensorTypes);
        out.writeObject(this.services);
        out.writeObject(this.weblink);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.accuracy = (String)in.readObject();
        this.axesNo = (Integer)in.readObject();
        this.bodcId = (String)in.readObject();
        this.calibFrequency = (Integer)in.readObject();
        this.description = (String)in.readObject();
        this.id = (Integer)in.readObject();
        this.name = (String)in.readObject();
        this.nameLong = (String)in.readObject();
        this.nameShort = (String)in.readObject();
        this.originalDataset = (String)in.readObject();
        this.precision = (String)in.readObject();
        this.range = (String)in.readObject();
        this.resolution = (Integer)in.readObject();
        this.spec = (byte[])in.readObject();
        this.yearlyDrift = (Integer)in.readObject();
        this.agency = in.readObject();
        this.cruiseSensorModels = in.readObject();
        this.image = in.readObject();
        this.ptfVariables = in.readObject();
        this.sensorModelNetworks = in.readObject();
        this.sensorModelSensorTypes = in.readObject();
        this.services = in.readObject();
        this.weblink = in.readObject();
    }

}
