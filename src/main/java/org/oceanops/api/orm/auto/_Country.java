package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.api.orm.Agency;
import org.oceanops.api.orm.Contact;
import org.oceanops.api.orm.CountryCommitment;
import org.oceanops.api.orm.CruiseCountry;
import org.oceanops.api.orm.GtsCccc;
import org.oceanops.api.orm.Meeting;
import org.oceanops.api.orm.MzmsPtfCountry;
import org.oceanops.api.orm.NetworkCountry;
import org.oceanops.api.orm.Program;
import org.oceanops.api.orm.PtfDeployment;
import org.oceanops.api.orm.PtfHardware;
import org.oceanops.api.orm.Retrieval;
import org.oceanops.api.orm.Ship;
import org.oceanops.api.orm.ShipHistory;
import org.oceanops.api.orm.UserGroupContact;
import org.oceanops.api.orm.Weblink;

/**
 * Class _Country was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Country extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final NumericProperty<Integer> ACTIVE = PropertyFactory.createNumeric("active", Integer.class);
    public static final StringProperty<String> CODE2 = PropertyFactory.createString("code2", String.class);
    public static final StringProperty<String> CODE3 = PropertyFactory.createString("code3", String.class);
    public static final StringProperty<String> COLOR = PropertyFactory.createString("color", String.class);
    public static final NumericProperty<Integer> EEZ = PropertyFactory.createNumeric("eez", Integer.class);
    public static final NumericProperty<Integer> ID = PropertyFactory.createNumeric("id", Integer.class);
    public static final NumericProperty<Integer> IOC_MEMBER = PropertyFactory.createNumeric("iocMember", Integer.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final StringProperty<String> NAME_LONG = PropertyFactory.createString("nameLong", String.class);
    public static final StringProperty<String> NAME_SHORT = PropertyFactory.createString("nameShort", String.class);
    public static final NumericProperty<Integer> NUMCODE = PropertyFactory.createNumeric("numcode", Integer.class);
    public static final NumericProperty<Integer> TO_NOTIFY = PropertyFactory.createNumeric("toNotify", Integer.class);
    public static final NumericProperty<Integer> WMO_MEMBER = PropertyFactory.createNumeric("wmoMember", Integer.class);
    public static final ListProperty<Agency> AGENCIES = PropertyFactory.createList("agencies", Agency.class);
    public static final ListProperty<Contact> CONTACTS = PropertyFactory.createList("contacts", Contact.class);
    public static final ListProperty<CountryCommitment> COUNTRY_COMMITMENTS = PropertyFactory.createList("countryCommitments", CountryCommitment.class);
    public static final ListProperty<CruiseCountry> CRUISE_COUNTRIES = PropertyFactory.createList("cruiseCountries", CruiseCountry.class);
    public static final ListProperty<GtsCccc> GTS_CCCCS = PropertyFactory.createList("gtsCcccs", GtsCccc.class);
    public static final ListProperty<Meeting> MEETINGS = PropertyFactory.createList("meetings", Meeting.class);
    public static final ListProperty<MzmsPtfCountry> MZMS_PTF_COUNTRIES = PropertyFactory.createList("mzmsPtfCountries", MzmsPtfCountry.class);
    public static final ListProperty<NetworkCountry> NETWORK_COUNTRIES = PropertyFactory.createList("networkCountries", NetworkCountry.class);
    public static final ListProperty<Program> PROGRAMS = PropertyFactory.createList("programs", Program.class);
    public static final ListProperty<PtfDeployment> PTF_DEPLOYMENTS = PropertyFactory.createList("ptfDeployments", PtfDeployment.class);
    public static final ListProperty<PtfHardware> PTF_HARDWARES = PropertyFactory.createList("ptfHardwares", PtfHardware.class);
    public static final ListProperty<Retrieval> RETRIEVALS = PropertyFactory.createList("retrievals", Retrieval.class);
    public static final ListProperty<ShipHistory> SHIP_HISTORIES = PropertyFactory.createList("shipHistories", ShipHistory.class);
    public static final ListProperty<Ship> SHIPS = PropertyFactory.createList("ships", Ship.class);
    public static final ListProperty<UserGroupContact> USER_GROUP_CONTACTS = PropertyFactory.createList("userGroupContacts", UserGroupContact.class);
    public static final ListProperty<Weblink> WEBLINKS = PropertyFactory.createList("weblinks", Weblink.class);

    protected Integer active;
    protected String code2;
    protected String code3;
    protected String color;
    protected Integer eez;
    protected Integer id;
    protected Integer iocMember;
    protected String name;
    protected String nameLong;
    protected String nameShort;
    protected Integer numcode;
    protected Integer toNotify;
    protected Integer wmoMember;

    protected Object agencies;
    protected Object contacts;
    protected Object countryCommitments;
    protected Object cruiseCountries;
    protected Object gtsCcccs;
    protected Object meetings;
    protected Object mzmsPtfCountries;
    protected Object networkCountries;
    protected Object programs;
    protected Object ptfDeployments;
    protected Object ptfHardwares;
    protected Object retrievals;
    protected Object shipHistories;
    protected Object ships;
    protected Object userGroupContacts;
    protected Object weblinks;

    public void setActive(Integer active) {
        beforePropertyWrite("active", this.active, active);
        this.active = active;
    }

    public Integer getActive() {
        beforePropertyRead("active");
        return this.active;
    }

    public void setCode2(String code2) {
        beforePropertyWrite("code2", this.code2, code2);
        this.code2 = code2;
    }

    public String getCode2() {
        beforePropertyRead("code2");
        return this.code2;
    }

    public void setCode3(String code3) {
        beforePropertyWrite("code3", this.code3, code3);
        this.code3 = code3;
    }

    public String getCode3() {
        beforePropertyRead("code3");
        return this.code3;
    }

    public void setColor(String color) {
        beforePropertyWrite("color", this.color, color);
        this.color = color;
    }

    public String getColor() {
        beforePropertyRead("color");
        return this.color;
    }

    public void setEez(Integer eez) {
        beforePropertyWrite("eez", this.eez, eez);
        this.eez = eez;
    }

    public Integer getEez() {
        beforePropertyRead("eez");
        return this.eez;
    }

    public void setId(Integer id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Integer getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setIocMember(Integer iocMember) {
        beforePropertyWrite("iocMember", this.iocMember, iocMember);
        this.iocMember = iocMember;
    }

    public Integer getIocMember() {
        beforePropertyRead("iocMember");
        return this.iocMember;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setNameLong(String nameLong) {
        beforePropertyWrite("nameLong", this.nameLong, nameLong);
        this.nameLong = nameLong;
    }

    public String getNameLong() {
        beforePropertyRead("nameLong");
        return this.nameLong;
    }

    public void setNameShort(String nameShort) {
        beforePropertyWrite("nameShort", this.nameShort, nameShort);
        this.nameShort = nameShort;
    }

    public String getNameShort() {
        beforePropertyRead("nameShort");
        return this.nameShort;
    }

    public void setNumcode(Integer numcode) {
        beforePropertyWrite("numcode", this.numcode, numcode);
        this.numcode = numcode;
    }

    public Integer getNumcode() {
        beforePropertyRead("numcode");
        return this.numcode;
    }

    public void setToNotify(Integer toNotify) {
        beforePropertyWrite("toNotify", this.toNotify, toNotify);
        this.toNotify = toNotify;
    }

    public Integer getToNotify() {
        beforePropertyRead("toNotify");
        return this.toNotify;
    }

    public void setWmoMember(Integer wmoMember) {
        beforePropertyWrite("wmoMember", this.wmoMember, wmoMember);
        this.wmoMember = wmoMember;
    }

    public Integer getWmoMember() {
        beforePropertyRead("wmoMember");
        return this.wmoMember;
    }

    public void addToAgencies(Agency obj) {
        addToManyTarget("agencies", obj, true);
    }

    public void removeFromAgencies(Agency obj) {
        removeToManyTarget("agencies", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Agency> getAgencies() {
        return (List<Agency>)readProperty("agencies");
    }

    public void addToContacts(Contact obj) {
        addToManyTarget("contacts", obj, true);
    }

    public void removeFromContacts(Contact obj) {
        removeToManyTarget("contacts", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Contact> getContacts() {
        return (List<Contact>)readProperty("contacts");
    }

    public void addToCountryCommitments(CountryCommitment obj) {
        addToManyTarget("countryCommitments", obj, true);
    }

    public void removeFromCountryCommitments(CountryCommitment obj) {
        removeToManyTarget("countryCommitments", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CountryCommitment> getCountryCommitments() {
        return (List<CountryCommitment>)readProperty("countryCommitments");
    }

    public void addToCruiseCountries(CruiseCountry obj) {
        addToManyTarget("cruiseCountries", obj, true);
    }

    public void removeFromCruiseCountries(CruiseCountry obj) {
        removeToManyTarget("cruiseCountries", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CruiseCountry> getCruiseCountries() {
        return (List<CruiseCountry>)readProperty("cruiseCountries");
    }

    public void addToGtsCcccs(GtsCccc obj) {
        addToManyTarget("gtsCcccs", obj, true);
    }

    public void removeFromGtsCcccs(GtsCccc obj) {
        removeToManyTarget("gtsCcccs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<GtsCccc> getGtsCcccs() {
        return (List<GtsCccc>)readProperty("gtsCcccs");
    }

    public void addToMeetings(Meeting obj) {
        addToManyTarget("meetings", obj, true);
    }

    public void removeFromMeetings(Meeting obj) {
        removeToManyTarget("meetings", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Meeting> getMeetings() {
        return (List<Meeting>)readProperty("meetings");
    }

    public void addToMzmsPtfCountries(MzmsPtfCountry obj) {
        addToManyTarget("mzmsPtfCountries", obj, true);
    }

    public void removeFromMzmsPtfCountries(MzmsPtfCountry obj) {
        removeToManyTarget("mzmsPtfCountries", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<MzmsPtfCountry> getMzmsPtfCountries() {
        return (List<MzmsPtfCountry>)readProperty("mzmsPtfCountries");
    }

    public void addToNetworkCountries(NetworkCountry obj) {
        addToManyTarget("networkCountries", obj, true);
    }

    public void removeFromNetworkCountries(NetworkCountry obj) {
        removeToManyTarget("networkCountries", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<NetworkCountry> getNetworkCountries() {
        return (List<NetworkCountry>)readProperty("networkCountries");
    }

    public void addToPrograms(Program obj) {
        addToManyTarget("programs", obj, true);
    }

    public void removeFromPrograms(Program obj) {
        removeToManyTarget("programs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Program> getPrograms() {
        return (List<Program>)readProperty("programs");
    }

    public void addToPtfDeployments(PtfDeployment obj) {
        addToManyTarget("ptfDeployments", obj, true);
    }

    public void removeFromPtfDeployments(PtfDeployment obj) {
        removeToManyTarget("ptfDeployments", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfDeployment> getPtfDeployments() {
        return (List<PtfDeployment>)readProperty("ptfDeployments");
    }

    public void addToPtfHardwares(PtfHardware obj) {
        addToManyTarget("ptfHardwares", obj, true);
    }

    public void removeFromPtfHardwares(PtfHardware obj) {
        removeToManyTarget("ptfHardwares", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfHardware> getPtfHardwares() {
        return (List<PtfHardware>)readProperty("ptfHardwares");
    }

    public void addToRetrievals(Retrieval obj) {
        addToManyTarget("retrievals", obj, true);
    }

    public void removeFromRetrievals(Retrieval obj) {
        removeToManyTarget("retrievals", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Retrieval> getRetrievals() {
        return (List<Retrieval>)readProperty("retrievals");
    }

    public void addToShipHistories(ShipHistory obj) {
        addToManyTarget("shipHistories", obj, true);
    }

    public void removeFromShipHistories(ShipHistory obj) {
        removeToManyTarget("shipHistories", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ShipHistory> getShipHistories() {
        return (List<ShipHistory>)readProperty("shipHistories");
    }

    public void addToShips(Ship obj) {
        addToManyTarget("ships", obj, true);
    }

    public void removeFromShips(Ship obj) {
        removeToManyTarget("ships", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Ship> getShips() {
        return (List<Ship>)readProperty("ships");
    }

    public void addToUserGroupContacts(UserGroupContact obj) {
        addToManyTarget("userGroupContacts", obj, true);
    }

    public void removeFromUserGroupContacts(UserGroupContact obj) {
        removeToManyTarget("userGroupContacts", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<UserGroupContact> getUserGroupContacts() {
        return (List<UserGroupContact>)readProperty("userGroupContacts");
    }

    public void addToWeblinks(Weblink obj) {
        addToManyTarget("weblinks", obj, true);
    }

    public void removeFromWeblinks(Weblink obj) {
        removeToManyTarget("weblinks", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Weblink> getWeblinks() {
        return (List<Weblink>)readProperty("weblinks");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "active":
                return this.active;
            case "code2":
                return this.code2;
            case "code3":
                return this.code3;
            case "color":
                return this.color;
            case "eez":
                return this.eez;
            case "id":
                return this.id;
            case "iocMember":
                return this.iocMember;
            case "name":
                return this.name;
            case "nameLong":
                return this.nameLong;
            case "nameShort":
                return this.nameShort;
            case "numcode":
                return this.numcode;
            case "toNotify":
                return this.toNotify;
            case "wmoMember":
                return this.wmoMember;
            case "agencies":
                return this.agencies;
            case "contacts":
                return this.contacts;
            case "countryCommitments":
                return this.countryCommitments;
            case "cruiseCountries":
                return this.cruiseCountries;
            case "gtsCcccs":
                return this.gtsCcccs;
            case "meetings":
                return this.meetings;
            case "mzmsPtfCountries":
                return this.mzmsPtfCountries;
            case "networkCountries":
                return this.networkCountries;
            case "programs":
                return this.programs;
            case "ptfDeployments":
                return this.ptfDeployments;
            case "ptfHardwares":
                return this.ptfHardwares;
            case "retrievals":
                return this.retrievals;
            case "shipHistories":
                return this.shipHistories;
            case "ships":
                return this.ships;
            case "userGroupContacts":
                return this.userGroupContacts;
            case "weblinks":
                return this.weblinks;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "active":
                this.active = (Integer)val;
                break;
            case "code2":
                this.code2 = (String)val;
                break;
            case "code3":
                this.code3 = (String)val;
                break;
            case "color":
                this.color = (String)val;
                break;
            case "eez":
                this.eez = (Integer)val;
                break;
            case "id":
                this.id = (Integer)val;
                break;
            case "iocMember":
                this.iocMember = (Integer)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "nameLong":
                this.nameLong = (String)val;
                break;
            case "nameShort":
                this.nameShort = (String)val;
                break;
            case "numcode":
                this.numcode = (Integer)val;
                break;
            case "toNotify":
                this.toNotify = (Integer)val;
                break;
            case "wmoMember":
                this.wmoMember = (Integer)val;
                break;
            case "agencies":
                this.agencies = val;
                break;
            case "contacts":
                this.contacts = val;
                break;
            case "countryCommitments":
                this.countryCommitments = val;
                break;
            case "cruiseCountries":
                this.cruiseCountries = val;
                break;
            case "gtsCcccs":
                this.gtsCcccs = val;
                break;
            case "meetings":
                this.meetings = val;
                break;
            case "mzmsPtfCountries":
                this.mzmsPtfCountries = val;
                break;
            case "networkCountries":
                this.networkCountries = val;
                break;
            case "programs":
                this.programs = val;
                break;
            case "ptfDeployments":
                this.ptfDeployments = val;
                break;
            case "ptfHardwares":
                this.ptfHardwares = val;
                break;
            case "retrievals":
                this.retrievals = val;
                break;
            case "shipHistories":
                this.shipHistories = val;
                break;
            case "ships":
                this.ships = val;
                break;
            case "userGroupContacts":
                this.userGroupContacts = val;
                break;
            case "weblinks":
                this.weblinks = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.active);
        out.writeObject(this.code2);
        out.writeObject(this.code3);
        out.writeObject(this.color);
        out.writeObject(this.eez);
        out.writeObject(this.id);
        out.writeObject(this.iocMember);
        out.writeObject(this.name);
        out.writeObject(this.nameLong);
        out.writeObject(this.nameShort);
        out.writeObject(this.numcode);
        out.writeObject(this.toNotify);
        out.writeObject(this.wmoMember);
        out.writeObject(this.agencies);
        out.writeObject(this.contacts);
        out.writeObject(this.countryCommitments);
        out.writeObject(this.cruiseCountries);
        out.writeObject(this.gtsCcccs);
        out.writeObject(this.meetings);
        out.writeObject(this.mzmsPtfCountries);
        out.writeObject(this.networkCountries);
        out.writeObject(this.programs);
        out.writeObject(this.ptfDeployments);
        out.writeObject(this.ptfHardwares);
        out.writeObject(this.retrievals);
        out.writeObject(this.shipHistories);
        out.writeObject(this.ships);
        out.writeObject(this.userGroupContacts);
        out.writeObject(this.weblinks);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.active = (Integer)in.readObject();
        this.code2 = (String)in.readObject();
        this.code3 = (String)in.readObject();
        this.color = (String)in.readObject();
        this.eez = (Integer)in.readObject();
        this.id = (Integer)in.readObject();
        this.iocMember = (Integer)in.readObject();
        this.name = (String)in.readObject();
        this.nameLong = (String)in.readObject();
        this.nameShort = (String)in.readObject();
        this.numcode = (Integer)in.readObject();
        this.toNotify = (Integer)in.readObject();
        this.wmoMember = (Integer)in.readObject();
        this.agencies = in.readObject();
        this.contacts = in.readObject();
        this.countryCommitments = in.readObject();
        this.cruiseCountries = in.readObject();
        this.gtsCcccs = in.readObject();
        this.meetings = in.readObject();
        this.mzmsPtfCountries = in.readObject();
        this.networkCountries = in.readObject();
        this.programs = in.readObject();
        this.ptfDeployments = in.readObject();
        this.ptfHardwares = in.readObject();
        this.retrievals = in.readObject();
        this.shipHistories = in.readObject();
        this.ships = in.readObject();
        this.userGroupContacts = in.readObject();
        this.weblinks = in.readObject();
    }

}
