package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

/**
 * Class _Story was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Story extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final NumericProperty<Integer> ID = PropertyFactory.createNumeric("id", Integer.class);
    public static final NumericProperty<Integer> IMAGE_ID = PropertyFactory.createNumeric("imageId", Integer.class);
    public static final StringProperty<String> KEYWORDS = PropertyFactory.createString("keywords", String.class);
    public static final StringProperty<String> PAPER_URL = PropertyFactory.createString("paperUrl", String.class);
    public static final StringProperty<String> POST_URL = PropertyFactory.createString("postUrl", String.class);
    public static final NumericProperty<Integer> PTF_ID = PropertyFactory.createNumeric("ptfId", Integer.class);
    public static final StringProperty<String> SOURCE = PropertyFactory.createString("source", String.class);
    public static final DateProperty<LocalDateTime> STORY_DATE = PropertyFactory.createDate("storyDate", LocalDateTime.class);
    public static final StringProperty<String> TEXT = PropertyFactory.createString("text", String.class);
    public static final StringProperty<String> TITLE = PropertyFactory.createString("title", String.class);

    protected Integer id;
    protected Integer imageId;
    protected String keywords;
    protected String paperUrl;
    protected String postUrl;
    protected Integer ptfId;
    protected String source;
    protected LocalDateTime storyDate;
    protected String text;
    protected String title;


    public void setId(Integer id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Integer getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setImageId(Integer imageId) {
        beforePropertyWrite("imageId", this.imageId, imageId);
        this.imageId = imageId;
    }

    public Integer getImageId() {
        beforePropertyRead("imageId");
        return this.imageId;
    }

    public void setKeywords(String keywords) {
        beforePropertyWrite("keywords", this.keywords, keywords);
        this.keywords = keywords;
    }

    public String getKeywords() {
        beforePropertyRead("keywords");
        return this.keywords;
    }

    public void setPaperUrl(String paperUrl) {
        beforePropertyWrite("paperUrl", this.paperUrl, paperUrl);
        this.paperUrl = paperUrl;
    }

    public String getPaperUrl() {
        beforePropertyRead("paperUrl");
        return this.paperUrl;
    }

    public void setPostUrl(String postUrl) {
        beforePropertyWrite("postUrl", this.postUrl, postUrl);
        this.postUrl = postUrl;
    }

    public String getPostUrl() {
        beforePropertyRead("postUrl");
        return this.postUrl;
    }

    public void setPtfId(Integer ptfId) {
        beforePropertyWrite("ptfId", this.ptfId, ptfId);
        this.ptfId = ptfId;
    }

    public Integer getPtfId() {
        beforePropertyRead("ptfId");
        return this.ptfId;
    }

    public void setSource(String source) {
        beforePropertyWrite("source", this.source, source);
        this.source = source;
    }

    public String getSource() {
        beforePropertyRead("source");
        return this.source;
    }

    public void setStoryDate(LocalDateTime storyDate) {
        beforePropertyWrite("storyDate", this.storyDate, storyDate);
        this.storyDate = storyDate;
    }

    public LocalDateTime getStoryDate() {
        beforePropertyRead("storyDate");
        return this.storyDate;
    }

    public void setText(String text) {
        beforePropertyWrite("text", this.text, text);
        this.text = text;
    }

    public String getText() {
        beforePropertyRead("text");
        return this.text;
    }

    public void setTitle(String title) {
        beforePropertyWrite("title", this.title, title);
        this.title = title;
    }

    public String getTitle() {
        beforePropertyRead("title");
        return this.title;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "id":
                return this.id;
            case "imageId":
                return this.imageId;
            case "keywords":
                return this.keywords;
            case "paperUrl":
                return this.paperUrl;
            case "postUrl":
                return this.postUrl;
            case "ptfId":
                return this.ptfId;
            case "source":
                return this.source;
            case "storyDate":
                return this.storyDate;
            case "text":
                return this.text;
            case "title":
                return this.title;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "id":
                this.id = (Integer)val;
                break;
            case "imageId":
                this.imageId = (Integer)val;
                break;
            case "keywords":
                this.keywords = (String)val;
                break;
            case "paperUrl":
                this.paperUrl = (String)val;
                break;
            case "postUrl":
                this.postUrl = (String)val;
                break;
            case "ptfId":
                this.ptfId = (Integer)val;
                break;
            case "source":
                this.source = (String)val;
                break;
            case "storyDate":
                this.storyDate = (LocalDateTime)val;
                break;
            case "text":
                this.text = (String)val;
                break;
            case "title":
                this.title = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.id);
        out.writeObject(this.imageId);
        out.writeObject(this.keywords);
        out.writeObject(this.paperUrl);
        out.writeObject(this.postUrl);
        out.writeObject(this.ptfId);
        out.writeObject(this.source);
        out.writeObject(this.storyDate);
        out.writeObject(this.text);
        out.writeObject(this.title);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.id = (Integer)in.readObject();
        this.imageId = (Integer)in.readObject();
        this.keywords = (String)in.readObject();
        this.paperUrl = (String)in.readObject();
        this.postUrl = (String)in.readObject();
        this.ptfId = (Integer)in.readObject();
        this.source = (String)in.readObject();
        this.storyDate = (LocalDateTime)in.readObject();
        this.text = (String)in.readObject();
        this.title = (String)in.readObject();
    }

}
