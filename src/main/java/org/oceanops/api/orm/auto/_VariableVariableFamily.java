package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.oceanops.api.orm.Variable;
import org.oceanops.api.orm.VariableFamily;

/**
 * Class _VariableVariableFamily was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _VariableVariableFamily extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String VARIABLE_FAMILY_ID_PK_COLUMN = "VARIABLE_FAMILY_ID";
    public static final String VARIABLE_ID_PK_COLUMN = "VARIABLE_ID";

    public static final NumericProperty<Integer> VARIABLE_FAMILY_ID = PropertyFactory.createNumeric("variableFamilyId", Integer.class);
    public static final NumericProperty<Integer> VARIABLE_ID = PropertyFactory.createNumeric("variableId", Integer.class);
    public static final EntityProperty<Variable> VARIABLE = PropertyFactory.createEntity("variable", Variable.class);
    public static final EntityProperty<VariableFamily> VARIABLE_FAMILY = PropertyFactory.createEntity("variableFamily", VariableFamily.class);

    protected Integer variableFamilyId;
    protected Integer variableId;

    protected Object variable;
    protected Object variableFamily;

    public void setVariableFamilyId(Integer variableFamilyId) {
        beforePropertyWrite("variableFamilyId", this.variableFamilyId, variableFamilyId);
        this.variableFamilyId = variableFamilyId;
    }

    public Integer getVariableFamilyId() {
        beforePropertyRead("variableFamilyId");
        return this.variableFamilyId;
    }

    public void setVariableId(Integer variableId) {
        beforePropertyWrite("variableId", this.variableId, variableId);
        this.variableId = variableId;
    }

    public Integer getVariableId() {
        beforePropertyRead("variableId");
        return this.variableId;
    }

    public void setVariable(Variable variable) {
        setToOneTarget("variable", variable, true);
    }

    public Variable getVariable() {
        return (Variable)readProperty("variable");
    }

    public void setVariableFamily(VariableFamily variableFamily) {
        setToOneTarget("variableFamily", variableFamily, true);
    }

    public VariableFamily getVariableFamily() {
        return (VariableFamily)readProperty("variableFamily");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "variableFamilyId":
                return this.variableFamilyId;
            case "variableId":
                return this.variableId;
            case "variable":
                return this.variable;
            case "variableFamily":
                return this.variableFamily;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "variableFamilyId":
                this.variableFamilyId = (Integer)val;
                break;
            case "variableId":
                this.variableId = (Integer)val;
                break;
            case "variable":
                this.variable = val;
                break;
            case "variableFamily":
                this.variableFamily = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.variableFamilyId);
        out.writeObject(this.variableId);
        out.writeObject(this.variable);
        out.writeObject(this.variableFamily);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.variableFamilyId = (Integer)in.readObject();
        this.variableId = (Integer)in.readObject();
        this.variable = in.readObject();
        this.variableFamily = in.readObject();
    }

}
