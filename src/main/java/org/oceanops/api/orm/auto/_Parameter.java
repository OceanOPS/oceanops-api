package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.api.orm.ParameterPtf;
import org.oceanops.api.orm.ParameterVariable;

/**
 * Class _Parameter was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Parameter extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> ALT_LABEL = PropertyFactory.createString("altLabel", String.class);
    public static final StringProperty<String> DEFINITION = PropertyFactory.createString("definition", String.class);
    public static final StringProperty<String> IDENTIFIER = PropertyFactory.createString("identifier", String.class);
    public static final StringProperty<String> PREF_LABEL = PropertyFactory.createString("prefLabel", String.class);
    public static final DateProperty<LocalDateTime> UPDATE_DATE = PropertyFactory.createDate("updateDate", LocalDateTime.class);
    public static final StringProperty<String> URI = PropertyFactory.createString("uri", String.class);
    public static final ListProperty<ParameterPtf> PARAMETER_PTFS = PropertyFactory.createList("parameterPtfs", ParameterPtf.class);
    public static final ListProperty<ParameterVariable> PARAMETER_VARIABLES = PropertyFactory.createList("parameterVariables", ParameterVariable.class);

    protected String altLabel;
    protected String definition;
    protected String identifier;
    protected String prefLabel;
    protected LocalDateTime updateDate;
    protected String uri;

    protected Object parameterPtfs;
    protected Object parameterVariables;

    public void setAltLabel(String altLabel) {
        beforePropertyWrite("altLabel", this.altLabel, altLabel);
        this.altLabel = altLabel;
    }

    public String getAltLabel() {
        beforePropertyRead("altLabel");
        return this.altLabel;
    }

    public void setDefinition(String definition) {
        beforePropertyWrite("definition", this.definition, definition);
        this.definition = definition;
    }

    public String getDefinition() {
        beforePropertyRead("definition");
        return this.definition;
    }

    public void setIdentifier(String identifier) {
        beforePropertyWrite("identifier", this.identifier, identifier);
        this.identifier = identifier;
    }

    public String getIdentifier() {
        beforePropertyRead("identifier");
        return this.identifier;
    }

    public void setPrefLabel(String prefLabel) {
        beforePropertyWrite("prefLabel", this.prefLabel, prefLabel);
        this.prefLabel = prefLabel;
    }

    public String getPrefLabel() {
        beforePropertyRead("prefLabel");
        return this.prefLabel;
    }

    public void setUpdateDate(LocalDateTime updateDate) {
        beforePropertyWrite("updateDate", this.updateDate, updateDate);
        this.updateDate = updateDate;
    }

    public LocalDateTime getUpdateDate() {
        beforePropertyRead("updateDate");
        return this.updateDate;
    }

    public void setUri(String uri) {
        beforePropertyWrite("uri", this.uri, uri);
        this.uri = uri;
    }

    public String getUri() {
        beforePropertyRead("uri");
        return this.uri;
    }

    public void addToParameterPtfs(ParameterPtf obj) {
        addToManyTarget("parameterPtfs", obj, true);
    }

    public void removeFromParameterPtfs(ParameterPtf obj) {
        removeToManyTarget("parameterPtfs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ParameterPtf> getParameterPtfs() {
        return (List<ParameterPtf>)readProperty("parameterPtfs");
    }

    public void addToParameterVariables(ParameterVariable obj) {
        addToManyTarget("parameterVariables", obj, true);
    }

    public void removeFromParameterVariables(ParameterVariable obj) {
        removeToManyTarget("parameterVariables", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ParameterVariable> getParameterVariables() {
        return (List<ParameterVariable>)readProperty("parameterVariables");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "altLabel":
                return this.altLabel;
            case "definition":
                return this.definition;
            case "identifier":
                return this.identifier;
            case "prefLabel":
                return this.prefLabel;
            case "updateDate":
                return this.updateDate;
            case "uri":
                return this.uri;
            case "parameterPtfs":
                return this.parameterPtfs;
            case "parameterVariables":
                return this.parameterVariables;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "altLabel":
                this.altLabel = (String)val;
                break;
            case "definition":
                this.definition = (String)val;
                break;
            case "identifier":
                this.identifier = (String)val;
                break;
            case "prefLabel":
                this.prefLabel = (String)val;
                break;
            case "updateDate":
                this.updateDate = (LocalDateTime)val;
                break;
            case "uri":
                this.uri = (String)val;
                break;
            case "parameterPtfs":
                this.parameterPtfs = val;
                break;
            case "parameterVariables":
                this.parameterVariables = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.altLabel);
        out.writeObject(this.definition);
        out.writeObject(this.identifier);
        out.writeObject(this.prefLabel);
        out.writeObject(this.updateDate);
        out.writeObject(this.uri);
        out.writeObject(this.parameterPtfs);
        out.writeObject(this.parameterVariables);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.altLabel = (String)in.readObject();
        this.definition = (String)in.readObject();
        this.identifier = (String)in.readObject();
        this.prefLabel = (String)in.readObject();
        this.updateDate = (LocalDateTime)in.readObject();
        this.uri = (String)in.readObject();
        this.parameterPtfs = in.readObject();
        this.parameterVariables = in.readObject();
    }

}
