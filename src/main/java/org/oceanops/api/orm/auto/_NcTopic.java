package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.api.orm.NcNotification;
import org.oceanops.api.orm.NcSubscription;

/**
 * Class _NcTopic was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _NcTopic extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> DESCRIPTION = PropertyFactory.createString("description", String.class);
    public static final NumericProperty<Integer> ID = PropertyFactory.createNumeric("id", Integer.class);
    public static final NumericProperty<Integer> IS_PRIVATE = PropertyFactory.createNumeric("isPrivate", Integer.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final NumericProperty<Integer> PARENT_TOPIC_ID = PropertyFactory.createNumeric("parentTopicId", Integer.class);
    public static final ListProperty<NcNotification> NC_NOTIFICATIONS = PropertyFactory.createList("ncNotifications", NcNotification.class);
    public static final ListProperty<NcSubscription> NC_SUBSCRIPTIONS = PropertyFactory.createList("ncSubscriptions", NcSubscription.class);

    protected String description;
    protected Integer id;
    protected Integer isPrivate;
    protected String name;
    protected Integer parentTopicId;

    protected Object ncNotifications;
    protected Object ncSubscriptions;

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setId(Integer id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Integer getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setIsPrivate(Integer isPrivate) {
        beforePropertyWrite("isPrivate", this.isPrivate, isPrivate);
        this.isPrivate = isPrivate;
    }

    public Integer getIsPrivate() {
        beforePropertyRead("isPrivate");
        return this.isPrivate;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setParentTopicId(Integer parentTopicId) {
        beforePropertyWrite("parentTopicId", this.parentTopicId, parentTopicId);
        this.parentTopicId = parentTopicId;
    }

    public Integer getParentTopicId() {
        beforePropertyRead("parentTopicId");
        return this.parentTopicId;
    }

    public void addToNcNotifications(NcNotification obj) {
        addToManyTarget("ncNotifications", obj, true);
    }

    public void removeFromNcNotifications(NcNotification obj) {
        removeToManyTarget("ncNotifications", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<NcNotification> getNcNotifications() {
        return (List<NcNotification>)readProperty("ncNotifications");
    }

    public void addToNcSubscriptions(NcSubscription obj) {
        addToManyTarget("ncSubscriptions", obj, true);
    }

    public void removeFromNcSubscriptions(NcSubscription obj) {
        removeToManyTarget("ncSubscriptions", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<NcSubscription> getNcSubscriptions() {
        return (List<NcSubscription>)readProperty("ncSubscriptions");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "description":
                return this.description;
            case "id":
                return this.id;
            case "isPrivate":
                return this.isPrivate;
            case "name":
                return this.name;
            case "parentTopicId":
                return this.parentTopicId;
            case "ncNotifications":
                return this.ncNotifications;
            case "ncSubscriptions":
                return this.ncSubscriptions;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "description":
                this.description = (String)val;
                break;
            case "id":
                this.id = (Integer)val;
                break;
            case "isPrivate":
                this.isPrivate = (Integer)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "parentTopicId":
                this.parentTopicId = (Integer)val;
                break;
            case "ncNotifications":
                this.ncNotifications = val;
                break;
            case "ncSubscriptions":
                this.ncSubscriptions = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.description);
        out.writeObject(this.id);
        out.writeObject(this.isPrivate);
        out.writeObject(this.name);
        out.writeObject(this.parentTopicId);
        out.writeObject(this.ncNotifications);
        out.writeObject(this.ncSubscriptions);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.description = (String)in.readObject();
        this.id = (Integer)in.readObject();
        this.isPrivate = (Integer)in.readObject();
        this.name = (String)in.readObject();
        this.parentTopicId = (Integer)in.readObject();
        this.ncNotifications = in.readObject();
        this.ncSubscriptions = in.readObject();
    }

}
