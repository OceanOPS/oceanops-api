package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.api.orm.CruiseVariable;
import org.oceanops.api.orm.Indicator;
import org.oceanops.api.orm.ObsArgoGdacVariable;
import org.oceanops.api.orm.ObsFishingvesselFishydata;
import org.oceanops.api.orm.ObsGlidersGdacVariable;
import org.oceanops.api.orm.ObsGlidersGtsOsmcVariable;
import org.oceanops.api.orm.ObsTsunaGtsOsmcVariable;
import org.oceanops.api.orm.ObsVariable;
import org.oceanops.api.orm.ParameterVariable;
import org.oceanops.api.orm.PtfVariable;
import org.oceanops.api.orm.QcFeedback;
import org.oceanops.api.orm.QcFeedbackVariable;
import org.oceanops.api.orm.SensorType;
import org.oceanops.api.orm.VariableVariableFamily;

/**
 * Class _Variable was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Variable extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> CANONICAL_NAME = PropertyFactory.createString("canonicalName", String.class);
    public static final StringProperty<String> CANONICAL_UNIT = PropertyFactory.createString("canonicalUnit", String.class);
    public static final StringProperty<String> DATA_SOURCE = PropertyFactory.createString("dataSource", String.class);
    public static final StringProperty<String> DESCRIPTION = PropertyFactory.createString("description", String.class);
    public static final NumericProperty<Integer> ID = PropertyFactory.createNumeric("id", Integer.class);
    public static final StringProperty<String> IMOS_REF = PropertyFactory.createString("imosRef", String.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final StringProperty<String> NAME_ALTER = PropertyFactory.createString("nameAlter", String.class);
    public static final StringProperty<String> NAME_SHORT = PropertyFactory.createString("nameShort", String.class);
    public static final StringProperty<String> P02REF = PropertyFactory.createString("p02Ref", String.class);
    public static final StringProperty<String> QC_REF = PropertyFactory.createString("qcRef", String.class);
    public static final StringProperty<String> WIGOS_CODE = PropertyFactory.createString("wigosCode", String.class);
    public static final ListProperty<CruiseVariable> CRUISE_VARIABLES = PropertyFactory.createList("cruiseVariables", CruiseVariable.class);
    public static final ListProperty<Indicator> INDICATORS = PropertyFactory.createList("indicators", Indicator.class);
    public static final ListProperty<ObsArgoGdacVariable> OBS_ARGO_GDAC_VARIABLES = PropertyFactory.createList("obsArgoGdacVariables", ObsArgoGdacVariable.class);
    public static final ListProperty<ObsFishingvesselFishydata> OBS_FISHINGVESSEL_FISHYDATAS = PropertyFactory.createList("obsFishingvesselFishydatas", ObsFishingvesselFishydata.class);
    public static final ListProperty<ObsGlidersGdacVariable> OBS_GLIDERS_GDAC_VARIABLES = PropertyFactory.createList("obsGlidersGdacVariables", ObsGlidersGdacVariable.class);
    public static final ListProperty<ObsGlidersGtsOsmcVariable> OBS_GLIDERS_GTS_OSMC_VARIABLES = PropertyFactory.createList("obsGlidersGtsOsmcVariables", ObsGlidersGtsOsmcVariable.class);
    public static final ListProperty<ObsTsunaGtsOsmcVariable> OBS_TSUNA_GTS_OSMC_VARIABLES = PropertyFactory.createList("obsTsunaGtsOsmcVariables", ObsTsunaGtsOsmcVariable.class);
    public static final ListProperty<ObsVariable> OBS_VARIABLES = PropertyFactory.createList("obsVariables", ObsVariable.class);
    public static final ListProperty<ParameterVariable> PARAMETER_VARIABLES = PropertyFactory.createList("parameterVariables", ParameterVariable.class);
    public static final ListProperty<PtfVariable> PTF_VARIABLES = PropertyFactory.createList("ptfVariables", PtfVariable.class);
    public static final ListProperty<QcFeedbackVariable> QC_FEEDBACK_VARIABLES = PropertyFactory.createList("qcFeedbackVariables", QcFeedbackVariable.class);
    public static final ListProperty<QcFeedback> QC_FEEDBACKS = PropertyFactory.createList("qcFeedbacks", QcFeedback.class);
    public static final ListProperty<SensorType> SENSOR_TYPES = PropertyFactory.createList("sensorTypes", SensorType.class);
    public static final ListProperty<VariableVariableFamily> VARIABLE_VARIABLE_FAMILIES = PropertyFactory.createList("variableVariableFamilies", VariableVariableFamily.class);

    protected String canonicalName;
    protected String canonicalUnit;
    protected String dataSource;
    protected String description;
    protected Integer id;
    protected String imosRef;
    protected String name;
    protected String nameAlter;
    protected String nameShort;
    protected String p02Ref;
    protected String qcRef;
    protected String wigosCode;

    protected Object cruiseVariables;
    protected Object indicators;
    protected Object obsArgoGdacVariables;
    protected Object obsFishingvesselFishydatas;
    protected Object obsGlidersGdacVariables;
    protected Object obsGlidersGtsOsmcVariables;
    protected Object obsTsunaGtsOsmcVariables;
    protected Object obsVariables;
    protected Object parameterVariables;
    protected Object ptfVariables;
    protected Object qcFeedbackVariables;
    protected Object qcFeedbacks;
    protected Object sensorTypes;
    protected Object variableVariableFamilies;

    public void setCanonicalName(String canonicalName) {
        beforePropertyWrite("canonicalName", this.canonicalName, canonicalName);
        this.canonicalName = canonicalName;
    }

    public String getCanonicalName() {
        beforePropertyRead("canonicalName");
        return this.canonicalName;
    }

    public void setCanonicalUnit(String canonicalUnit) {
        beforePropertyWrite("canonicalUnit", this.canonicalUnit, canonicalUnit);
        this.canonicalUnit = canonicalUnit;
    }

    public String getCanonicalUnit() {
        beforePropertyRead("canonicalUnit");
        return this.canonicalUnit;
    }

    public void setDataSource(String dataSource) {
        beforePropertyWrite("dataSource", this.dataSource, dataSource);
        this.dataSource = dataSource;
    }

    public String getDataSource() {
        beforePropertyRead("dataSource");
        return this.dataSource;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setId(Integer id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Integer getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setImosRef(String imosRef) {
        beforePropertyWrite("imosRef", this.imosRef, imosRef);
        this.imosRef = imosRef;
    }

    public String getImosRef() {
        beforePropertyRead("imosRef");
        return this.imosRef;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setNameAlter(String nameAlter) {
        beforePropertyWrite("nameAlter", this.nameAlter, nameAlter);
        this.nameAlter = nameAlter;
    }

    public String getNameAlter() {
        beforePropertyRead("nameAlter");
        return this.nameAlter;
    }

    public void setNameShort(String nameShort) {
        beforePropertyWrite("nameShort", this.nameShort, nameShort);
        this.nameShort = nameShort;
    }

    public String getNameShort() {
        beforePropertyRead("nameShort");
        return this.nameShort;
    }

    public void setP02Ref(String p02Ref) {
        beforePropertyWrite("p02Ref", this.p02Ref, p02Ref);
        this.p02Ref = p02Ref;
    }

    public String getP02Ref() {
        beforePropertyRead("p02Ref");
        return this.p02Ref;
    }

    public void setQcRef(String qcRef) {
        beforePropertyWrite("qcRef", this.qcRef, qcRef);
        this.qcRef = qcRef;
    }

    public String getQcRef() {
        beforePropertyRead("qcRef");
        return this.qcRef;
    }

    public void setWigosCode(String wigosCode) {
        beforePropertyWrite("wigosCode", this.wigosCode, wigosCode);
        this.wigosCode = wigosCode;
    }

    public String getWigosCode() {
        beforePropertyRead("wigosCode");
        return this.wigosCode;
    }

    public void addToCruiseVariables(CruiseVariable obj) {
        addToManyTarget("cruiseVariables", obj, true);
    }

    public void removeFromCruiseVariables(CruiseVariable obj) {
        removeToManyTarget("cruiseVariables", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CruiseVariable> getCruiseVariables() {
        return (List<CruiseVariable>)readProperty("cruiseVariables");
    }

    public void addToIndicators(Indicator obj) {
        addToManyTarget("indicators", obj, true);
    }

    public void removeFromIndicators(Indicator obj) {
        removeToManyTarget("indicators", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Indicator> getIndicators() {
        return (List<Indicator>)readProperty("indicators");
    }

    public void addToObsArgoGdacVariables(ObsArgoGdacVariable obj) {
        addToManyTarget("obsArgoGdacVariables", obj, true);
    }

    public void removeFromObsArgoGdacVariables(ObsArgoGdacVariable obj) {
        removeToManyTarget("obsArgoGdacVariables", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ObsArgoGdacVariable> getObsArgoGdacVariables() {
        return (List<ObsArgoGdacVariable>)readProperty("obsArgoGdacVariables");
    }

    public void addToObsFishingvesselFishydatas(ObsFishingvesselFishydata obj) {
        addToManyTarget("obsFishingvesselFishydatas", obj, true);
    }

    public void removeFromObsFishingvesselFishydatas(ObsFishingvesselFishydata obj) {
        removeToManyTarget("obsFishingvesselFishydatas", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ObsFishingvesselFishydata> getObsFishingvesselFishydatas() {
        return (List<ObsFishingvesselFishydata>)readProperty("obsFishingvesselFishydatas");
    }

    public void addToObsGlidersGdacVariables(ObsGlidersGdacVariable obj) {
        addToManyTarget("obsGlidersGdacVariables", obj, true);
    }

    public void removeFromObsGlidersGdacVariables(ObsGlidersGdacVariable obj) {
        removeToManyTarget("obsGlidersGdacVariables", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ObsGlidersGdacVariable> getObsGlidersGdacVariables() {
        return (List<ObsGlidersGdacVariable>)readProperty("obsGlidersGdacVariables");
    }

    public void addToObsGlidersGtsOsmcVariables(ObsGlidersGtsOsmcVariable obj) {
        addToManyTarget("obsGlidersGtsOsmcVariables", obj, true);
    }

    public void removeFromObsGlidersGtsOsmcVariables(ObsGlidersGtsOsmcVariable obj) {
        removeToManyTarget("obsGlidersGtsOsmcVariables", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ObsGlidersGtsOsmcVariable> getObsGlidersGtsOsmcVariables() {
        return (List<ObsGlidersGtsOsmcVariable>)readProperty("obsGlidersGtsOsmcVariables");
    }

    public void addToObsTsunaGtsOsmcVariables(ObsTsunaGtsOsmcVariable obj) {
        addToManyTarget("obsTsunaGtsOsmcVariables", obj, true);
    }

    public void removeFromObsTsunaGtsOsmcVariables(ObsTsunaGtsOsmcVariable obj) {
        removeToManyTarget("obsTsunaGtsOsmcVariables", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ObsTsunaGtsOsmcVariable> getObsTsunaGtsOsmcVariables() {
        return (List<ObsTsunaGtsOsmcVariable>)readProperty("obsTsunaGtsOsmcVariables");
    }

    public void addToObsVariables(ObsVariable obj) {
        addToManyTarget("obsVariables", obj, true);
    }

    public void removeFromObsVariables(ObsVariable obj) {
        removeToManyTarget("obsVariables", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ObsVariable> getObsVariables() {
        return (List<ObsVariable>)readProperty("obsVariables");
    }

    public void addToParameterVariables(ParameterVariable obj) {
        addToManyTarget("parameterVariables", obj, true);
    }

    public void removeFromParameterVariables(ParameterVariable obj) {
        removeToManyTarget("parameterVariables", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ParameterVariable> getParameterVariables() {
        return (List<ParameterVariable>)readProperty("parameterVariables");
    }

    public void addToPtfVariables(PtfVariable obj) {
        addToManyTarget("ptfVariables", obj, true);
    }

    public void removeFromPtfVariables(PtfVariable obj) {
        removeToManyTarget("ptfVariables", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfVariable> getPtfVariables() {
        return (List<PtfVariable>)readProperty("ptfVariables");
    }

    public void addToQcFeedbackVariables(QcFeedbackVariable obj) {
        addToManyTarget("qcFeedbackVariables", obj, true);
    }

    public void removeFromQcFeedbackVariables(QcFeedbackVariable obj) {
        removeToManyTarget("qcFeedbackVariables", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<QcFeedbackVariable> getQcFeedbackVariables() {
        return (List<QcFeedbackVariable>)readProperty("qcFeedbackVariables");
    }

    public void addToQcFeedbacks(QcFeedback obj) {
        addToManyTarget("qcFeedbacks", obj, true);
    }

    public void removeFromQcFeedbacks(QcFeedback obj) {
        removeToManyTarget("qcFeedbacks", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<QcFeedback> getQcFeedbacks() {
        return (List<QcFeedback>)readProperty("qcFeedbacks");
    }

    public void addToSensorTypes(SensorType obj) {
        addToManyTarget("sensorTypes", obj, true);
    }

    public void removeFromSensorTypes(SensorType obj) {
        removeToManyTarget("sensorTypes", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<SensorType> getSensorTypes() {
        return (List<SensorType>)readProperty("sensorTypes");
    }

    public void addToVariableVariableFamilies(VariableVariableFamily obj) {
        addToManyTarget("variableVariableFamilies", obj, true);
    }

    public void removeFromVariableVariableFamilies(VariableVariableFamily obj) {
        removeToManyTarget("variableVariableFamilies", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<VariableVariableFamily> getVariableVariableFamilies() {
        return (List<VariableVariableFamily>)readProperty("variableVariableFamilies");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "canonicalName":
                return this.canonicalName;
            case "canonicalUnit":
                return this.canonicalUnit;
            case "dataSource":
                return this.dataSource;
            case "description":
                return this.description;
            case "id":
                return this.id;
            case "imosRef":
                return this.imosRef;
            case "name":
                return this.name;
            case "nameAlter":
                return this.nameAlter;
            case "nameShort":
                return this.nameShort;
            case "p02Ref":
                return this.p02Ref;
            case "qcRef":
                return this.qcRef;
            case "wigosCode":
                return this.wigosCode;
            case "cruiseVariables":
                return this.cruiseVariables;
            case "indicators":
                return this.indicators;
            case "obsArgoGdacVariables":
                return this.obsArgoGdacVariables;
            case "obsFishingvesselFishydatas":
                return this.obsFishingvesselFishydatas;
            case "obsGlidersGdacVariables":
                return this.obsGlidersGdacVariables;
            case "obsGlidersGtsOsmcVariables":
                return this.obsGlidersGtsOsmcVariables;
            case "obsTsunaGtsOsmcVariables":
                return this.obsTsunaGtsOsmcVariables;
            case "obsVariables":
                return this.obsVariables;
            case "parameterVariables":
                return this.parameterVariables;
            case "ptfVariables":
                return this.ptfVariables;
            case "qcFeedbackVariables":
                return this.qcFeedbackVariables;
            case "qcFeedbacks":
                return this.qcFeedbacks;
            case "sensorTypes":
                return this.sensorTypes;
            case "variableVariableFamilies":
                return this.variableVariableFamilies;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "canonicalName":
                this.canonicalName = (String)val;
                break;
            case "canonicalUnit":
                this.canonicalUnit = (String)val;
                break;
            case "dataSource":
                this.dataSource = (String)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "id":
                this.id = (Integer)val;
                break;
            case "imosRef":
                this.imosRef = (String)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "nameAlter":
                this.nameAlter = (String)val;
                break;
            case "nameShort":
                this.nameShort = (String)val;
                break;
            case "p02Ref":
                this.p02Ref = (String)val;
                break;
            case "qcRef":
                this.qcRef = (String)val;
                break;
            case "wigosCode":
                this.wigosCode = (String)val;
                break;
            case "cruiseVariables":
                this.cruiseVariables = val;
                break;
            case "indicators":
                this.indicators = val;
                break;
            case "obsArgoGdacVariables":
                this.obsArgoGdacVariables = val;
                break;
            case "obsFishingvesselFishydatas":
                this.obsFishingvesselFishydatas = val;
                break;
            case "obsGlidersGdacVariables":
                this.obsGlidersGdacVariables = val;
                break;
            case "obsGlidersGtsOsmcVariables":
                this.obsGlidersGtsOsmcVariables = val;
                break;
            case "obsTsunaGtsOsmcVariables":
                this.obsTsunaGtsOsmcVariables = val;
                break;
            case "obsVariables":
                this.obsVariables = val;
                break;
            case "parameterVariables":
                this.parameterVariables = val;
                break;
            case "ptfVariables":
                this.ptfVariables = val;
                break;
            case "qcFeedbackVariables":
                this.qcFeedbackVariables = val;
                break;
            case "qcFeedbacks":
                this.qcFeedbacks = val;
                break;
            case "sensorTypes":
                this.sensorTypes = val;
                break;
            case "variableVariableFamilies":
                this.variableVariableFamilies = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.canonicalName);
        out.writeObject(this.canonicalUnit);
        out.writeObject(this.dataSource);
        out.writeObject(this.description);
        out.writeObject(this.id);
        out.writeObject(this.imosRef);
        out.writeObject(this.name);
        out.writeObject(this.nameAlter);
        out.writeObject(this.nameShort);
        out.writeObject(this.p02Ref);
        out.writeObject(this.qcRef);
        out.writeObject(this.wigosCode);
        out.writeObject(this.cruiseVariables);
        out.writeObject(this.indicators);
        out.writeObject(this.obsArgoGdacVariables);
        out.writeObject(this.obsFishingvesselFishydatas);
        out.writeObject(this.obsGlidersGdacVariables);
        out.writeObject(this.obsGlidersGtsOsmcVariables);
        out.writeObject(this.obsTsunaGtsOsmcVariables);
        out.writeObject(this.obsVariables);
        out.writeObject(this.parameterVariables);
        out.writeObject(this.ptfVariables);
        out.writeObject(this.qcFeedbackVariables);
        out.writeObject(this.qcFeedbacks);
        out.writeObject(this.sensorTypes);
        out.writeObject(this.variableVariableFamilies);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.canonicalName = (String)in.readObject();
        this.canonicalUnit = (String)in.readObject();
        this.dataSource = (String)in.readObject();
        this.description = (String)in.readObject();
        this.id = (Integer)in.readObject();
        this.imosRef = (String)in.readObject();
        this.name = (String)in.readObject();
        this.nameAlter = (String)in.readObject();
        this.nameShort = (String)in.readObject();
        this.p02Ref = (String)in.readObject();
        this.qcRef = (String)in.readObject();
        this.wigosCode = (String)in.readObject();
        this.cruiseVariables = in.readObject();
        this.indicators = in.readObject();
        this.obsArgoGdacVariables = in.readObject();
        this.obsFishingvesselFishydatas = in.readObject();
        this.obsGlidersGdacVariables = in.readObject();
        this.obsGlidersGtsOsmcVariables = in.readObject();
        this.obsTsunaGtsOsmcVariables = in.readObject();
        this.obsVariables = in.readObject();
        this.parameterVariables = in.readObject();
        this.ptfVariables = in.readObject();
        this.qcFeedbackVariables = in.readObject();
        this.qcFeedbacks = in.readObject();
        this.sensorTypes = in.readObject();
        this.variableVariableFamilies = in.readObject();
    }

}
