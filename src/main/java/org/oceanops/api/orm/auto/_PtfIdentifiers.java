package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.api.orm.Ptf;

/**
 * Class _PtfIdentifiers was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PtfIdentifiers extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> DATACENTER_REF = PropertyFactory.createString("datacenterRef", String.class);
    public static final StringProperty<String> ESURFMAR_REF = PropertyFactory.createString("esurfmarRef", String.class);
    public static final StringProperty<String> GLOSS_REF = PropertyFactory.createString("glossRef", String.class);
    public static final NumericProperty<Integer> ID = PropertyFactory.createNumeric("id", Integer.class);
    public static final StringProperty<String> IMO_REF = PropertyFactory.createString("imoRef", String.class);
    public static final StringProperty<String> INTERNAL_REF = PropertyFactory.createString("internalRef", String.class);
    public static final StringProperty<String> OCEANSITES_REF = PropertyFactory.createString("oceansitesRef", String.class);
    public static final StringProperty<String> ODAS_REF = PropertyFactory.createString("odasRef", String.class);
    public static final StringProperty<String> OPERATOR_REF = PropertyFactory.createString("operatorRef", String.class);
    public static final StringProperty<String> QR_CODE = PropertyFactory.createString("qrCode", String.class);
    public static final StringProperty<String> SEADATANET_REF = PropertyFactory.createString("seadatanetRef", String.class);
    public static final StringProperty<String> WIGOS_REF = PropertyFactory.createString("wigosRef", String.class);
    public static final ListProperty<Ptf> PTFS = PropertyFactory.createList("ptfs", Ptf.class);

    protected String datacenterRef;
    protected String esurfmarRef;
    protected String glossRef;
    protected Integer id;
    protected String imoRef;
    protected String internalRef;
    protected String oceansitesRef;
    protected String odasRef;
    protected String operatorRef;
    protected String qrCode;
    protected String seadatanetRef;
    protected String wigosRef;

    protected Object ptfs;

    public void setDatacenterRef(String datacenterRef) {
        beforePropertyWrite("datacenterRef", this.datacenterRef, datacenterRef);
        this.datacenterRef = datacenterRef;
    }

    public String getDatacenterRef() {
        beforePropertyRead("datacenterRef");
        return this.datacenterRef;
    }

    public void setEsurfmarRef(String esurfmarRef) {
        beforePropertyWrite("esurfmarRef", this.esurfmarRef, esurfmarRef);
        this.esurfmarRef = esurfmarRef;
    }

    public String getEsurfmarRef() {
        beforePropertyRead("esurfmarRef");
        return this.esurfmarRef;
    }

    public void setGlossRef(String glossRef) {
        beforePropertyWrite("glossRef", this.glossRef, glossRef);
        this.glossRef = glossRef;
    }

    public String getGlossRef() {
        beforePropertyRead("glossRef");
        return this.glossRef;
    }

    public void setId(Integer id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Integer getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setImoRef(String imoRef) {
        beforePropertyWrite("imoRef", this.imoRef, imoRef);
        this.imoRef = imoRef;
    }

    public String getImoRef() {
        beforePropertyRead("imoRef");
        return this.imoRef;
    }

    public void setInternalRef(String internalRef) {
        beforePropertyWrite("internalRef", this.internalRef, internalRef);
        this.internalRef = internalRef;
    }

    public String getInternalRef() {
        beforePropertyRead("internalRef");
        return this.internalRef;
    }

    public void setOceansitesRef(String oceansitesRef) {
        beforePropertyWrite("oceansitesRef", this.oceansitesRef, oceansitesRef);
        this.oceansitesRef = oceansitesRef;
    }

    public String getOceansitesRef() {
        beforePropertyRead("oceansitesRef");
        return this.oceansitesRef;
    }

    public void setOdasRef(String odasRef) {
        beforePropertyWrite("odasRef", this.odasRef, odasRef);
        this.odasRef = odasRef;
    }

    public String getOdasRef() {
        beforePropertyRead("odasRef");
        return this.odasRef;
    }

    public void setOperatorRef(String operatorRef) {
        beforePropertyWrite("operatorRef", this.operatorRef, operatorRef);
        this.operatorRef = operatorRef;
    }

    public String getOperatorRef() {
        beforePropertyRead("operatorRef");
        return this.operatorRef;
    }

    public void setQrCode(String qrCode) {
        beforePropertyWrite("qrCode", this.qrCode, qrCode);
        this.qrCode = qrCode;
    }

    public String getQrCode() {
        beforePropertyRead("qrCode");
        return this.qrCode;
    }

    public void setSeadatanetRef(String seadatanetRef) {
        beforePropertyWrite("seadatanetRef", this.seadatanetRef, seadatanetRef);
        this.seadatanetRef = seadatanetRef;
    }

    public String getSeadatanetRef() {
        beforePropertyRead("seadatanetRef");
        return this.seadatanetRef;
    }

    public void setWigosRef(String wigosRef) {
        beforePropertyWrite("wigosRef", this.wigosRef, wigosRef);
        this.wigosRef = wigosRef;
    }

    public String getWigosRef() {
        beforePropertyRead("wigosRef");
        return this.wigosRef;
    }

    public void addToPtfs(Ptf obj) {
        addToManyTarget("ptfs", obj, true);
    }

    public void removeFromPtfs(Ptf obj) {
        removeToManyTarget("ptfs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Ptf> getPtfs() {
        return (List<Ptf>)readProperty("ptfs");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "datacenterRef":
                return this.datacenterRef;
            case "esurfmarRef":
                return this.esurfmarRef;
            case "glossRef":
                return this.glossRef;
            case "id":
                return this.id;
            case "imoRef":
                return this.imoRef;
            case "internalRef":
                return this.internalRef;
            case "oceansitesRef":
                return this.oceansitesRef;
            case "odasRef":
                return this.odasRef;
            case "operatorRef":
                return this.operatorRef;
            case "qrCode":
                return this.qrCode;
            case "seadatanetRef":
                return this.seadatanetRef;
            case "wigosRef":
                return this.wigosRef;
            case "ptfs":
                return this.ptfs;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "datacenterRef":
                this.datacenterRef = (String)val;
                break;
            case "esurfmarRef":
                this.esurfmarRef = (String)val;
                break;
            case "glossRef":
                this.glossRef = (String)val;
                break;
            case "id":
                this.id = (Integer)val;
                break;
            case "imoRef":
                this.imoRef = (String)val;
                break;
            case "internalRef":
                this.internalRef = (String)val;
                break;
            case "oceansitesRef":
                this.oceansitesRef = (String)val;
                break;
            case "odasRef":
                this.odasRef = (String)val;
                break;
            case "operatorRef":
                this.operatorRef = (String)val;
                break;
            case "qrCode":
                this.qrCode = (String)val;
                break;
            case "seadatanetRef":
                this.seadatanetRef = (String)val;
                break;
            case "wigosRef":
                this.wigosRef = (String)val;
                break;
            case "ptfs":
                this.ptfs = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.datacenterRef);
        out.writeObject(this.esurfmarRef);
        out.writeObject(this.glossRef);
        out.writeObject(this.id);
        out.writeObject(this.imoRef);
        out.writeObject(this.internalRef);
        out.writeObject(this.oceansitesRef);
        out.writeObject(this.odasRef);
        out.writeObject(this.operatorRef);
        out.writeObject(this.qrCode);
        out.writeObject(this.seadatanetRef);
        out.writeObject(this.wigosRef);
        out.writeObject(this.ptfs);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.datacenterRef = (String)in.readObject();
        this.esurfmarRef = (String)in.readObject();
        this.glossRef = (String)in.readObject();
        this.id = (Integer)in.readObject();
        this.imoRef = (String)in.readObject();
        this.internalRef = (String)in.readObject();
        this.oceansitesRef = (String)in.readObject();
        this.odasRef = (String)in.readObject();
        this.operatorRef = (String)in.readObject();
        this.qrCode = (String)in.readObject();
        this.seadatanetRef = (String)in.readObject();
        this.wigosRef = (String)in.readObject();
        this.ptfs = in.readObject();
    }

}
