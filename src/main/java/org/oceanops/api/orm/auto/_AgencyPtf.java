package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.oceanops.api.orm.Agency;
import org.oceanops.api.orm.AgencyRole;
import org.oceanops.api.orm.DacType;
import org.oceanops.api.orm.Ptf;

/**
 * Class _AgencyPtf was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _AgencyPtf extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final NumericProperty<Integer> ASSEMBLY_TYPE_ID = PropertyFactory.createNumeric("assemblyTypeId", Integer.class);
    public static final EntityProperty<Agency> AGENCY = PropertyFactory.createEntity("agency", Agency.class);
    public static final EntityProperty<AgencyRole> AGENCY_ROLE = PropertyFactory.createEntity("agencyRole", AgencyRole.class);
    public static final EntityProperty<DacType> DAC_TYPE = PropertyFactory.createEntity("dacType", DacType.class);
    public static final EntityProperty<Ptf> PTF = PropertyFactory.createEntity("ptf", Ptf.class);

    protected Integer assemblyTypeId;

    protected Object agency;
    protected Object agencyRole;
    protected Object dacType;
    protected Object ptf;

    public void setAssemblyTypeId(Integer assemblyTypeId) {
        beforePropertyWrite("assemblyTypeId", this.assemblyTypeId, assemblyTypeId);
        this.assemblyTypeId = assemblyTypeId;
    }

    public Integer getAssemblyTypeId() {
        beforePropertyRead("assemblyTypeId");
        return this.assemblyTypeId;
    }

    public void setAgency(Agency agency) {
        setToOneTarget("agency", agency, true);
    }

    public Agency getAgency() {
        return (Agency)readProperty("agency");
    }

    public void setAgencyRole(AgencyRole agencyRole) {
        setToOneTarget("agencyRole", agencyRole, true);
    }

    public AgencyRole getAgencyRole() {
        return (AgencyRole)readProperty("agencyRole");
    }

    public void setDacType(DacType dacType) {
        setToOneTarget("dacType", dacType, true);
    }

    public DacType getDacType() {
        return (DacType)readProperty("dacType");
    }

    public void setPtf(Ptf ptf) {
        setToOneTarget("ptf", ptf, true);
    }

    public Ptf getPtf() {
        return (Ptf)readProperty("ptf");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "assemblyTypeId":
                return this.assemblyTypeId;
            case "agency":
                return this.agency;
            case "agencyRole":
                return this.agencyRole;
            case "dacType":
                return this.dacType;
            case "ptf":
                return this.ptf;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "assemblyTypeId":
                this.assemblyTypeId = (Integer)val;
                break;
            case "agency":
                this.agency = val;
                break;
            case "agencyRole":
                this.agencyRole = val;
                break;
            case "dacType":
                this.dacType = val;
                break;
            case "ptf":
                this.ptf = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.assemblyTypeId);
        out.writeObject(this.agency);
        out.writeObject(this.agencyRole);
        out.writeObject(this.dacType);
        out.writeObject(this.ptf);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.assemblyTypeId = (Integer)in.readObject();
        this.agency = in.readObject();
        this.agencyRole = in.readObject();
        this.dacType = in.readObject();
        this.ptf = in.readObject();
    }

}
