package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.api.orm.Country;
import org.oceanops.api.orm.Cruise;
import org.oceanops.api.orm.PostRetrievalStatus;
import org.oceanops.api.orm.Ptf;
import org.oceanops.api.orm.RetrievalStatus;
import org.oceanops.api.orm.Ship;

/**
 * Class _Retrieval was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Retrieval extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> CONTACT = PropertyFactory.createString("contact", String.class);
    public static final StringProperty<String> CRUISE_NAME = PropertyFactory.createString("cruiseName", String.class);
    public static final StringProperty<String> DESCRIPTION = PropertyFactory.createString("description", String.class);
    public static final StringProperty<String> EMAIL = PropertyFactory.createString("email", String.class);
    public static final DateProperty<LocalDateTime> END_DATE = PropertyFactory.createDate("endDate", LocalDateTime.class);
    public static final NumericProperty<Integer> ID = PropertyFactory.createNumeric("id", Integer.class);
    public static final NumericProperty<Double> LAT = PropertyFactory.createNumeric("lat", Double.class);
    public static final StringProperty<String> LOCAL_CONTACT_INFO = PropertyFactory.createString("localContactInfo", String.class);
    public static final NumericProperty<Double> LON = PropertyFactory.createNumeric("lon", Double.class);
    public static final StringProperty<String> REF_STATION_ID = PropertyFactory.createString("refStationId", String.class);
    public static final StringProperty<String> REGION = PropertyFactory.createString("region", String.class);
    public static final DateProperty<LocalDateTime> START_DATE = PropertyFactory.createDate("startDate", LocalDateTime.class);
    public static final StringProperty<String> TEL = PropertyFactory.createString("tel", String.class);
    public static final EntityProperty<Country> COUNTRY = PropertyFactory.createEntity("country", Country.class);
    public static final EntityProperty<Cruise> CRUISE = PropertyFactory.createEntity("cruise", Cruise.class);
    public static final EntityProperty<PostRetrievalStatus> POST_RETRIEVAL_STATUS = PropertyFactory.createEntity("postRetrievalStatus", PostRetrievalStatus.class);
    public static final ListProperty<Ptf> PTFS = PropertyFactory.createList("ptfs", Ptf.class);
    public static final EntityProperty<RetrievalStatus> RETRIEVAL_STATUS = PropertyFactory.createEntity("retrievalStatus", RetrievalStatus.class);
    public static final EntityProperty<Ship> SHIP = PropertyFactory.createEntity("ship", Ship.class);

    protected String contact;
    protected String cruiseName;
    protected String description;
    protected String email;
    protected LocalDateTime endDate;
    protected Integer id;
    protected Double lat;
    protected String localContactInfo;
    protected Double lon;
    protected String refStationId;
    protected String region;
    protected LocalDateTime startDate;
    protected String tel;

    protected Object country;
    protected Object cruise;
    protected Object postRetrievalStatus;
    protected Object ptfs;
    protected Object retrievalStatus;
    protected Object ship;

    public void setContact(String contact) {
        beforePropertyWrite("contact", this.contact, contact);
        this.contact = contact;
    }

    public String getContact() {
        beforePropertyRead("contact");
        return this.contact;
    }

    public void setCruiseName(String cruiseName) {
        beforePropertyWrite("cruiseName", this.cruiseName, cruiseName);
        this.cruiseName = cruiseName;
    }

    public String getCruiseName() {
        beforePropertyRead("cruiseName");
        return this.cruiseName;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setEmail(String email) {
        beforePropertyWrite("email", this.email, email);
        this.email = email;
    }

    public String getEmail() {
        beforePropertyRead("email");
        return this.email;
    }

    public void setEndDate(LocalDateTime endDate) {
        beforePropertyWrite("endDate", this.endDate, endDate);
        this.endDate = endDate;
    }

    public LocalDateTime getEndDate() {
        beforePropertyRead("endDate");
        return this.endDate;
    }

    public void setId(Integer id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Integer getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setLat(Double lat) {
        beforePropertyWrite("lat", this.lat, lat);
        this.lat = lat;
    }

    public Double getLat() {
        beforePropertyRead("lat");
        return this.lat;
    }

    public void setLocalContactInfo(String localContactInfo) {
        beforePropertyWrite("localContactInfo", this.localContactInfo, localContactInfo);
        this.localContactInfo = localContactInfo;
    }

    public String getLocalContactInfo() {
        beforePropertyRead("localContactInfo");
        return this.localContactInfo;
    }

    public void setLon(Double lon) {
        beforePropertyWrite("lon", this.lon, lon);
        this.lon = lon;
    }

    public Double getLon() {
        beforePropertyRead("lon");
        return this.lon;
    }

    public void setRefStationId(String refStationId) {
        beforePropertyWrite("refStationId", this.refStationId, refStationId);
        this.refStationId = refStationId;
    }

    public String getRefStationId() {
        beforePropertyRead("refStationId");
        return this.refStationId;
    }

    public void setRegion(String region) {
        beforePropertyWrite("region", this.region, region);
        this.region = region;
    }

    public String getRegion() {
        beforePropertyRead("region");
        return this.region;
    }

    public void setStartDate(LocalDateTime startDate) {
        beforePropertyWrite("startDate", this.startDate, startDate);
        this.startDate = startDate;
    }

    public LocalDateTime getStartDate() {
        beforePropertyRead("startDate");
        return this.startDate;
    }

    public void setTel(String tel) {
        beforePropertyWrite("tel", this.tel, tel);
        this.tel = tel;
    }

    public String getTel() {
        beforePropertyRead("tel");
        return this.tel;
    }

    public void setCountry(Country country) {
        setToOneTarget("country", country, true);
    }

    public Country getCountry() {
        return (Country)readProperty("country");
    }

    public void setCruise(Cruise cruise) {
        setToOneTarget("cruise", cruise, true);
    }

    public Cruise getCruise() {
        return (Cruise)readProperty("cruise");
    }

    public void setPostRetrievalStatus(PostRetrievalStatus postRetrievalStatus) {
        setToOneTarget("postRetrievalStatus", postRetrievalStatus, true);
    }

    public PostRetrievalStatus getPostRetrievalStatus() {
        return (PostRetrievalStatus)readProperty("postRetrievalStatus");
    }

    public void addToPtfs(Ptf obj) {
        addToManyTarget("ptfs", obj, true);
    }

    public void removeFromPtfs(Ptf obj) {
        removeToManyTarget("ptfs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Ptf> getPtfs() {
        return (List<Ptf>)readProperty("ptfs");
    }

    public void setRetrievalStatus(RetrievalStatus retrievalStatus) {
        setToOneTarget("retrievalStatus", retrievalStatus, true);
    }

    public RetrievalStatus getRetrievalStatus() {
        return (RetrievalStatus)readProperty("retrievalStatus");
    }

    public void setShip(Ship ship) {
        setToOneTarget("ship", ship, true);
    }

    public Ship getShip() {
        return (Ship)readProperty("ship");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "contact":
                return this.contact;
            case "cruiseName":
                return this.cruiseName;
            case "description":
                return this.description;
            case "email":
                return this.email;
            case "endDate":
                return this.endDate;
            case "id":
                return this.id;
            case "lat":
                return this.lat;
            case "localContactInfo":
                return this.localContactInfo;
            case "lon":
                return this.lon;
            case "refStationId":
                return this.refStationId;
            case "region":
                return this.region;
            case "startDate":
                return this.startDate;
            case "tel":
                return this.tel;
            case "country":
                return this.country;
            case "cruise":
                return this.cruise;
            case "postRetrievalStatus":
                return this.postRetrievalStatus;
            case "ptfs":
                return this.ptfs;
            case "retrievalStatus":
                return this.retrievalStatus;
            case "ship":
                return this.ship;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "contact":
                this.contact = (String)val;
                break;
            case "cruiseName":
                this.cruiseName = (String)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "email":
                this.email = (String)val;
                break;
            case "endDate":
                this.endDate = (LocalDateTime)val;
                break;
            case "id":
                this.id = (Integer)val;
                break;
            case "lat":
                this.lat = (Double)val;
                break;
            case "localContactInfo":
                this.localContactInfo = (String)val;
                break;
            case "lon":
                this.lon = (Double)val;
                break;
            case "refStationId":
                this.refStationId = (String)val;
                break;
            case "region":
                this.region = (String)val;
                break;
            case "startDate":
                this.startDate = (LocalDateTime)val;
                break;
            case "tel":
                this.tel = (String)val;
                break;
            case "country":
                this.country = val;
                break;
            case "cruise":
                this.cruise = val;
                break;
            case "postRetrievalStatus":
                this.postRetrievalStatus = val;
                break;
            case "ptfs":
                this.ptfs = val;
                break;
            case "retrievalStatus":
                this.retrievalStatus = val;
                break;
            case "ship":
                this.ship = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.contact);
        out.writeObject(this.cruiseName);
        out.writeObject(this.description);
        out.writeObject(this.email);
        out.writeObject(this.endDate);
        out.writeObject(this.id);
        out.writeObject(this.lat);
        out.writeObject(this.localContactInfo);
        out.writeObject(this.lon);
        out.writeObject(this.refStationId);
        out.writeObject(this.region);
        out.writeObject(this.startDate);
        out.writeObject(this.tel);
        out.writeObject(this.country);
        out.writeObject(this.cruise);
        out.writeObject(this.postRetrievalStatus);
        out.writeObject(this.ptfs);
        out.writeObject(this.retrievalStatus);
        out.writeObject(this.ship);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.contact = (String)in.readObject();
        this.cruiseName = (String)in.readObject();
        this.description = (String)in.readObject();
        this.email = (String)in.readObject();
        this.endDate = (LocalDateTime)in.readObject();
        this.id = (Integer)in.readObject();
        this.lat = (Double)in.readObject();
        this.localContactInfo = (String)in.readObject();
        this.lon = (Double)in.readObject();
        this.refStationId = (String)in.readObject();
        this.region = (String)in.readObject();
        this.startDate = (LocalDateTime)in.readObject();
        this.tel = (String)in.readObject();
        this.country = in.readObject();
        this.cruise = in.readObject();
        this.postRetrievalStatus = in.readObject();
        this.ptfs = in.readObject();
        this.retrievalStatus = in.readObject();
        this.ship = in.readObject();
    }

}
