package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

/**
 * Class _WebPtfFilter was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _WebPtfFilter extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String FILTER_ID_PK_COLUMN = "FILTER_ID";
    public static final String FILTER_NAME_PK_COLUMN = "FILTER_NAME";
    public static final String VALUE_ID_PK_COLUMN = "VALUE_ID";
    public static final String VALUE_NAME_PK_COLUMN = "VALUE_NAME";

    public static final StringProperty<String> FILTER_ID = PropertyFactory.createString("filterId", String.class);
    public static final StringProperty<String> FILTER_NAME = PropertyFactory.createString("filterName", String.class);
    public static final NumericProperty<Integer> VALUE_ID = PropertyFactory.createNumeric("valueId", Integer.class);
    public static final StringProperty<String> VALUE_NAME = PropertyFactory.createString("valueName", String.class);

    protected String filterId;
    protected String filterName;
    protected Integer valueId;
    protected String valueName;


    public void setFilterId(String filterId) {
        beforePropertyWrite("filterId", this.filterId, filterId);
        this.filterId = filterId;
    }

    public String getFilterId() {
        beforePropertyRead("filterId");
        return this.filterId;
    }

    public void setFilterName(String filterName) {
        beforePropertyWrite("filterName", this.filterName, filterName);
        this.filterName = filterName;
    }

    public String getFilterName() {
        beforePropertyRead("filterName");
        return this.filterName;
    }

    public void setValueId(Integer valueId) {
        beforePropertyWrite("valueId", this.valueId, valueId);
        this.valueId = valueId;
    }

    public Integer getValueId() {
        beforePropertyRead("valueId");
        return this.valueId;
    }

    public void setValueName(String valueName) {
        beforePropertyWrite("valueName", this.valueName, valueName);
        this.valueName = valueName;
    }

    public String getValueName() {
        beforePropertyRead("valueName");
        return this.valueName;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "filterId":
                return this.filterId;
            case "filterName":
                return this.filterName;
            case "valueId":
                return this.valueId;
            case "valueName":
                return this.valueName;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "filterId":
                this.filterId = (String)val;
                break;
            case "filterName":
                this.filterName = (String)val;
                break;
            case "valueId":
                this.valueId = (Integer)val;
                break;
            case "valueName":
                this.valueName = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.filterId);
        out.writeObject(this.filterName);
        out.writeObject(this.valueId);
        out.writeObject(this.valueName);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.filterId = (String)in.readObject();
        this.filterName = (String)in.readObject();
        this.valueId = (Integer)in.readObject();
        this.valueName = (String)in.readObject();
    }

}
