package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.oceanops.api.orm.Parameter;
import org.oceanops.api.orm.Variable;

/**
 * Class _ParameterVariable was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ParameterVariable extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final EntityProperty<Parameter> PARAMETER = PropertyFactory.createEntity("parameter", Parameter.class);
    public static final EntityProperty<Variable> VARIABLE = PropertyFactory.createEntity("variable", Variable.class);


    protected Object parameter;
    protected Object variable;

    public void setParameter(Parameter parameter) {
        setToOneTarget("parameter", parameter, true);
    }

    public Parameter getParameter() {
        return (Parameter)readProperty("parameter");
    }

    public void setVariable(Variable variable) {
        setToOneTarget("variable", variable, true);
    }

    public Variable getVariable() {
        return (Variable)readProperty("variable");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "parameter":
                return this.parameter;
            case "variable":
                return this.variable;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "parameter":
                this.parameter = val;
                break;
            case "variable":
                this.variable = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.parameter);
        out.writeObject(this.variable);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.parameter = in.readObject();
        this.variable = in.readObject();
    }

}
