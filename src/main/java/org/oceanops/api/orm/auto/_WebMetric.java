package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.api.orm.WebMetricNetwork;

/**
 * Class _WebMetric was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _WebMetric extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final NumericProperty<Integer> ID = PropertyFactory.createNumeric("id", Integer.class);
    public static final StringProperty<String> METHOD = PropertyFactory.createString("method", String.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final ListProperty<WebMetricNetwork> WEB_METRIC_NETWORKS = PropertyFactory.createList("webMetricNetworks", WebMetricNetwork.class);

    protected Integer id;
    protected String method;
    protected String name;

    protected Object webMetricNetworks;

    public void setId(Integer id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Integer getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setMethod(String method) {
        beforePropertyWrite("method", this.method, method);
        this.method = method;
    }

    public String getMethod() {
        beforePropertyRead("method");
        return this.method;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void addToWebMetricNetworks(WebMetricNetwork obj) {
        addToManyTarget("webMetricNetworks", obj, true);
    }

    public void removeFromWebMetricNetworks(WebMetricNetwork obj) {
        removeToManyTarget("webMetricNetworks", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<WebMetricNetwork> getWebMetricNetworks() {
        return (List<WebMetricNetwork>)readProperty("webMetricNetworks");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "id":
                return this.id;
            case "method":
                return this.method;
            case "name":
                return this.name;
            case "webMetricNetworks":
                return this.webMetricNetworks;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "id":
                this.id = (Integer)val;
                break;
            case "method":
                this.method = (String)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "webMetricNetworks":
                this.webMetricNetworks = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.id);
        out.writeObject(this.method);
        out.writeObject(this.name);
        out.writeObject(this.webMetricNetworks);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.id = (Integer)in.readObject();
        this.method = (String)in.readObject();
        this.name = (String)in.readObject();
        this.webMetricNetworks = in.readObject();
    }

}
