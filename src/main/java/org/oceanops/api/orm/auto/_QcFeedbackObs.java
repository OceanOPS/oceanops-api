package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.oceanops.api.orm.QcFeedback;

/**
 * Class _QcFeedbackObs was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _QcFeedbackObs extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String OBS_ID_PK_COLUMN = "OBS_ID";
    public static final String QC_FEEDBACK_ID_PK_COLUMN = "QC_FEEDBACK_ID";

    public static final NumericProperty<Integer> OBS_ID = PropertyFactory.createNumeric("obsId", Integer.class);
    public static final NumericProperty<Integer> QC_FEEDBACK_ID = PropertyFactory.createNumeric("qcFeedbackId", Integer.class);
    public static final EntityProperty<QcFeedback> QC_FEEDBACK = PropertyFactory.createEntity("qcFeedback", QcFeedback.class);

    protected Integer obsId;
    protected Integer qcFeedbackId;

    protected Object qcFeedback;

    public void setObsId(Integer obsId) {
        beforePropertyWrite("obsId", this.obsId, obsId);
        this.obsId = obsId;
    }

    public Integer getObsId() {
        beforePropertyRead("obsId");
        return this.obsId;
    }

    public void setQcFeedbackId(Integer qcFeedbackId) {
        beforePropertyWrite("qcFeedbackId", this.qcFeedbackId, qcFeedbackId);
        this.qcFeedbackId = qcFeedbackId;
    }

    public Integer getQcFeedbackId() {
        beforePropertyRead("qcFeedbackId");
        return this.qcFeedbackId;
    }

    public void setQcFeedback(QcFeedback qcFeedback) {
        setToOneTarget("qcFeedback", qcFeedback, true);
    }

    public QcFeedback getQcFeedback() {
        return (QcFeedback)readProperty("qcFeedback");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "obsId":
                return this.obsId;
            case "qcFeedbackId":
                return this.qcFeedbackId;
            case "qcFeedback":
                return this.qcFeedback;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "obsId":
                this.obsId = (Integer)val;
                break;
            case "qcFeedbackId":
                this.qcFeedbackId = (Integer)val;
                break;
            case "qcFeedback":
                this.qcFeedback = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.obsId);
        out.writeObject(this.qcFeedbackId);
        out.writeObject(this.qcFeedback);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.obsId = (Integer)in.readObject();
        this.qcFeedbackId = (Integer)in.readObject();
        this.qcFeedback = in.readObject();
    }

}
