package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.api.orm.GtsCcccHeader;
import org.oceanops.api.orm.Obs;
import org.oceanops.api.orm.QcFeedback;

/**
 * Class _GtsHeader was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _GtsHeader extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final DateProperty<LocalDateTime> END_DATE = PropertyFactory.createDate("endDate", LocalDateTime.class);
    public static final StringProperty<String> HEADER = PropertyFactory.createString("header", String.class);
    public static final NumericProperty<Integer> ID = PropertyFactory.createNumeric("id", Integer.class);
    public static final DateProperty<LocalDateTime> START_DATE = PropertyFactory.createDate("startDate", LocalDateTime.class);
    public static final StringProperty<String> TEXT = PropertyFactory.createString("text", String.class);
    public static final ListProperty<GtsCcccHeader> GTS_CCCC_HEADERS = PropertyFactory.createList("gtsCcccHeaders", GtsCcccHeader.class);
    public static final ListProperty<Obs> OBSS = PropertyFactory.createList("obss", Obs.class);
    public static final ListProperty<QcFeedback> QC_FEEDBACKS = PropertyFactory.createList("qcFeedbacks", QcFeedback.class);

    protected LocalDateTime endDate;
    protected String header;
    protected Integer id;
    protected LocalDateTime startDate;
    protected String text;

    protected Object gtsCcccHeaders;
    protected Object obss;
    protected Object qcFeedbacks;

    public void setEndDate(LocalDateTime endDate) {
        beforePropertyWrite("endDate", this.endDate, endDate);
        this.endDate = endDate;
    }

    public LocalDateTime getEndDate() {
        beforePropertyRead("endDate");
        return this.endDate;
    }

    public void setHeader(String header) {
        beforePropertyWrite("header", this.header, header);
        this.header = header;
    }

    public String getHeader() {
        beforePropertyRead("header");
        return this.header;
    }

    public void setId(Integer id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Integer getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setStartDate(LocalDateTime startDate) {
        beforePropertyWrite("startDate", this.startDate, startDate);
        this.startDate = startDate;
    }

    public LocalDateTime getStartDate() {
        beforePropertyRead("startDate");
        return this.startDate;
    }

    public void setText(String text) {
        beforePropertyWrite("text", this.text, text);
        this.text = text;
    }

    public String getText() {
        beforePropertyRead("text");
        return this.text;
    }

    public void addToGtsCcccHeaders(GtsCcccHeader obj) {
        addToManyTarget("gtsCcccHeaders", obj, true);
    }

    public void removeFromGtsCcccHeaders(GtsCcccHeader obj) {
        removeToManyTarget("gtsCcccHeaders", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<GtsCcccHeader> getGtsCcccHeaders() {
        return (List<GtsCcccHeader>)readProperty("gtsCcccHeaders");
    }

    public void addToObss(Obs obj) {
        addToManyTarget("obss", obj, true);
    }

    public void removeFromObss(Obs obj) {
        removeToManyTarget("obss", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Obs> getObss() {
        return (List<Obs>)readProperty("obss");
    }

    public void addToQcFeedbacks(QcFeedback obj) {
        addToManyTarget("qcFeedbacks", obj, true);
    }

    public void removeFromQcFeedbacks(QcFeedback obj) {
        removeToManyTarget("qcFeedbacks", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<QcFeedback> getQcFeedbacks() {
        return (List<QcFeedback>)readProperty("qcFeedbacks");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "endDate":
                return this.endDate;
            case "header":
                return this.header;
            case "id":
                return this.id;
            case "startDate":
                return this.startDate;
            case "text":
                return this.text;
            case "gtsCcccHeaders":
                return this.gtsCcccHeaders;
            case "obss":
                return this.obss;
            case "qcFeedbacks":
                return this.qcFeedbacks;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "endDate":
                this.endDate = (LocalDateTime)val;
                break;
            case "header":
                this.header = (String)val;
                break;
            case "id":
                this.id = (Integer)val;
                break;
            case "startDate":
                this.startDate = (LocalDateTime)val;
                break;
            case "text":
                this.text = (String)val;
                break;
            case "gtsCcccHeaders":
                this.gtsCcccHeaders = val;
                break;
            case "obss":
                this.obss = val;
                break;
            case "qcFeedbacks":
                this.qcFeedbacks = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.endDate);
        out.writeObject(this.header);
        out.writeObject(this.id);
        out.writeObject(this.startDate);
        out.writeObject(this.text);
        out.writeObject(this.gtsCcccHeaders);
        out.writeObject(this.obss);
        out.writeObject(this.qcFeedbacks);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.endDate = (LocalDateTime)in.readObject();
        this.header = (String)in.readObject();
        this.id = (Integer)in.readObject();
        this.startDate = (LocalDateTime)in.readObject();
        this.text = (String)in.readObject();
        this.gtsCcccHeaders = in.readObject();
        this.obss = in.readObject();
        this.qcFeedbacks = in.readObject();
    }

}
