package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.BaseProperty;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.api.orm.DocContact;
import org.oceanops.api.orm.DocType;
import org.oceanops.api.orm.Language;
import org.oceanops.api.orm.Meeting;
import org.oceanops.api.orm.Network;
import org.oceanops.api.orm.Ptf;
import org.oceanops.api.orm.PtfLoc;
import org.oceanops.api.orm.Ship;
import org.oceanops.api.orm.TelecomFormatDoc;
import org.oceanops.api.orm.Topic;
import org.oceanops.api.orm.UserGroup;
import org.oceanops.api.orm.Weblink;

/**
 * Class _Doc was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Doc extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> AGENDA_ITEM = PropertyFactory.createString("agendaItem", String.class);
    public static final StringProperty<String> AUTHOR = PropertyFactory.createString("author", String.class);
    public static final StringProperty<String> BODY = PropertyFactory.createString("body", String.class);
    public static final BaseProperty<byte[]> BODY_BLOB = PropertyFactory.createBase("bodyBlob", byte[].class);
    public static final DateProperty<LocalDateTime> CREATION_DATE = PropertyFactory.createDate("creationDate", LocalDateTime.class);
    public static final NumericProperty<Integer> DOC_NO = PropertyFactory.createNumeric("docNo", Integer.class);
    public static final StringProperty<String> DUE_DATE = PropertyFactory.createString("dueDate", String.class);
    public static final NumericProperty<Integer> ID = PropertyFactory.createNumeric("id", Integer.class);
    public static final StringProperty<String> KEYWORDS = PropertyFactory.createString("keywords", String.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final StringProperty<String> NAME_SHORT = PropertyFactory.createString("nameShort", String.class);
    public static final NumericProperty<Integer> VALIDATED = PropertyFactory.createNumeric("validated", Integer.class);
    public static final NumericProperty<Double> VERSION = PropertyFactory.createNumeric("version", Double.class);
    public static final ListProperty<DocContact> DOC_CONTACTS = PropertyFactory.createList("docContacts", DocContact.class);
    public static final EntityProperty<DocType> DOC_TYPE = PropertyFactory.createEntity("docType", DocType.class);
    public static final EntityProperty<Language> LANGUAGE = PropertyFactory.createEntity("language", Language.class);
    public static final EntityProperty<PtfLoc> LOC = PropertyFactory.createEntity("loc", PtfLoc.class);
    public static final EntityProperty<Meeting> MEETING = PropertyFactory.createEntity("meeting", Meeting.class);
    public static final EntityProperty<Network> NETWORK = PropertyFactory.createEntity("network", Network.class);
    public static final EntityProperty<Ptf> PTF = PropertyFactory.createEntity("ptf", Ptf.class);
    public static final ListProperty<Ptf> PTFS = PropertyFactory.createList("ptfs", Ptf.class);
    public static final EntityProperty<Ship> SHIP = PropertyFactory.createEntity("ship", Ship.class);
    public static final ListProperty<TelecomFormatDoc> TELECOM_FORMAT_DOCS = PropertyFactory.createList("telecomFormatDocs", TelecomFormatDoc.class);
    public static final EntityProperty<Topic> TOPIC = PropertyFactory.createEntity("topic", Topic.class);
    public static final EntityProperty<UserGroup> USER_GROUP = PropertyFactory.createEntity("userGroup", UserGroup.class);
    public static final EntityProperty<Weblink> WEBLINK = PropertyFactory.createEntity("weblink", Weblink.class);

    protected String agendaItem;
    protected String author;
    protected String body;
    protected byte[] bodyBlob;
    protected LocalDateTime creationDate;
    protected Integer docNo;
    protected String dueDate;
    protected Integer id;
    protected String keywords;
    protected String name;
    protected String nameShort;
    protected Integer validated;
    protected Double version;

    protected Object docContacts;
    protected Object docType;
    protected Object language;
    protected Object loc;
    protected Object meeting;
    protected Object network;
    protected Object ptf;
    protected Object ptfs;
    protected Object ship;
    protected Object telecomFormatDocs;
    protected Object topic;
    protected Object userGroup;
    protected Object weblink;

    public void setAgendaItem(String agendaItem) {
        beforePropertyWrite("agendaItem", this.agendaItem, agendaItem);
        this.agendaItem = agendaItem;
    }

    public String getAgendaItem() {
        beforePropertyRead("agendaItem");
        return this.agendaItem;
    }

    public void setAuthor(String author) {
        beforePropertyWrite("author", this.author, author);
        this.author = author;
    }

    public String getAuthor() {
        beforePropertyRead("author");
        return this.author;
    }

    public void setBody(String body) {
        beforePropertyWrite("body", this.body, body);
        this.body = body;
    }

    public String getBody() {
        beforePropertyRead("body");
        return this.body;
    }

    public void setBodyBlob(byte[] bodyBlob) {
        beforePropertyWrite("bodyBlob", this.bodyBlob, bodyBlob);
        this.bodyBlob = bodyBlob;
    }

    public byte[] getBodyBlob() {
        beforePropertyRead("bodyBlob");
        return this.bodyBlob;
    }

    public void setCreationDate(LocalDateTime creationDate) {
        beforePropertyWrite("creationDate", this.creationDate, creationDate);
        this.creationDate = creationDate;
    }

    public LocalDateTime getCreationDate() {
        beforePropertyRead("creationDate");
        return this.creationDate;
    }

    public void setDocNo(Integer docNo) {
        beforePropertyWrite("docNo", this.docNo, docNo);
        this.docNo = docNo;
    }

    public Integer getDocNo() {
        beforePropertyRead("docNo");
        return this.docNo;
    }

    public void setDueDate(String dueDate) {
        beforePropertyWrite("dueDate", this.dueDate, dueDate);
        this.dueDate = dueDate;
    }

    public String getDueDate() {
        beforePropertyRead("dueDate");
        return this.dueDate;
    }

    public void setId(Integer id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Integer getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setKeywords(String keywords) {
        beforePropertyWrite("keywords", this.keywords, keywords);
        this.keywords = keywords;
    }

    public String getKeywords() {
        beforePropertyRead("keywords");
        return this.keywords;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setNameShort(String nameShort) {
        beforePropertyWrite("nameShort", this.nameShort, nameShort);
        this.nameShort = nameShort;
    }

    public String getNameShort() {
        beforePropertyRead("nameShort");
        return this.nameShort;
    }

    public void setValidated(Integer validated) {
        beforePropertyWrite("validated", this.validated, validated);
        this.validated = validated;
    }

    public Integer getValidated() {
        beforePropertyRead("validated");
        return this.validated;
    }

    public void setVersion(Double version) {
        beforePropertyWrite("version", this.version, version);
        this.version = version;
    }

    public Double getVersion() {
        beforePropertyRead("version");
        return this.version;
    }

    public void addToDocContacts(DocContact obj) {
        addToManyTarget("docContacts", obj, true);
    }

    public void removeFromDocContacts(DocContact obj) {
        removeToManyTarget("docContacts", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<DocContact> getDocContacts() {
        return (List<DocContact>)readProperty("docContacts");
    }

    public void setDocType(DocType docType) {
        setToOneTarget("docType", docType, true);
    }

    public DocType getDocType() {
        return (DocType)readProperty("docType");
    }

    public void setLanguage(Language language) {
        setToOneTarget("language", language, true);
    }

    public Language getLanguage() {
        return (Language)readProperty("language");
    }

    public void setLoc(PtfLoc loc) {
        setToOneTarget("loc", loc, true);
    }

    public PtfLoc getLoc() {
        return (PtfLoc)readProperty("loc");
    }

    public void setMeeting(Meeting meeting) {
        setToOneTarget("meeting", meeting, true);
    }

    public Meeting getMeeting() {
        return (Meeting)readProperty("meeting");
    }

    public void setNetwork(Network network) {
        setToOneTarget("network", network, true);
    }

    public Network getNetwork() {
        return (Network)readProperty("network");
    }

    public void setPtf(Ptf ptf) {
        setToOneTarget("ptf", ptf, true);
    }

    public Ptf getPtf() {
        return (Ptf)readProperty("ptf");
    }

    public void addToPtfs(Ptf obj) {
        addToManyTarget("ptfs", obj, true);
    }

    public void removeFromPtfs(Ptf obj) {
        removeToManyTarget("ptfs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Ptf> getPtfs() {
        return (List<Ptf>)readProperty("ptfs");
    }

    public void setShip(Ship ship) {
        setToOneTarget("ship", ship, true);
    }

    public Ship getShip() {
        return (Ship)readProperty("ship");
    }

    public void addToTelecomFormatDocs(TelecomFormatDoc obj) {
        addToManyTarget("telecomFormatDocs", obj, true);
    }

    public void removeFromTelecomFormatDocs(TelecomFormatDoc obj) {
        removeToManyTarget("telecomFormatDocs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<TelecomFormatDoc> getTelecomFormatDocs() {
        return (List<TelecomFormatDoc>)readProperty("telecomFormatDocs");
    }

    public void setTopic(Topic topic) {
        setToOneTarget("topic", topic, true);
    }

    public Topic getTopic() {
        return (Topic)readProperty("topic");
    }

    public void setUserGroup(UserGroup userGroup) {
        setToOneTarget("userGroup", userGroup, true);
    }

    public UserGroup getUserGroup() {
        return (UserGroup)readProperty("userGroup");
    }

    public void setWeblink(Weblink weblink) {
        setToOneTarget("weblink", weblink, true);
    }

    public Weblink getWeblink() {
        return (Weblink)readProperty("weblink");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "agendaItem":
                return this.agendaItem;
            case "author":
                return this.author;
            case "body":
                return this.body;
            case "bodyBlob":
                return this.bodyBlob;
            case "creationDate":
                return this.creationDate;
            case "docNo":
                return this.docNo;
            case "dueDate":
                return this.dueDate;
            case "id":
                return this.id;
            case "keywords":
                return this.keywords;
            case "name":
                return this.name;
            case "nameShort":
                return this.nameShort;
            case "validated":
                return this.validated;
            case "version":
                return this.version;
            case "docContacts":
                return this.docContacts;
            case "docType":
                return this.docType;
            case "language":
                return this.language;
            case "loc":
                return this.loc;
            case "meeting":
                return this.meeting;
            case "network":
                return this.network;
            case "ptf":
                return this.ptf;
            case "ptfs":
                return this.ptfs;
            case "ship":
                return this.ship;
            case "telecomFormatDocs":
                return this.telecomFormatDocs;
            case "topic":
                return this.topic;
            case "userGroup":
                return this.userGroup;
            case "weblink":
                return this.weblink;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "agendaItem":
                this.agendaItem = (String)val;
                break;
            case "author":
                this.author = (String)val;
                break;
            case "body":
                this.body = (String)val;
                break;
            case "bodyBlob":
                this.bodyBlob = (byte[])val;
                break;
            case "creationDate":
                this.creationDate = (LocalDateTime)val;
                break;
            case "docNo":
                this.docNo = (Integer)val;
                break;
            case "dueDate":
                this.dueDate = (String)val;
                break;
            case "id":
                this.id = (Integer)val;
                break;
            case "keywords":
                this.keywords = (String)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "nameShort":
                this.nameShort = (String)val;
                break;
            case "validated":
                this.validated = (Integer)val;
                break;
            case "version":
                this.version = (Double)val;
                break;
            case "docContacts":
                this.docContacts = val;
                break;
            case "docType":
                this.docType = val;
                break;
            case "language":
                this.language = val;
                break;
            case "loc":
                this.loc = val;
                break;
            case "meeting":
                this.meeting = val;
                break;
            case "network":
                this.network = val;
                break;
            case "ptf":
                this.ptf = val;
                break;
            case "ptfs":
                this.ptfs = val;
                break;
            case "ship":
                this.ship = val;
                break;
            case "telecomFormatDocs":
                this.telecomFormatDocs = val;
                break;
            case "topic":
                this.topic = val;
                break;
            case "userGroup":
                this.userGroup = val;
                break;
            case "weblink":
                this.weblink = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.agendaItem);
        out.writeObject(this.author);
        out.writeObject(this.body);
        out.writeObject(this.bodyBlob);
        out.writeObject(this.creationDate);
        out.writeObject(this.docNo);
        out.writeObject(this.dueDate);
        out.writeObject(this.id);
        out.writeObject(this.keywords);
        out.writeObject(this.name);
        out.writeObject(this.nameShort);
        out.writeObject(this.validated);
        out.writeObject(this.version);
        out.writeObject(this.docContacts);
        out.writeObject(this.docType);
        out.writeObject(this.language);
        out.writeObject(this.loc);
        out.writeObject(this.meeting);
        out.writeObject(this.network);
        out.writeObject(this.ptf);
        out.writeObject(this.ptfs);
        out.writeObject(this.ship);
        out.writeObject(this.telecomFormatDocs);
        out.writeObject(this.topic);
        out.writeObject(this.userGroup);
        out.writeObject(this.weblink);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.agendaItem = (String)in.readObject();
        this.author = (String)in.readObject();
        this.body = (String)in.readObject();
        this.bodyBlob = (byte[])in.readObject();
        this.creationDate = (LocalDateTime)in.readObject();
        this.docNo = (Integer)in.readObject();
        this.dueDate = (String)in.readObject();
        this.id = (Integer)in.readObject();
        this.keywords = (String)in.readObject();
        this.name = (String)in.readObject();
        this.nameShort = (String)in.readObject();
        this.validated = (Integer)in.readObject();
        this.version = (Double)in.readObject();
        this.docContacts = in.readObject();
        this.docType = in.readObject();
        this.language = in.readObject();
        this.loc = in.readObject();
        this.meeting = in.readObject();
        this.network = in.readObject();
        this.ptf = in.readObject();
        this.ptfs = in.readObject();
        this.ship = in.readObject();
        this.telecomFormatDocs = in.readObject();
        this.topic = in.readObject();
        this.userGroup = in.readObject();
        this.weblink = in.readObject();
    }

}
