package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.BaseProperty;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.api.orm.Agency;
import org.oceanops.api.orm.Contact;
import org.oceanops.api.orm.Cruise;
import org.oceanops.api.orm.ImageType;
import org.oceanops.api.orm.Network;
import org.oceanops.api.orm.Program;
import org.oceanops.api.orm.PtfModel;
import org.oceanops.api.orm.PtfType;
import org.oceanops.api.orm.SensorModel;
import org.oceanops.api.orm.Ship;

/**
 * Class _Image was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Image extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final DateProperty<LocalDateTime> CREATION_DATE = PropertyFactory.createDate("creationDate", LocalDateTime.class);
    public static final StringProperty<String> CREDITS = PropertyFactory.createString("credits", String.class);
    public static final BaseProperty<byte[]> DATA = PropertyFactory.createBase("data", byte[].class);
    public static final StringProperty<String> DESCRIPTION = PropertyFactory.createString("description", String.class);
    public static final StringProperty<String> FILENAME = PropertyFactory.createString("filename", String.class);
    public static final StringProperty<String> HTML_ALT = PropertyFactory.createString("htmlAlt", String.class);
    public static final NumericProperty<Integer> ID = PropertyFactory.createNumeric("id", Integer.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final NumericProperty<Integer> STORY_ID = PropertyFactory.createNumeric("storyId", Integer.class);
    public static final StringProperty<String> TAGS = PropertyFactory.createString("tags", String.class);
    public static final StringProperty<String> URL = PropertyFactory.createString("url", String.class);
    public static final ListProperty<Agency> AGENCIES = PropertyFactory.createList("agencies", Agency.class);
    public static final EntityProperty<Agency> AGENCY = PropertyFactory.createEntity("agency", Agency.class);
    public static final ListProperty<Contact> CONTACTS = PropertyFactory.createList("contacts", Contact.class);
    public static final ListProperty<Cruise> CRUISES = PropertyFactory.createList("cruises", Cruise.class);
    public static final EntityProperty<ImageType> IMAGE_TYPE = PropertyFactory.createEntity("imageType", ImageType.class);
    public static final EntityProperty<Network> NETWORK = PropertyFactory.createEntity("network", Network.class);
    public static final EntityProperty<Program> PROGRAM = PropertyFactory.createEntity("program", Program.class);
    public static final ListProperty<PtfModel> PTF_MODELS = PropertyFactory.createList("ptfModels", PtfModel.class);
    public static final ListProperty<PtfType> PTF_TYPES = PropertyFactory.createList("ptfTypes", PtfType.class);
    public static final ListProperty<SensorModel> SENSOR_MODELS = PropertyFactory.createList("sensorModels", SensorModel.class);
    public static final EntityProperty<Ship> SHIP = PropertyFactory.createEntity("ship", Ship.class);

    protected LocalDateTime creationDate;
    protected String credits;
    protected byte[] data;
    protected String description;
    protected String filename;
    protected String htmlAlt;
    protected Integer id;
    protected String name;
    protected Integer storyId;
    protected String tags;
    protected String url;

    protected Object agencies;
    protected Object agency;
    protected Object contacts;
    protected Object cruises;
    protected Object imageType;
    protected Object network;
    protected Object program;
    protected Object ptfModels;
    protected Object ptfTypes;
    protected Object sensorModels;
    protected Object ship;

    public void setCreationDate(LocalDateTime creationDate) {
        beforePropertyWrite("creationDate", this.creationDate, creationDate);
        this.creationDate = creationDate;
    }

    public LocalDateTime getCreationDate() {
        beforePropertyRead("creationDate");
        return this.creationDate;
    }

    public void setCredits(String credits) {
        beforePropertyWrite("credits", this.credits, credits);
        this.credits = credits;
    }

    public String getCredits() {
        beforePropertyRead("credits");
        return this.credits;
    }

    public void setData(byte[] data) {
        beforePropertyWrite("data", this.data, data);
        this.data = data;
    }

    public byte[] getData() {
        beforePropertyRead("data");
        return this.data;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setFilename(String filename) {
        beforePropertyWrite("filename", this.filename, filename);
        this.filename = filename;
    }

    public String getFilename() {
        beforePropertyRead("filename");
        return this.filename;
    }

    public void setHtmlAlt(String htmlAlt) {
        beforePropertyWrite("htmlAlt", this.htmlAlt, htmlAlt);
        this.htmlAlt = htmlAlt;
    }

    public String getHtmlAlt() {
        beforePropertyRead("htmlAlt");
        return this.htmlAlt;
    }

    public void setId(Integer id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Integer getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setStoryId(Integer storyId) {
        beforePropertyWrite("storyId", this.storyId, storyId);
        this.storyId = storyId;
    }

    public Integer getStoryId() {
        beforePropertyRead("storyId");
        return this.storyId;
    }

    public void setTags(String tags) {
        beforePropertyWrite("tags", this.tags, tags);
        this.tags = tags;
    }

    public String getTags() {
        beforePropertyRead("tags");
        return this.tags;
    }

    public void setUrl(String url) {
        beforePropertyWrite("url", this.url, url);
        this.url = url;
    }

    public String getUrl() {
        beforePropertyRead("url");
        return this.url;
    }

    public void addToAgencies(Agency obj) {
        addToManyTarget("agencies", obj, true);
    }

    public void removeFromAgencies(Agency obj) {
        removeToManyTarget("agencies", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Agency> getAgencies() {
        return (List<Agency>)readProperty("agencies");
    }

    public void setAgency(Agency agency) {
        setToOneTarget("agency", agency, true);
    }

    public Agency getAgency() {
        return (Agency)readProperty("agency");
    }

    public void addToContacts(Contact obj) {
        addToManyTarget("contacts", obj, true);
    }

    public void removeFromContacts(Contact obj) {
        removeToManyTarget("contacts", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Contact> getContacts() {
        return (List<Contact>)readProperty("contacts");
    }

    public void addToCruises(Cruise obj) {
        addToManyTarget("cruises", obj, true);
    }

    public void removeFromCruises(Cruise obj) {
        removeToManyTarget("cruises", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Cruise> getCruises() {
        return (List<Cruise>)readProperty("cruises");
    }

    public void setImageType(ImageType imageType) {
        setToOneTarget("imageType", imageType, true);
    }

    public ImageType getImageType() {
        return (ImageType)readProperty("imageType");
    }

    public void setNetwork(Network network) {
        setToOneTarget("network", network, true);
    }

    public Network getNetwork() {
        return (Network)readProperty("network");
    }

    public void setProgram(Program program) {
        setToOneTarget("program", program, true);
    }

    public Program getProgram() {
        return (Program)readProperty("program");
    }

    public void addToPtfModels(PtfModel obj) {
        addToManyTarget("ptfModels", obj, true);
    }

    public void removeFromPtfModels(PtfModel obj) {
        removeToManyTarget("ptfModels", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfModel> getPtfModels() {
        return (List<PtfModel>)readProperty("ptfModels");
    }

    public void addToPtfTypes(PtfType obj) {
        addToManyTarget("ptfTypes", obj, true);
    }

    public void removeFromPtfTypes(PtfType obj) {
        removeToManyTarget("ptfTypes", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfType> getPtfTypes() {
        return (List<PtfType>)readProperty("ptfTypes");
    }

    public void addToSensorModels(SensorModel obj) {
        addToManyTarget("sensorModels", obj, true);
    }

    public void removeFromSensorModels(SensorModel obj) {
        removeToManyTarget("sensorModels", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<SensorModel> getSensorModels() {
        return (List<SensorModel>)readProperty("sensorModels");
    }

    public void setShip(Ship ship) {
        setToOneTarget("ship", ship, true);
    }

    public Ship getShip() {
        return (Ship)readProperty("ship");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "creationDate":
                return this.creationDate;
            case "credits":
                return this.credits;
            case "data":
                return this.data;
            case "description":
                return this.description;
            case "filename":
                return this.filename;
            case "htmlAlt":
                return this.htmlAlt;
            case "id":
                return this.id;
            case "name":
                return this.name;
            case "storyId":
                return this.storyId;
            case "tags":
                return this.tags;
            case "url":
                return this.url;
            case "agencies":
                return this.agencies;
            case "agency":
                return this.agency;
            case "contacts":
                return this.contacts;
            case "cruises":
                return this.cruises;
            case "imageType":
                return this.imageType;
            case "network":
                return this.network;
            case "program":
                return this.program;
            case "ptfModels":
                return this.ptfModels;
            case "ptfTypes":
                return this.ptfTypes;
            case "sensorModels":
                return this.sensorModels;
            case "ship":
                return this.ship;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "creationDate":
                this.creationDate = (LocalDateTime)val;
                break;
            case "credits":
                this.credits = (String)val;
                break;
            case "data":
                this.data = (byte[])val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "filename":
                this.filename = (String)val;
                break;
            case "htmlAlt":
                this.htmlAlt = (String)val;
                break;
            case "id":
                this.id = (Integer)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "storyId":
                this.storyId = (Integer)val;
                break;
            case "tags":
                this.tags = (String)val;
                break;
            case "url":
                this.url = (String)val;
                break;
            case "agencies":
                this.agencies = val;
                break;
            case "agency":
                this.agency = val;
                break;
            case "contacts":
                this.contacts = val;
                break;
            case "cruises":
                this.cruises = val;
                break;
            case "imageType":
                this.imageType = val;
                break;
            case "network":
                this.network = val;
                break;
            case "program":
                this.program = val;
                break;
            case "ptfModels":
                this.ptfModels = val;
                break;
            case "ptfTypes":
                this.ptfTypes = val;
                break;
            case "sensorModels":
                this.sensorModels = val;
                break;
            case "ship":
                this.ship = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.creationDate);
        out.writeObject(this.credits);
        out.writeObject(this.data);
        out.writeObject(this.description);
        out.writeObject(this.filename);
        out.writeObject(this.htmlAlt);
        out.writeObject(this.id);
        out.writeObject(this.name);
        out.writeObject(this.storyId);
        out.writeObject(this.tags);
        out.writeObject(this.url);
        out.writeObject(this.agencies);
        out.writeObject(this.agency);
        out.writeObject(this.contacts);
        out.writeObject(this.cruises);
        out.writeObject(this.imageType);
        out.writeObject(this.network);
        out.writeObject(this.program);
        out.writeObject(this.ptfModels);
        out.writeObject(this.ptfTypes);
        out.writeObject(this.sensorModels);
        out.writeObject(this.ship);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.creationDate = (LocalDateTime)in.readObject();
        this.credits = (String)in.readObject();
        this.data = (byte[])in.readObject();
        this.description = (String)in.readObject();
        this.filename = (String)in.readObject();
        this.htmlAlt = (String)in.readObject();
        this.id = (Integer)in.readObject();
        this.name = (String)in.readObject();
        this.storyId = (Integer)in.readObject();
        this.tags = (String)in.readObject();
        this.url = (String)in.readObject();
        this.agencies = in.readObject();
        this.agency = in.readObject();
        this.contacts = in.readObject();
        this.cruises = in.readObject();
        this.imageType = in.readObject();
        this.network = in.readObject();
        this.program = in.readObject();
        this.ptfModels = in.readObject();
        this.ptfTypes = in.readObject();
        this.sensorModels = in.readObject();
        this.ship = in.readObject();
    }

}
