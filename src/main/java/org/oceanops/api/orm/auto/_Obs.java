package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.api.orm.Agency;
import org.oceanops.api.orm.DataFormat;
import org.oceanops.api.orm.GtsCccc;
import org.oceanops.api.orm.GtsCode;
import org.oceanops.api.orm.GtsHeader;
import org.oceanops.api.orm.GtsInstrumentType;
import org.oceanops.api.orm.GtsRecorderType;
import org.oceanops.api.orm.ObsDataStatus;
import org.oceanops.api.orm.ObsObsDataStatus;
import org.oceanops.api.orm.ObsVariable;
import org.oceanops.api.orm.Ptf;
import org.oceanops.api.orm.PtfLoc;

/**
 * Class _Obs was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Obs extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final DateProperty<LocalDateTime> ASSEMBLY_DATE = PropertyFactory.createDate("assemblyDate", LocalDateTime.class);
    public static final NumericProperty<Integer> CYCLE_NB = PropertyFactory.createNumeric("cycleNb", Integer.class);
    public static final StringProperty<String> DATA_PATH = PropertyFactory.createString("dataPath", String.class);
    public static final NumericProperty<Double> DELAY = PropertyFactory.createNumeric("delay", Double.class);
    public static final NumericProperty<Integer> DELETED = PropertyFactory.createNumeric("deleted", Integer.class);
    public static final NumericProperty<Double> DEPTH = PropertyFactory.createNumeric("depth", Double.class);
    public static final NumericProperty<Double> DEPTH_MAX = PropertyFactory.createNumeric("depthMax", Double.class);
    public static final NumericProperty<Integer> DESCENDING = PropertyFactory.createNumeric("descending", Integer.class);
    public static final DateProperty<LocalDateTime> DISTRIBUTION_DATE = PropertyFactory.createDate("distributionDate", LocalDateTime.class);
    public static final StringProperty<String> FILENAME = PropertyFactory.createString("filename", String.class);
    public static final NumericProperty<Integer> ID = PropertyFactory.createNumeric("id", Integer.class);
    public static final DateProperty<LocalDateTime> INSERT_DATE = PropertyFactory.createDate("insertDate", LocalDateTime.class);
    public static final NumericProperty<Double> LAT = PropertyFactory.createNumeric("lat", Double.class);
    public static final DateProperty<LocalDateTime> LATEST_ASSEMBLY_DATE = PropertyFactory.createDate("latestAssemblyDate", LocalDateTime.class);
    public static final DateProperty<LocalDateTime> LATEST_DISTRIBUTION_DATE = PropertyFactory.createDate("latestDistributionDate", LocalDateTime.class);
    public static final NumericProperty<Double> LON = PropertyFactory.createNumeric("lon", Double.class);
    public static final DateProperty<LocalDateTime> OBS_DATE = PropertyFactory.createDate("obsDate", LocalDateTime.class);
    public static final DateProperty<LocalDateTime> OBS_END_DATE = PropertyFactory.createDate("obsEndDate", LocalDateTime.class);
    public static final DateProperty<LocalDateTime> UPDATE_DATE = PropertyFactory.createDate("updateDate", LocalDateTime.class);
    public static final StringProperty<String> WMO = PropertyFactory.createString("wmo", String.class);
    public static final EntityProperty<Agency> DAC = PropertyFactory.createEntity("dac", Agency.class);
    public static final EntityProperty<DataFormat> DATA_FORMAT = PropertyFactory.createEntity("dataFormat", DataFormat.class);
    public static final EntityProperty<Agency> GDAC = PropertyFactory.createEntity("gdac", Agency.class);
    public static final EntityProperty<GtsCccc> GTS_CCCC = PropertyFactory.createEntity("gtsCccc", GtsCccc.class);
    public static final EntityProperty<GtsCode> GTS_CODE = PropertyFactory.createEntity("gtsCode", GtsCode.class);
    public static final EntityProperty<GtsHeader> GTS_HEADER = PropertyFactory.createEntity("gtsHeader", GtsHeader.class);
    public static final EntityProperty<GtsInstrumentType> GTS_INSTRUMENT_TYPE = PropertyFactory.createEntity("gtsInstrumentType", GtsInstrumentType.class);
    public static final EntityProperty<GtsRecorderType> GTS_RECORDER_TYPE = PropertyFactory.createEntity("gtsRecorderType", GtsRecorderType.class);
    public static final EntityProperty<ObsDataStatus> OBS_DATA_STATUS = PropertyFactory.createEntity("obsDataStatus", ObsDataStatus.class);
    public static final ListProperty<ObsObsDataStatus> OBS_OBS_DATA_STATUSES = PropertyFactory.createList("obsObsDataStatuses", ObsObsDataStatus.class);
    public static final ListProperty<ObsVariable> OBS_VARIABLES = PropertyFactory.createList("obsVariables", ObsVariable.class);
    public static final EntityProperty<Ptf> PTF = PropertyFactory.createEntity("ptf", Ptf.class);
    public static final EntityProperty<PtfLoc> PTF_LOC = PropertyFactory.createEntity("ptfLoc", PtfLoc.class);

    protected LocalDateTime assemblyDate;
    protected Integer cycleNb;
    protected String dataPath;
    protected Double delay;
    protected Integer deleted;
    protected Double depth;
    protected Double depthMax;
    protected Integer descending;
    protected LocalDateTime distributionDate;
    protected String filename;
    protected Integer id;
    protected LocalDateTime insertDate;
    protected Double lat;
    protected LocalDateTime latestAssemblyDate;
    protected LocalDateTime latestDistributionDate;
    protected Double lon;
    protected LocalDateTime obsDate;
    protected LocalDateTime obsEndDate;
    protected LocalDateTime updateDate;
    protected String wmo;

    protected Object dac;
    protected Object dataFormat;
    protected Object gdac;
    protected Object gtsCccc;
    protected Object gtsCode;
    protected Object gtsHeader;
    protected Object gtsInstrumentType;
    protected Object gtsRecorderType;
    protected Object obsDataStatus;
    protected Object obsObsDataStatuses;
    protected Object obsVariables;
    protected Object ptf;
    protected Object ptfLoc;

    public void setAssemblyDate(LocalDateTime assemblyDate) {
        beforePropertyWrite("assemblyDate", this.assemblyDate, assemblyDate);
        this.assemblyDate = assemblyDate;
    }

    public LocalDateTime getAssemblyDate() {
        beforePropertyRead("assemblyDate");
        return this.assemblyDate;
    }

    public void setCycleNb(Integer cycleNb) {
        beforePropertyWrite("cycleNb", this.cycleNb, cycleNb);
        this.cycleNb = cycleNb;
    }

    public Integer getCycleNb() {
        beforePropertyRead("cycleNb");
        return this.cycleNb;
    }

    public void setDataPath(String dataPath) {
        beforePropertyWrite("dataPath", this.dataPath, dataPath);
        this.dataPath = dataPath;
    }

    public String getDataPath() {
        beforePropertyRead("dataPath");
        return this.dataPath;
    }

    public void setDelay(Double delay) {
        beforePropertyWrite("delay", this.delay, delay);
        this.delay = delay;
    }

    public Double getDelay() {
        beforePropertyRead("delay");
        return this.delay;
    }

    public void setDeleted(Integer deleted) {
        beforePropertyWrite("deleted", this.deleted, deleted);
        this.deleted = deleted;
    }

    public Integer getDeleted() {
        beforePropertyRead("deleted");
        return this.deleted;
    }

    public void setDepth(Double depth) {
        beforePropertyWrite("depth", this.depth, depth);
        this.depth = depth;
    }

    public Double getDepth() {
        beforePropertyRead("depth");
        return this.depth;
    }

    public void setDepthMax(Double depthMax) {
        beforePropertyWrite("depthMax", this.depthMax, depthMax);
        this.depthMax = depthMax;
    }

    public Double getDepthMax() {
        beforePropertyRead("depthMax");
        return this.depthMax;
    }

    public void setDescending(Integer descending) {
        beforePropertyWrite("descending", this.descending, descending);
        this.descending = descending;
    }

    public Integer getDescending() {
        beforePropertyRead("descending");
        return this.descending;
    }

    public void setDistributionDate(LocalDateTime distributionDate) {
        beforePropertyWrite("distributionDate", this.distributionDate, distributionDate);
        this.distributionDate = distributionDate;
    }

    public LocalDateTime getDistributionDate() {
        beforePropertyRead("distributionDate");
        return this.distributionDate;
    }

    public void setFilename(String filename) {
        beforePropertyWrite("filename", this.filename, filename);
        this.filename = filename;
    }

    public String getFilename() {
        beforePropertyRead("filename");
        return this.filename;
    }

    public void setId(Integer id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Integer getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setInsertDate(LocalDateTime insertDate) {
        beforePropertyWrite("insertDate", this.insertDate, insertDate);
        this.insertDate = insertDate;
    }

    public LocalDateTime getInsertDate() {
        beforePropertyRead("insertDate");
        return this.insertDate;
    }

    public void setLat(Double lat) {
        beforePropertyWrite("lat", this.lat, lat);
        this.lat = lat;
    }

    public Double getLat() {
        beforePropertyRead("lat");
        return this.lat;
    }

    public void setLatestAssemblyDate(LocalDateTime latestAssemblyDate) {
        beforePropertyWrite("latestAssemblyDate", this.latestAssemblyDate, latestAssemblyDate);
        this.latestAssemblyDate = latestAssemblyDate;
    }

    public LocalDateTime getLatestAssemblyDate() {
        beforePropertyRead("latestAssemblyDate");
        return this.latestAssemblyDate;
    }

    public void setLatestDistributionDate(LocalDateTime latestDistributionDate) {
        beforePropertyWrite("latestDistributionDate", this.latestDistributionDate, latestDistributionDate);
        this.latestDistributionDate = latestDistributionDate;
    }

    public LocalDateTime getLatestDistributionDate() {
        beforePropertyRead("latestDistributionDate");
        return this.latestDistributionDate;
    }

    public void setLon(Double lon) {
        beforePropertyWrite("lon", this.lon, lon);
        this.lon = lon;
    }

    public Double getLon() {
        beforePropertyRead("lon");
        return this.lon;
    }

    public void setObsDate(LocalDateTime obsDate) {
        beforePropertyWrite("obsDate", this.obsDate, obsDate);
        this.obsDate = obsDate;
    }

    public LocalDateTime getObsDate() {
        beforePropertyRead("obsDate");
        return this.obsDate;
    }

    public void setObsEndDate(LocalDateTime obsEndDate) {
        beforePropertyWrite("obsEndDate", this.obsEndDate, obsEndDate);
        this.obsEndDate = obsEndDate;
    }

    public LocalDateTime getObsEndDate() {
        beforePropertyRead("obsEndDate");
        return this.obsEndDate;
    }

    public void setUpdateDate(LocalDateTime updateDate) {
        beforePropertyWrite("updateDate", this.updateDate, updateDate);
        this.updateDate = updateDate;
    }

    public LocalDateTime getUpdateDate() {
        beforePropertyRead("updateDate");
        return this.updateDate;
    }

    public void setWmo(String wmo) {
        beforePropertyWrite("wmo", this.wmo, wmo);
        this.wmo = wmo;
    }

    public String getWmo() {
        beforePropertyRead("wmo");
        return this.wmo;
    }

    public void setDac(Agency dac) {
        setToOneTarget("dac", dac, true);
    }

    public Agency getDac() {
        return (Agency)readProperty("dac");
    }

    public void setDataFormat(DataFormat dataFormat) {
        setToOneTarget("dataFormat", dataFormat, true);
    }

    public DataFormat getDataFormat() {
        return (DataFormat)readProperty("dataFormat");
    }

    public void setGdac(Agency gdac) {
        setToOneTarget("gdac", gdac, true);
    }

    public Agency getGdac() {
        return (Agency)readProperty("gdac");
    }

    public void setGtsCccc(GtsCccc gtsCccc) {
        setToOneTarget("gtsCccc", gtsCccc, true);
    }

    public GtsCccc getGtsCccc() {
        return (GtsCccc)readProperty("gtsCccc");
    }

    public void setGtsCode(GtsCode gtsCode) {
        setToOneTarget("gtsCode", gtsCode, true);
    }

    public GtsCode getGtsCode() {
        return (GtsCode)readProperty("gtsCode");
    }

    public void setGtsHeader(GtsHeader gtsHeader) {
        setToOneTarget("gtsHeader", gtsHeader, true);
    }

    public GtsHeader getGtsHeader() {
        return (GtsHeader)readProperty("gtsHeader");
    }

    public void setGtsInstrumentType(GtsInstrumentType gtsInstrumentType) {
        setToOneTarget("gtsInstrumentType", gtsInstrumentType, true);
    }

    public GtsInstrumentType getGtsInstrumentType() {
        return (GtsInstrumentType)readProperty("gtsInstrumentType");
    }

    public void setGtsRecorderType(GtsRecorderType gtsRecorderType) {
        setToOneTarget("gtsRecorderType", gtsRecorderType, true);
    }

    public GtsRecorderType getGtsRecorderType() {
        return (GtsRecorderType)readProperty("gtsRecorderType");
    }

    public void setObsDataStatus(ObsDataStatus obsDataStatus) {
        setToOneTarget("obsDataStatus", obsDataStatus, true);
    }

    public ObsDataStatus getObsDataStatus() {
        return (ObsDataStatus)readProperty("obsDataStatus");
    }

    public void addToObsObsDataStatuses(ObsObsDataStatus obj) {
        addToManyTarget("obsObsDataStatuses", obj, true);
    }

    public void removeFromObsObsDataStatuses(ObsObsDataStatus obj) {
        removeToManyTarget("obsObsDataStatuses", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ObsObsDataStatus> getObsObsDataStatuses() {
        return (List<ObsObsDataStatus>)readProperty("obsObsDataStatuses");
    }

    public void addToObsVariables(ObsVariable obj) {
        addToManyTarget("obsVariables", obj, true);
    }

    public void removeFromObsVariables(ObsVariable obj) {
        removeToManyTarget("obsVariables", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ObsVariable> getObsVariables() {
        return (List<ObsVariable>)readProperty("obsVariables");
    }

    public void setPtf(Ptf ptf) {
        setToOneTarget("ptf", ptf, true);
    }

    public Ptf getPtf() {
        return (Ptf)readProperty("ptf");
    }

    public void setPtfLoc(PtfLoc ptfLoc) {
        setToOneTarget("ptfLoc", ptfLoc, true);
    }

    public PtfLoc getPtfLoc() {
        return (PtfLoc)readProperty("ptfLoc");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "assemblyDate":
                return this.assemblyDate;
            case "cycleNb":
                return this.cycleNb;
            case "dataPath":
                return this.dataPath;
            case "delay":
                return this.delay;
            case "deleted":
                return this.deleted;
            case "depth":
                return this.depth;
            case "depthMax":
                return this.depthMax;
            case "descending":
                return this.descending;
            case "distributionDate":
                return this.distributionDate;
            case "filename":
                return this.filename;
            case "id":
                return this.id;
            case "insertDate":
                return this.insertDate;
            case "lat":
                return this.lat;
            case "latestAssemblyDate":
                return this.latestAssemblyDate;
            case "latestDistributionDate":
                return this.latestDistributionDate;
            case "lon":
                return this.lon;
            case "obsDate":
                return this.obsDate;
            case "obsEndDate":
                return this.obsEndDate;
            case "updateDate":
                return this.updateDate;
            case "wmo":
                return this.wmo;
            case "dac":
                return this.dac;
            case "dataFormat":
                return this.dataFormat;
            case "gdac":
                return this.gdac;
            case "gtsCccc":
                return this.gtsCccc;
            case "gtsCode":
                return this.gtsCode;
            case "gtsHeader":
                return this.gtsHeader;
            case "gtsInstrumentType":
                return this.gtsInstrumentType;
            case "gtsRecorderType":
                return this.gtsRecorderType;
            case "obsDataStatus":
                return this.obsDataStatus;
            case "obsObsDataStatuses":
                return this.obsObsDataStatuses;
            case "obsVariables":
                return this.obsVariables;
            case "ptf":
                return this.ptf;
            case "ptfLoc":
                return this.ptfLoc;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "assemblyDate":
                this.assemblyDate = (LocalDateTime)val;
                break;
            case "cycleNb":
                this.cycleNb = (Integer)val;
                break;
            case "dataPath":
                this.dataPath = (String)val;
                break;
            case "delay":
                this.delay = (Double)val;
                break;
            case "deleted":
                this.deleted = (Integer)val;
                break;
            case "depth":
                this.depth = (Double)val;
                break;
            case "depthMax":
                this.depthMax = (Double)val;
                break;
            case "descending":
                this.descending = (Integer)val;
                break;
            case "distributionDate":
                this.distributionDate = (LocalDateTime)val;
                break;
            case "filename":
                this.filename = (String)val;
                break;
            case "id":
                this.id = (Integer)val;
                break;
            case "insertDate":
                this.insertDate = (LocalDateTime)val;
                break;
            case "lat":
                this.lat = (Double)val;
                break;
            case "latestAssemblyDate":
                this.latestAssemblyDate = (LocalDateTime)val;
                break;
            case "latestDistributionDate":
                this.latestDistributionDate = (LocalDateTime)val;
                break;
            case "lon":
                this.lon = (Double)val;
                break;
            case "obsDate":
                this.obsDate = (LocalDateTime)val;
                break;
            case "obsEndDate":
                this.obsEndDate = (LocalDateTime)val;
                break;
            case "updateDate":
                this.updateDate = (LocalDateTime)val;
                break;
            case "wmo":
                this.wmo = (String)val;
                break;
            case "dac":
                this.dac = val;
                break;
            case "dataFormat":
                this.dataFormat = val;
                break;
            case "gdac":
                this.gdac = val;
                break;
            case "gtsCccc":
                this.gtsCccc = val;
                break;
            case "gtsCode":
                this.gtsCode = val;
                break;
            case "gtsHeader":
                this.gtsHeader = val;
                break;
            case "gtsInstrumentType":
                this.gtsInstrumentType = val;
                break;
            case "gtsRecorderType":
                this.gtsRecorderType = val;
                break;
            case "obsDataStatus":
                this.obsDataStatus = val;
                break;
            case "obsObsDataStatuses":
                this.obsObsDataStatuses = val;
                break;
            case "obsVariables":
                this.obsVariables = val;
                break;
            case "ptf":
                this.ptf = val;
                break;
            case "ptfLoc":
                this.ptfLoc = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.assemblyDate);
        out.writeObject(this.cycleNb);
        out.writeObject(this.dataPath);
        out.writeObject(this.delay);
        out.writeObject(this.deleted);
        out.writeObject(this.depth);
        out.writeObject(this.depthMax);
        out.writeObject(this.descending);
        out.writeObject(this.distributionDate);
        out.writeObject(this.filename);
        out.writeObject(this.id);
        out.writeObject(this.insertDate);
        out.writeObject(this.lat);
        out.writeObject(this.latestAssemblyDate);
        out.writeObject(this.latestDistributionDate);
        out.writeObject(this.lon);
        out.writeObject(this.obsDate);
        out.writeObject(this.obsEndDate);
        out.writeObject(this.updateDate);
        out.writeObject(this.wmo);
        out.writeObject(this.dac);
        out.writeObject(this.dataFormat);
        out.writeObject(this.gdac);
        out.writeObject(this.gtsCccc);
        out.writeObject(this.gtsCode);
        out.writeObject(this.gtsHeader);
        out.writeObject(this.gtsInstrumentType);
        out.writeObject(this.gtsRecorderType);
        out.writeObject(this.obsDataStatus);
        out.writeObject(this.obsObsDataStatuses);
        out.writeObject(this.obsVariables);
        out.writeObject(this.ptf);
        out.writeObject(this.ptfLoc);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.assemblyDate = (LocalDateTime)in.readObject();
        this.cycleNb = (Integer)in.readObject();
        this.dataPath = (String)in.readObject();
        this.delay = (Double)in.readObject();
        this.deleted = (Integer)in.readObject();
        this.depth = (Double)in.readObject();
        this.depthMax = (Double)in.readObject();
        this.descending = (Integer)in.readObject();
        this.distributionDate = (LocalDateTime)in.readObject();
        this.filename = (String)in.readObject();
        this.id = (Integer)in.readObject();
        this.insertDate = (LocalDateTime)in.readObject();
        this.lat = (Double)in.readObject();
        this.latestAssemblyDate = (LocalDateTime)in.readObject();
        this.latestDistributionDate = (LocalDateTime)in.readObject();
        this.lon = (Double)in.readObject();
        this.obsDate = (LocalDateTime)in.readObject();
        this.obsEndDate = (LocalDateTime)in.readObject();
        this.updateDate = (LocalDateTime)in.readObject();
        this.wmo = (String)in.readObject();
        this.dac = in.readObject();
        this.dataFormat = in.readObject();
        this.gdac = in.readObject();
        this.gtsCccc = in.readObject();
        this.gtsCode = in.readObject();
        this.gtsHeader = in.readObject();
        this.gtsInstrumentType = in.readObject();
        this.gtsRecorderType = in.readObject();
        this.obsDataStatus = in.readObject();
        this.obsObsDataStatuses = in.readObject();
        this.obsVariables = in.readObject();
        this.ptf = in.readObject();
        this.ptfLoc = in.readObject();
    }

}
