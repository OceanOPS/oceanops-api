package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.api.orm.Obs;
import org.oceanops.api.orm.PtfModel;

/**
 * Class _GtsInstrumentType was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _GtsInstrumentType extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> CODE = PropertyFactory.createString("code", String.class);
    public static final StringProperty<String> DETAILS = PropertyFactory.createString("details", String.class);
    public static final NumericProperty<Double> FALLRATE_A = PropertyFactory.createNumeric("fallrateA", Double.class);
    public static final NumericProperty<Double> FALLRATE_B = PropertyFactory.createNumeric("fallrateB", Double.class);
    public static final NumericProperty<Integer> ID = PropertyFactory.createNumeric("id", Integer.class);
    public static final StringProperty<String> TYPE = PropertyFactory.createString("type", String.class);
    public static final ListProperty<Obs> OBSS = PropertyFactory.createList("obss", Obs.class);
    public static final ListProperty<PtfModel> PTF_MODELS = PropertyFactory.createList("ptfModels", PtfModel.class);

    protected String code;
    protected String details;
    protected Double fallrateA;
    protected Double fallrateB;
    protected Integer id;
    protected String type;

    protected Object obss;
    protected Object ptfModels;

    public void setCode(String code) {
        beforePropertyWrite("code", this.code, code);
        this.code = code;
    }

    public String getCode() {
        beforePropertyRead("code");
        return this.code;
    }

    public void setDetails(String details) {
        beforePropertyWrite("details", this.details, details);
        this.details = details;
    }

    public String getDetails() {
        beforePropertyRead("details");
        return this.details;
    }

    public void setFallrateA(Double fallrateA) {
        beforePropertyWrite("fallrateA", this.fallrateA, fallrateA);
        this.fallrateA = fallrateA;
    }

    public Double getFallrateA() {
        beforePropertyRead("fallrateA");
        return this.fallrateA;
    }

    public void setFallrateB(Double fallrateB) {
        beforePropertyWrite("fallrateB", this.fallrateB, fallrateB);
        this.fallrateB = fallrateB;
    }

    public Double getFallrateB() {
        beforePropertyRead("fallrateB");
        return this.fallrateB;
    }

    public void setId(Integer id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Integer getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setType(String type) {
        beforePropertyWrite("type", this.type, type);
        this.type = type;
    }

    public String getType() {
        beforePropertyRead("type");
        return this.type;
    }

    public void addToObss(Obs obj) {
        addToManyTarget("obss", obj, true);
    }

    public void removeFromObss(Obs obj) {
        removeToManyTarget("obss", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Obs> getObss() {
        return (List<Obs>)readProperty("obss");
    }

    public void addToPtfModels(PtfModel obj) {
        addToManyTarget("ptfModels", obj, true);
    }

    public void removeFromPtfModels(PtfModel obj) {
        removeToManyTarget("ptfModels", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfModel> getPtfModels() {
        return (List<PtfModel>)readProperty("ptfModels");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "code":
                return this.code;
            case "details":
                return this.details;
            case "fallrateA":
                return this.fallrateA;
            case "fallrateB":
                return this.fallrateB;
            case "id":
                return this.id;
            case "type":
                return this.type;
            case "obss":
                return this.obss;
            case "ptfModels":
                return this.ptfModels;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "code":
                this.code = (String)val;
                break;
            case "details":
                this.details = (String)val;
                break;
            case "fallrateA":
                this.fallrateA = (Double)val;
                break;
            case "fallrateB":
                this.fallrateB = (Double)val;
                break;
            case "id":
                this.id = (Integer)val;
                break;
            case "type":
                this.type = (String)val;
                break;
            case "obss":
                this.obss = val;
                break;
            case "ptfModels":
                this.ptfModels = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.code);
        out.writeObject(this.details);
        out.writeObject(this.fallrateA);
        out.writeObject(this.fallrateB);
        out.writeObject(this.id);
        out.writeObject(this.type);
        out.writeObject(this.obss);
        out.writeObject(this.ptfModels);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.code = (String)in.readObject();
        this.details = (String)in.readObject();
        this.fallrateA = (Double)in.readObject();
        this.fallrateB = (Double)in.readObject();
        this.id = (Integer)in.readObject();
        this.type = (String)in.readObject();
        this.obss = in.readObject();
        this.ptfModels = in.readObject();
    }

}
