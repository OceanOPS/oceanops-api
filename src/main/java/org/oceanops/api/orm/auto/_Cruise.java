package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.BaseProperty;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.api.orm.Agency;
import org.oceanops.api.orm.CruiseClass;
import org.oceanops.api.orm.CruiseContact;
import org.oceanops.api.orm.CruiseCountry;
import org.oceanops.api.orm.CruiseProgram;
import org.oceanops.api.orm.CruiseSensorModel;
import org.oceanops.api.orm.CruiseStatus;
import org.oceanops.api.orm.CruiseType;
import org.oceanops.api.orm.CruiseVariable;
import org.oceanops.api.orm.Frequency;
import org.oceanops.api.orm.Image;
import org.oceanops.api.orm.Line;
import org.oceanops.api.orm.PtfCruise;
import org.oceanops.api.orm.PtfDeployment;
import org.oceanops.api.orm.Retrieval;
import org.oceanops.api.orm.Service;
import org.oceanops.api.orm.Ship;
import org.oceanops.api.orm.Survey;
import org.oceanops.api.orm.WebFrequentation;
import org.oceanops.api.orm.Weblink;

/**
 * Class _Cruise was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Cruise extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final DateProperty<LocalDateTime> ARRIVAL_DATE = PropertyFactory.createDate("arrivalDate", LocalDateTime.class);
    public static final NumericProperty<Integer> AUTONOMY = PropertyFactory.createNumeric("autonomy", Integer.class);
    public static final NumericProperty<Integer> COOPERATIONS = PropertyFactory.createNumeric("cooperations", Integer.class);
    public static final NumericProperty<Integer> COST_MONTH = PropertyFactory.createNumeric("costMonth", Integer.class);
    public static final NumericProperty<Integer> COST_UNIT = PropertyFactory.createNumeric("costUnit", Integer.class);
    public static final NumericProperty<Integer> DATES_PENDING = PropertyFactory.createNumeric("datesPending", Integer.class);
    public static final DateProperty<LocalDateTime> DEMOB_DATE = PropertyFactory.createDate("demobDate", LocalDateTime.class);
    public static final DateProperty<LocalDateTime> DEPARTURE_DATE = PropertyFactory.createDate("departureDate", LocalDateTime.class);
    public static final StringProperty<String> DESCRIPTION = PropertyFactory.createString("description", String.class);
    public static final NumericProperty<Integer> EMBARK_CAPACITY = PropertyFactory.createNumeric("embarkCapacity", Integer.class);
    public static final NumericProperty<Integer> FLEXIBLE_ROUTE = PropertyFactory.createNumeric("flexibleRoute", Integer.class);
    public static final NumericProperty<Integer> ID = PropertyFactory.createNumeric("id", Integer.class);
    public static final StringProperty<String> IIOE2ID = PropertyFactory.createString("iioe2Id", String.class);
    public static final DateProperty<LocalDateTime> INSERT_DATE = PropertyFactory.createDate("insertDate", LocalDateTime.class);
    public static final DateProperty<LocalDateTime> MOB_DATE = PropertyFactory.createDate("mobDate", LocalDateTime.class);
    public static final DateProperty<LocalDateTime> MODIF_DATE = PropertyFactory.createDate("modifDate", LocalDateTime.class);
    public static final StringProperty<String> NAME_LONG = PropertyFactory.createString("nameLong", String.class);
    public static final DateProperty<LocalDateTime> OPERATION_DATE = PropertyFactory.createDate("operationDate", LocalDateTime.class);
    public static final StringProperty<String> PERFORMANCE_COMMENT = PropertyFactory.createString("performanceComment", String.class);
    public static final NumericProperty<Double> PERFORMANCE_INDEX = PropertyFactory.createNumeric("performanceIndex", Double.class);
    public static final StringProperty<String> PROJECT_NAME = PropertyFactory.createString("projectName", String.class);
    public static final StringProperty<String> REF = PropertyFactory.createString("ref", String.class);
    public static final StringProperty<String> REF_TMP = PropertyFactory.createString("refTmp", String.class);
    public static final NumericProperty<Integer> ROUTE_PENDING = PropertyFactory.createNumeric("routePending", Integer.class);
    public static final NumericProperty<Integer> ROUTE_PRIVATE = PropertyFactory.createNumeric("routePrivate", Integer.class);
    public static final BaseProperty<byte[]> SHAPE = PropertyFactory.createBase("shape", byte[].class);
    public static final NumericProperty<Integer> SHIP_STOP = PropertyFactory.createNumeric("shipStop", Integer.class);
    public static final NumericProperty<Integer> STORAGE_CAPACITY = PropertyFactory.createNumeric("storageCapacity", Integer.class);
    public static final NumericProperty<Integer> UNOLS_ID = PropertyFactory.createNumeric("unolsId", Integer.class);
    public static final DateProperty<LocalDateTime> UPDATE_DATE = PropertyFactory.createDate("updateDate", LocalDateTime.class);
    public static final NumericProperty<Integer> VALIDATED = PropertyFactory.createNumeric("validated", Integer.class);
    public static final StringProperty<String> WKT = PropertyFactory.createString("wkt", String.class);
    public static final EntityProperty<Agency> AGENCY = PropertyFactory.createEntity("agency", Agency.class);
    public static final EntityProperty<CruiseClass> CRUISE_CLASS = PropertyFactory.createEntity("cruiseClass", CruiseClass.class);
    public static final ListProperty<CruiseContact> CRUISE_CONTACTS = PropertyFactory.createList("cruiseContacts", CruiseContact.class);
    public static final ListProperty<CruiseCountry> CRUISE_COUNTRIES = PropertyFactory.createList("cruiseCountries", CruiseCountry.class);
    public static final ListProperty<CruiseProgram> CRUISE_PROGRAMS = PropertyFactory.createList("cruisePrograms", CruiseProgram.class);
    public static final ListProperty<CruiseSensorModel> CRUISE_SENSOR_MODELS = PropertyFactory.createList("cruiseSensorModels", CruiseSensorModel.class);
    public static final EntityProperty<CruiseStatus> CRUISE_STATUS = PropertyFactory.createEntity("cruiseStatus", CruiseStatus.class);
    public static final EntityProperty<CruiseType> CRUISE_TYPE = PropertyFactory.createEntity("cruiseType", CruiseType.class);
    public static final ListProperty<CruiseVariable> CRUISE_VARIABLES = PropertyFactory.createList("cruiseVariables", CruiseVariable.class);
    public static final EntityProperty<Frequency> FREQUENCY = PropertyFactory.createEntity("frequency", Frequency.class);
    public static final EntityProperty<Image> IMAGE = PropertyFactory.createEntity("image", Image.class);
    public static final EntityProperty<Line> LINE = PropertyFactory.createEntity("line", Line.class);
    public static final ListProperty<PtfCruise> PTF_CRUISES = PropertyFactory.createList("ptfCruises", PtfCruise.class);
    public static final ListProperty<PtfDeployment> PTF_DEPLOYMENTS = PropertyFactory.createList("ptfDeployments", PtfDeployment.class);
    public static final ListProperty<Retrieval> RETRIEVALS = PropertyFactory.createList("retrievals", Retrieval.class);
    public static final ListProperty<Service> SERVICES = PropertyFactory.createList("services", Service.class);
    public static final EntityProperty<Ship> SHIP = PropertyFactory.createEntity("ship", Ship.class);
    public static final EntityProperty<Survey> SURVEY = PropertyFactory.createEntity("survey", Survey.class);
    public static final ListProperty<WebFrequentation> WEB_FREQUENTATIONS = PropertyFactory.createList("webFrequentations", WebFrequentation.class);
    public static final EntityProperty<Weblink> WEBLINK = PropertyFactory.createEntity("weblink", Weblink.class);

    protected LocalDateTime arrivalDate;
    protected Integer autonomy;
    protected Integer cooperations;
    protected Integer costMonth;
    protected Integer costUnit;
    protected Integer datesPending;
    protected LocalDateTime demobDate;
    protected LocalDateTime departureDate;
    protected String description;
    protected Integer embarkCapacity;
    protected Integer flexibleRoute;
    protected Integer id;
    protected String iioe2Id;
    protected LocalDateTime insertDate;
    protected LocalDateTime mobDate;
    protected LocalDateTime modifDate;
    protected String nameLong;
    protected LocalDateTime operationDate;
    protected String performanceComment;
    protected Double performanceIndex;
    protected String projectName;
    protected String ref;
    protected String refTmp;
    protected Integer routePending;
    protected Integer routePrivate;
    protected byte[] shape;
    protected Integer shipStop;
    protected Integer storageCapacity;
    protected Integer unolsId;
    protected LocalDateTime updateDate;
    protected Integer validated;
    protected String wkt;

    protected Object agency;
    protected Object cruiseClass;
    protected Object cruiseContacts;
    protected Object cruiseCountries;
    protected Object cruisePrograms;
    protected Object cruiseSensorModels;
    protected Object cruiseStatus;
    protected Object cruiseType;
    protected Object cruiseVariables;
    protected Object frequency;
    protected Object image;
    protected Object line;
    protected Object ptfCruises;
    protected Object ptfDeployments;
    protected Object retrievals;
    protected Object services;
    protected Object ship;
    protected Object survey;
    protected Object webFrequentations;
    protected Object weblink;

    public void setArrivalDate(LocalDateTime arrivalDate) {
        beforePropertyWrite("arrivalDate", this.arrivalDate, arrivalDate);
        this.arrivalDate = arrivalDate;
    }

    public LocalDateTime getArrivalDate() {
        beforePropertyRead("arrivalDate");
        return this.arrivalDate;
    }

    public void setAutonomy(Integer autonomy) {
        beforePropertyWrite("autonomy", this.autonomy, autonomy);
        this.autonomy = autonomy;
    }

    public Integer getAutonomy() {
        beforePropertyRead("autonomy");
        return this.autonomy;
    }

    public void setCooperations(Integer cooperations) {
        beforePropertyWrite("cooperations", this.cooperations, cooperations);
        this.cooperations = cooperations;
    }

    public Integer getCooperations() {
        beforePropertyRead("cooperations");
        return this.cooperations;
    }

    public void setCostMonth(Integer costMonth) {
        beforePropertyWrite("costMonth", this.costMonth, costMonth);
        this.costMonth = costMonth;
    }

    public Integer getCostMonth() {
        beforePropertyRead("costMonth");
        return this.costMonth;
    }

    public void setCostUnit(Integer costUnit) {
        beforePropertyWrite("costUnit", this.costUnit, costUnit);
        this.costUnit = costUnit;
    }

    public Integer getCostUnit() {
        beforePropertyRead("costUnit");
        return this.costUnit;
    }

    public void setDatesPending(Integer datesPending) {
        beforePropertyWrite("datesPending", this.datesPending, datesPending);
        this.datesPending = datesPending;
    }

    public Integer getDatesPending() {
        beforePropertyRead("datesPending");
        return this.datesPending;
    }

    public void setDemobDate(LocalDateTime demobDate) {
        beforePropertyWrite("demobDate", this.demobDate, demobDate);
        this.demobDate = demobDate;
    }

    public LocalDateTime getDemobDate() {
        beforePropertyRead("demobDate");
        return this.demobDate;
    }

    public void setDepartureDate(LocalDateTime departureDate) {
        beforePropertyWrite("departureDate", this.departureDate, departureDate);
        this.departureDate = departureDate;
    }

    public LocalDateTime getDepartureDate() {
        beforePropertyRead("departureDate");
        return this.departureDate;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setEmbarkCapacity(Integer embarkCapacity) {
        beforePropertyWrite("embarkCapacity", this.embarkCapacity, embarkCapacity);
        this.embarkCapacity = embarkCapacity;
    }

    public Integer getEmbarkCapacity() {
        beforePropertyRead("embarkCapacity");
        return this.embarkCapacity;
    }

    public void setFlexibleRoute(Integer flexibleRoute) {
        beforePropertyWrite("flexibleRoute", this.flexibleRoute, flexibleRoute);
        this.flexibleRoute = flexibleRoute;
    }

    public Integer getFlexibleRoute() {
        beforePropertyRead("flexibleRoute");
        return this.flexibleRoute;
    }

    public void setId(Integer id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Integer getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setIioe2Id(String iioe2Id) {
        beforePropertyWrite("iioe2Id", this.iioe2Id, iioe2Id);
        this.iioe2Id = iioe2Id;
    }

    public String getIioe2Id() {
        beforePropertyRead("iioe2Id");
        return this.iioe2Id;
    }

    public void setInsertDate(LocalDateTime insertDate) {
        beforePropertyWrite("insertDate", this.insertDate, insertDate);
        this.insertDate = insertDate;
    }

    public LocalDateTime getInsertDate() {
        beforePropertyRead("insertDate");
        return this.insertDate;
    }

    public void setMobDate(LocalDateTime mobDate) {
        beforePropertyWrite("mobDate", this.mobDate, mobDate);
        this.mobDate = mobDate;
    }

    public LocalDateTime getMobDate() {
        beforePropertyRead("mobDate");
        return this.mobDate;
    }

    public void setModifDate(LocalDateTime modifDate) {
        beforePropertyWrite("modifDate", this.modifDate, modifDate);
        this.modifDate = modifDate;
    }

    public LocalDateTime getModifDate() {
        beforePropertyRead("modifDate");
        return this.modifDate;
    }

    public void setNameLong(String nameLong) {
        beforePropertyWrite("nameLong", this.nameLong, nameLong);
        this.nameLong = nameLong;
    }

    public String getNameLong() {
        beforePropertyRead("nameLong");
        return this.nameLong;
    }

    public void setOperationDate(LocalDateTime operationDate) {
        beforePropertyWrite("operationDate", this.operationDate, operationDate);
        this.operationDate = operationDate;
    }

    public LocalDateTime getOperationDate() {
        beforePropertyRead("operationDate");
        return this.operationDate;
    }

    public void setPerformanceComment(String performanceComment) {
        beforePropertyWrite("performanceComment", this.performanceComment, performanceComment);
        this.performanceComment = performanceComment;
    }

    public String getPerformanceComment() {
        beforePropertyRead("performanceComment");
        return this.performanceComment;
    }

    public void setPerformanceIndex(Double performanceIndex) {
        beforePropertyWrite("performanceIndex", this.performanceIndex, performanceIndex);
        this.performanceIndex = performanceIndex;
    }

    public Double getPerformanceIndex() {
        beforePropertyRead("performanceIndex");
        return this.performanceIndex;
    }

    public void setProjectName(String projectName) {
        beforePropertyWrite("projectName", this.projectName, projectName);
        this.projectName = projectName;
    }

    public String getProjectName() {
        beforePropertyRead("projectName");
        return this.projectName;
    }

    public void setRef(String ref) {
        beforePropertyWrite("ref", this.ref, ref);
        this.ref = ref;
    }

    public String getRef() {
        beforePropertyRead("ref");
        return this.ref;
    }

    public void setRefTmp(String refTmp) {
        beforePropertyWrite("refTmp", this.refTmp, refTmp);
        this.refTmp = refTmp;
    }

    public String getRefTmp() {
        beforePropertyRead("refTmp");
        return this.refTmp;
    }

    public void setRoutePending(Integer routePending) {
        beforePropertyWrite("routePending", this.routePending, routePending);
        this.routePending = routePending;
    }

    public Integer getRoutePending() {
        beforePropertyRead("routePending");
        return this.routePending;
    }

    public void setRoutePrivate(Integer routePrivate) {
        beforePropertyWrite("routePrivate", this.routePrivate, routePrivate);
        this.routePrivate = routePrivate;
    }

    public Integer getRoutePrivate() {
        beforePropertyRead("routePrivate");
        return this.routePrivate;
    }

    public void setShape(byte[] shape) {
        beforePropertyWrite("shape", this.shape, shape);
        this.shape = shape;
    }

    public byte[] getShape() {
        beforePropertyRead("shape");
        return this.shape;
    }

    public void setShipStop(Integer shipStop) {
        beforePropertyWrite("shipStop", this.shipStop, shipStop);
        this.shipStop = shipStop;
    }

    public Integer getShipStop() {
        beforePropertyRead("shipStop");
        return this.shipStop;
    }

    public void setStorageCapacity(Integer storageCapacity) {
        beforePropertyWrite("storageCapacity", this.storageCapacity, storageCapacity);
        this.storageCapacity = storageCapacity;
    }

    public Integer getStorageCapacity() {
        beforePropertyRead("storageCapacity");
        return this.storageCapacity;
    }

    public void setUnolsId(Integer unolsId) {
        beforePropertyWrite("unolsId", this.unolsId, unolsId);
        this.unolsId = unolsId;
    }

    public Integer getUnolsId() {
        beforePropertyRead("unolsId");
        return this.unolsId;
    }

    public void setUpdateDate(LocalDateTime updateDate) {
        beforePropertyWrite("updateDate", this.updateDate, updateDate);
        this.updateDate = updateDate;
    }

    public LocalDateTime getUpdateDate() {
        beforePropertyRead("updateDate");
        return this.updateDate;
    }

    public void setValidated(Integer validated) {
        beforePropertyWrite("validated", this.validated, validated);
        this.validated = validated;
    }

    public Integer getValidated() {
        beforePropertyRead("validated");
        return this.validated;
    }

    public void setWkt(String wkt) {
        beforePropertyWrite("wkt", this.wkt, wkt);
        this.wkt = wkt;
    }

    public String getWkt() {
        beforePropertyRead("wkt");
        return this.wkt;
    }

    public void setAgency(Agency agency) {
        setToOneTarget("agency", agency, true);
    }

    public Agency getAgency() {
        return (Agency)readProperty("agency");
    }

    public void setCruiseClass(CruiseClass cruiseClass) {
        setToOneTarget("cruiseClass", cruiseClass, true);
    }

    public CruiseClass getCruiseClass() {
        return (CruiseClass)readProperty("cruiseClass");
    }

    public void addToCruiseContacts(CruiseContact obj) {
        addToManyTarget("cruiseContacts", obj, true);
    }

    public void removeFromCruiseContacts(CruiseContact obj) {
        removeToManyTarget("cruiseContacts", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CruiseContact> getCruiseContacts() {
        return (List<CruiseContact>)readProperty("cruiseContacts");
    }

    public void addToCruiseCountries(CruiseCountry obj) {
        addToManyTarget("cruiseCountries", obj, true);
    }

    public void removeFromCruiseCountries(CruiseCountry obj) {
        removeToManyTarget("cruiseCountries", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CruiseCountry> getCruiseCountries() {
        return (List<CruiseCountry>)readProperty("cruiseCountries");
    }

    public void addToCruisePrograms(CruiseProgram obj) {
        addToManyTarget("cruisePrograms", obj, true);
    }

    public void removeFromCruisePrograms(CruiseProgram obj) {
        removeToManyTarget("cruisePrograms", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CruiseProgram> getCruisePrograms() {
        return (List<CruiseProgram>)readProperty("cruisePrograms");
    }

    public void addToCruiseSensorModels(CruiseSensorModel obj) {
        addToManyTarget("cruiseSensorModels", obj, true);
    }

    public void removeFromCruiseSensorModels(CruiseSensorModel obj) {
        removeToManyTarget("cruiseSensorModels", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CruiseSensorModel> getCruiseSensorModels() {
        return (List<CruiseSensorModel>)readProperty("cruiseSensorModels");
    }

    public void setCruiseStatus(CruiseStatus cruiseStatus) {
        setToOneTarget("cruiseStatus", cruiseStatus, true);
    }

    public CruiseStatus getCruiseStatus() {
        return (CruiseStatus)readProperty("cruiseStatus");
    }

    public void setCruiseType(CruiseType cruiseType) {
        setToOneTarget("cruiseType", cruiseType, true);
    }

    public CruiseType getCruiseType() {
        return (CruiseType)readProperty("cruiseType");
    }

    public void addToCruiseVariables(CruiseVariable obj) {
        addToManyTarget("cruiseVariables", obj, true);
    }

    public void removeFromCruiseVariables(CruiseVariable obj) {
        removeToManyTarget("cruiseVariables", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CruiseVariable> getCruiseVariables() {
        return (List<CruiseVariable>)readProperty("cruiseVariables");
    }

    public void setFrequency(Frequency frequency) {
        setToOneTarget("frequency", frequency, true);
    }

    public Frequency getFrequency() {
        return (Frequency)readProperty("frequency");
    }

    public void setImage(Image image) {
        setToOneTarget("image", image, true);
    }

    public Image getImage() {
        return (Image)readProperty("image");
    }

    public void setLine(Line line) {
        setToOneTarget("line", line, true);
    }

    public Line getLine() {
        return (Line)readProperty("line");
    }

    public void addToPtfCruises(PtfCruise obj) {
        addToManyTarget("ptfCruises", obj, true);
    }

    public void removeFromPtfCruises(PtfCruise obj) {
        removeToManyTarget("ptfCruises", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfCruise> getPtfCruises() {
        return (List<PtfCruise>)readProperty("ptfCruises");
    }

    public void addToPtfDeployments(PtfDeployment obj) {
        addToManyTarget("ptfDeployments", obj, true);
    }

    public void removeFromPtfDeployments(PtfDeployment obj) {
        removeToManyTarget("ptfDeployments", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfDeployment> getPtfDeployments() {
        return (List<PtfDeployment>)readProperty("ptfDeployments");
    }

    public void addToRetrievals(Retrieval obj) {
        addToManyTarget("retrievals", obj, true);
    }

    public void removeFromRetrievals(Retrieval obj) {
        removeToManyTarget("retrievals", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Retrieval> getRetrievals() {
        return (List<Retrieval>)readProperty("retrievals");
    }

    public void addToServices(Service obj) {
        addToManyTarget("services", obj, true);
    }

    public void removeFromServices(Service obj) {
        removeToManyTarget("services", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Service> getServices() {
        return (List<Service>)readProperty("services");
    }

    public void setShip(Ship ship) {
        setToOneTarget("ship", ship, true);
    }

    public Ship getShip() {
        return (Ship)readProperty("ship");
    }

    public void setSurvey(Survey survey) {
        setToOneTarget("survey", survey, true);
    }

    public Survey getSurvey() {
        return (Survey)readProperty("survey");
    }

    public void addToWebFrequentations(WebFrequentation obj) {
        addToManyTarget("webFrequentations", obj, true);
    }

    public void removeFromWebFrequentations(WebFrequentation obj) {
        removeToManyTarget("webFrequentations", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<WebFrequentation> getWebFrequentations() {
        return (List<WebFrequentation>)readProperty("webFrequentations");
    }

    public void setWeblink(Weblink weblink) {
        setToOneTarget("weblink", weblink, true);
    }

    public Weblink getWeblink() {
        return (Weblink)readProperty("weblink");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "arrivalDate":
                return this.arrivalDate;
            case "autonomy":
                return this.autonomy;
            case "cooperations":
                return this.cooperations;
            case "costMonth":
                return this.costMonth;
            case "costUnit":
                return this.costUnit;
            case "datesPending":
                return this.datesPending;
            case "demobDate":
                return this.demobDate;
            case "departureDate":
                return this.departureDate;
            case "description":
                return this.description;
            case "embarkCapacity":
                return this.embarkCapacity;
            case "flexibleRoute":
                return this.flexibleRoute;
            case "id":
                return this.id;
            case "iioe2Id":
                return this.iioe2Id;
            case "insertDate":
                return this.insertDate;
            case "mobDate":
                return this.mobDate;
            case "modifDate":
                return this.modifDate;
            case "nameLong":
                return this.nameLong;
            case "operationDate":
                return this.operationDate;
            case "performanceComment":
                return this.performanceComment;
            case "performanceIndex":
                return this.performanceIndex;
            case "projectName":
                return this.projectName;
            case "ref":
                return this.ref;
            case "refTmp":
                return this.refTmp;
            case "routePending":
                return this.routePending;
            case "routePrivate":
                return this.routePrivate;
            case "shape":
                return this.shape;
            case "shipStop":
                return this.shipStop;
            case "storageCapacity":
                return this.storageCapacity;
            case "unolsId":
                return this.unolsId;
            case "updateDate":
                return this.updateDate;
            case "validated":
                return this.validated;
            case "wkt":
                return this.wkt;
            case "agency":
                return this.agency;
            case "cruiseClass":
                return this.cruiseClass;
            case "cruiseContacts":
                return this.cruiseContacts;
            case "cruiseCountries":
                return this.cruiseCountries;
            case "cruisePrograms":
                return this.cruisePrograms;
            case "cruiseSensorModels":
                return this.cruiseSensorModels;
            case "cruiseStatus":
                return this.cruiseStatus;
            case "cruiseType":
                return this.cruiseType;
            case "cruiseVariables":
                return this.cruiseVariables;
            case "frequency":
                return this.frequency;
            case "image":
                return this.image;
            case "line":
                return this.line;
            case "ptfCruises":
                return this.ptfCruises;
            case "ptfDeployments":
                return this.ptfDeployments;
            case "retrievals":
                return this.retrievals;
            case "services":
                return this.services;
            case "ship":
                return this.ship;
            case "survey":
                return this.survey;
            case "webFrequentations":
                return this.webFrequentations;
            case "weblink":
                return this.weblink;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "arrivalDate":
                this.arrivalDate = (LocalDateTime)val;
                break;
            case "autonomy":
                this.autonomy = (Integer)val;
                break;
            case "cooperations":
                this.cooperations = (Integer)val;
                break;
            case "costMonth":
                this.costMonth = (Integer)val;
                break;
            case "costUnit":
                this.costUnit = (Integer)val;
                break;
            case "datesPending":
                this.datesPending = (Integer)val;
                break;
            case "demobDate":
                this.demobDate = (LocalDateTime)val;
                break;
            case "departureDate":
                this.departureDate = (LocalDateTime)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "embarkCapacity":
                this.embarkCapacity = (Integer)val;
                break;
            case "flexibleRoute":
                this.flexibleRoute = (Integer)val;
                break;
            case "id":
                this.id = (Integer)val;
                break;
            case "iioe2Id":
                this.iioe2Id = (String)val;
                break;
            case "insertDate":
                this.insertDate = (LocalDateTime)val;
                break;
            case "mobDate":
                this.mobDate = (LocalDateTime)val;
                break;
            case "modifDate":
                this.modifDate = (LocalDateTime)val;
                break;
            case "nameLong":
                this.nameLong = (String)val;
                break;
            case "operationDate":
                this.operationDate = (LocalDateTime)val;
                break;
            case "performanceComment":
                this.performanceComment = (String)val;
                break;
            case "performanceIndex":
                this.performanceIndex = (Double)val;
                break;
            case "projectName":
                this.projectName = (String)val;
                break;
            case "ref":
                this.ref = (String)val;
                break;
            case "refTmp":
                this.refTmp = (String)val;
                break;
            case "routePending":
                this.routePending = (Integer)val;
                break;
            case "routePrivate":
                this.routePrivate = (Integer)val;
                break;
            case "shape":
                this.shape = (byte[])val;
                break;
            case "shipStop":
                this.shipStop = (Integer)val;
                break;
            case "storageCapacity":
                this.storageCapacity = (Integer)val;
                break;
            case "unolsId":
                this.unolsId = (Integer)val;
                break;
            case "updateDate":
                this.updateDate = (LocalDateTime)val;
                break;
            case "validated":
                this.validated = (Integer)val;
                break;
            case "wkt":
                this.wkt = (String)val;
                break;
            case "agency":
                this.agency = val;
                break;
            case "cruiseClass":
                this.cruiseClass = val;
                break;
            case "cruiseContacts":
                this.cruiseContacts = val;
                break;
            case "cruiseCountries":
                this.cruiseCountries = val;
                break;
            case "cruisePrograms":
                this.cruisePrograms = val;
                break;
            case "cruiseSensorModels":
                this.cruiseSensorModels = val;
                break;
            case "cruiseStatus":
                this.cruiseStatus = val;
                break;
            case "cruiseType":
                this.cruiseType = val;
                break;
            case "cruiseVariables":
                this.cruiseVariables = val;
                break;
            case "frequency":
                this.frequency = val;
                break;
            case "image":
                this.image = val;
                break;
            case "line":
                this.line = val;
                break;
            case "ptfCruises":
                this.ptfCruises = val;
                break;
            case "ptfDeployments":
                this.ptfDeployments = val;
                break;
            case "retrievals":
                this.retrievals = val;
                break;
            case "services":
                this.services = val;
                break;
            case "ship":
                this.ship = val;
                break;
            case "survey":
                this.survey = val;
                break;
            case "webFrequentations":
                this.webFrequentations = val;
                break;
            case "weblink":
                this.weblink = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.arrivalDate);
        out.writeObject(this.autonomy);
        out.writeObject(this.cooperations);
        out.writeObject(this.costMonth);
        out.writeObject(this.costUnit);
        out.writeObject(this.datesPending);
        out.writeObject(this.demobDate);
        out.writeObject(this.departureDate);
        out.writeObject(this.description);
        out.writeObject(this.embarkCapacity);
        out.writeObject(this.flexibleRoute);
        out.writeObject(this.id);
        out.writeObject(this.iioe2Id);
        out.writeObject(this.insertDate);
        out.writeObject(this.mobDate);
        out.writeObject(this.modifDate);
        out.writeObject(this.nameLong);
        out.writeObject(this.operationDate);
        out.writeObject(this.performanceComment);
        out.writeObject(this.performanceIndex);
        out.writeObject(this.projectName);
        out.writeObject(this.ref);
        out.writeObject(this.refTmp);
        out.writeObject(this.routePending);
        out.writeObject(this.routePrivate);
        out.writeObject(this.shape);
        out.writeObject(this.shipStop);
        out.writeObject(this.storageCapacity);
        out.writeObject(this.unolsId);
        out.writeObject(this.updateDate);
        out.writeObject(this.validated);
        out.writeObject(this.wkt);
        out.writeObject(this.agency);
        out.writeObject(this.cruiseClass);
        out.writeObject(this.cruiseContacts);
        out.writeObject(this.cruiseCountries);
        out.writeObject(this.cruisePrograms);
        out.writeObject(this.cruiseSensorModels);
        out.writeObject(this.cruiseStatus);
        out.writeObject(this.cruiseType);
        out.writeObject(this.cruiseVariables);
        out.writeObject(this.frequency);
        out.writeObject(this.image);
        out.writeObject(this.line);
        out.writeObject(this.ptfCruises);
        out.writeObject(this.ptfDeployments);
        out.writeObject(this.retrievals);
        out.writeObject(this.services);
        out.writeObject(this.ship);
        out.writeObject(this.survey);
        out.writeObject(this.webFrequentations);
        out.writeObject(this.weblink);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.arrivalDate = (LocalDateTime)in.readObject();
        this.autonomy = (Integer)in.readObject();
        this.cooperations = (Integer)in.readObject();
        this.costMonth = (Integer)in.readObject();
        this.costUnit = (Integer)in.readObject();
        this.datesPending = (Integer)in.readObject();
        this.demobDate = (LocalDateTime)in.readObject();
        this.departureDate = (LocalDateTime)in.readObject();
        this.description = (String)in.readObject();
        this.embarkCapacity = (Integer)in.readObject();
        this.flexibleRoute = (Integer)in.readObject();
        this.id = (Integer)in.readObject();
        this.iioe2Id = (String)in.readObject();
        this.insertDate = (LocalDateTime)in.readObject();
        this.mobDate = (LocalDateTime)in.readObject();
        this.modifDate = (LocalDateTime)in.readObject();
        this.nameLong = (String)in.readObject();
        this.operationDate = (LocalDateTime)in.readObject();
        this.performanceComment = (String)in.readObject();
        this.performanceIndex = (Double)in.readObject();
        this.projectName = (String)in.readObject();
        this.ref = (String)in.readObject();
        this.refTmp = (String)in.readObject();
        this.routePending = (Integer)in.readObject();
        this.routePrivate = (Integer)in.readObject();
        this.shape = (byte[])in.readObject();
        this.shipStop = (Integer)in.readObject();
        this.storageCapacity = (Integer)in.readObject();
        this.unolsId = (Integer)in.readObject();
        this.updateDate = (LocalDateTime)in.readObject();
        this.validated = (Integer)in.readObject();
        this.wkt = (String)in.readObject();
        this.agency = in.readObject();
        this.cruiseClass = in.readObject();
        this.cruiseContacts = in.readObject();
        this.cruiseCountries = in.readObject();
        this.cruisePrograms = in.readObject();
        this.cruiseSensorModels = in.readObject();
        this.cruiseStatus = in.readObject();
        this.cruiseType = in.readObject();
        this.cruiseVariables = in.readObject();
        this.frequency = in.readObject();
        this.image = in.readObject();
        this.line = in.readObject();
        this.ptfCruises = in.readObject();
        this.ptfDeployments = in.readObject();
        this.retrievals = in.readObject();
        this.services = in.readObject();
        this.ship = in.readObject();
        this.survey = in.readObject();
        this.webFrequentations = in.readObject();
        this.weblink = in.readObject();
    }

}
