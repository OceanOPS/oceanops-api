package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.oceanops.api.orm.Agency;
import org.oceanops.api.orm.UserGroup;

/**
 * Class _UserGroupAgency was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _UserGroupAgency extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String AGENCY_ID_PK_COLUMN = "AGENCY_ID";
    public static final String USER_GROUP_ID_PK_COLUMN = "USER_GROUP_ID";

    public static final NumericProperty<Integer> AGENCY_ID = PropertyFactory.createNumeric("agencyId", Integer.class);
    public static final NumericProperty<Integer> USER_GROUP_ID = PropertyFactory.createNumeric("userGroupId", Integer.class);
    public static final EntityProperty<Agency> AGENCY = PropertyFactory.createEntity("agency", Agency.class);
    public static final EntityProperty<UserGroup> USER_GROUP = PropertyFactory.createEntity("userGroup", UserGroup.class);

    protected Integer agencyId;
    protected Integer userGroupId;

    protected Object agency;
    protected Object userGroup;

    public void setAgencyId(Integer agencyId) {
        beforePropertyWrite("agencyId", this.agencyId, agencyId);
        this.agencyId = agencyId;
    }

    public Integer getAgencyId() {
        beforePropertyRead("agencyId");
        return this.agencyId;
    }

    public void setUserGroupId(Integer userGroupId) {
        beforePropertyWrite("userGroupId", this.userGroupId, userGroupId);
        this.userGroupId = userGroupId;
    }

    public Integer getUserGroupId() {
        beforePropertyRead("userGroupId");
        return this.userGroupId;
    }

    public void setAgency(Agency agency) {
        setToOneTarget("agency", agency, true);
    }

    public Agency getAgency() {
        return (Agency)readProperty("agency");
    }

    public void setUserGroup(UserGroup userGroup) {
        setToOneTarget("userGroup", userGroup, true);
    }

    public UserGroup getUserGroup() {
        return (UserGroup)readProperty("userGroup");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "agencyId":
                return this.agencyId;
            case "userGroupId":
                return this.userGroupId;
            case "agency":
                return this.agency;
            case "userGroup":
                return this.userGroup;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "agencyId":
                this.agencyId = (Integer)val;
                break;
            case "userGroupId":
                this.userGroupId = (Integer)val;
                break;
            case "agency":
                this.agency = val;
                break;
            case "userGroup":
                this.userGroup = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.agencyId);
        out.writeObject(this.userGroupId);
        out.writeObject(this.agency);
        out.writeObject(this.userGroup);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.agencyId = (Integer)in.readObject();
        this.userGroupId = (Integer)in.readObject();
        this.agency = in.readObject();
        this.userGroup = in.readObject();
    }

}
