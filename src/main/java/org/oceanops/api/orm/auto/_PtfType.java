package org.oceanops.api.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.oceanops.api.orm.Image;
import org.oceanops.api.orm.PtfFamily;
import org.oceanops.api.orm.PtfModel;
import org.oceanops.api.orm.SdnPtfClass;

/**
 * Class _PtfType was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PtfType extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> DESCRIPTION = PropertyFactory.createString("description", String.class);
    public static final NumericProperty<Integer> ID = PropertyFactory.createNumeric("id", Integer.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final StringProperty<String> NAME_SHORT = PropertyFactory.createString("nameShort", String.class);
    public static final StringProperty<String> WIGOS_CODE = PropertyFactory.createString("wigosCode", String.class);
    public static final EntityProperty<Image> IMAGE = PropertyFactory.createEntity("image", Image.class);
    public static final EntityProperty<PtfFamily> PTF_FAMILY = PropertyFactory.createEntity("ptfFamily", PtfFamily.class);
    public static final ListProperty<PtfModel> PTF_MODELS = PropertyFactory.createList("ptfModels", PtfModel.class);
    public static final ListProperty<SdnPtfClass> SDN_PTF_CLASSES = PropertyFactory.createList("sdnPtfClasses", SdnPtfClass.class);

    protected String description;
    protected Integer id;
    protected String name;
    protected String nameShort;
    protected String wigosCode;

    protected Object image;
    protected Object ptfFamily;
    protected Object ptfModels;
    protected Object sdnPtfClasses;

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setId(Integer id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public Integer getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setNameShort(String nameShort) {
        beforePropertyWrite("nameShort", this.nameShort, nameShort);
        this.nameShort = nameShort;
    }

    public String getNameShort() {
        beforePropertyRead("nameShort");
        return this.nameShort;
    }

    public void setWigosCode(String wigosCode) {
        beforePropertyWrite("wigosCode", this.wigosCode, wigosCode);
        this.wigosCode = wigosCode;
    }

    public String getWigosCode() {
        beforePropertyRead("wigosCode");
        return this.wigosCode;
    }

    public void setImage(Image image) {
        setToOneTarget("image", image, true);
    }

    public Image getImage() {
        return (Image)readProperty("image");
    }

    public void setPtfFamily(PtfFamily ptfFamily) {
        setToOneTarget("ptfFamily", ptfFamily, true);
    }

    public PtfFamily getPtfFamily() {
        return (PtfFamily)readProperty("ptfFamily");
    }

    public void addToPtfModels(PtfModel obj) {
        addToManyTarget("ptfModels", obj, true);
    }

    public void removeFromPtfModels(PtfModel obj) {
        removeToManyTarget("ptfModels", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PtfModel> getPtfModels() {
        return (List<PtfModel>)readProperty("ptfModels");
    }

    public void addToSdnPtfClasses(SdnPtfClass obj) {
        addToManyTarget("sdnPtfClasses", obj, true);
    }

    public void removeFromSdnPtfClasses(SdnPtfClass obj) {
        removeToManyTarget("sdnPtfClasses", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<SdnPtfClass> getSdnPtfClasses() {
        return (List<SdnPtfClass>)readProperty("sdnPtfClasses");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "description":
                return this.description;
            case "id":
                return this.id;
            case "name":
                return this.name;
            case "nameShort":
                return this.nameShort;
            case "wigosCode":
                return this.wigosCode;
            case "image":
                return this.image;
            case "ptfFamily":
                return this.ptfFamily;
            case "ptfModels":
                return this.ptfModels;
            case "sdnPtfClasses":
                return this.sdnPtfClasses;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "description":
                this.description = (String)val;
                break;
            case "id":
                this.id = (Integer)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "nameShort":
                this.nameShort = (String)val;
                break;
            case "wigosCode":
                this.wigosCode = (String)val;
                break;
            case "image":
                this.image = val;
                break;
            case "ptfFamily":
                this.ptfFamily = val;
                break;
            case "ptfModels":
                this.ptfModels = val;
                break;
            case "sdnPtfClasses":
                this.sdnPtfClasses = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.description);
        out.writeObject(this.id);
        out.writeObject(this.name);
        out.writeObject(this.nameShort);
        out.writeObject(this.wigosCode);
        out.writeObject(this.image);
        out.writeObject(this.ptfFamily);
        out.writeObject(this.ptfModels);
        out.writeObject(this.sdnPtfClasses);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.description = (String)in.readObject();
        this.id = (Integer)in.readObject();
        this.name = (String)in.readObject();
        this.nameShort = (String)in.readObject();
        this.wigosCode = (String)in.readObject();
        this.image = in.readObject();
        this.ptfFamily = in.readObject();
        this.ptfModels = in.readObject();
        this.sdnPtfClasses = in.readObject();
    }

}
